{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\nimport {initializeCheckboxes, getFilterOjects} from 'local_wunderbyte_table/filter';\nimport {initializeSearch, getSearchInput} from 'local_wunderbyte_table/search';\nimport {initializeSort, getSortSelection} from 'local_wunderbyte_table/sort';\nimport { initializeReload, wbTableReload } from 'local_wunderbyte_table/reload';\n\n\n// All these variables will be objects with the idstringso their tables as identifiers.\nvar loadings = {};\nvar scrollpages = {};\nvar tablejss = {};\n\n/**\n * Gets called from mustache template.\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport const init = (idstring, encodedtable) => {\n\n    // eslint-disable-next-line no-console\n    console.log('wb init', idstring);\n\n    if (idstring && encodedtable) {\n\n        if (!scrollpages.hasOwnProperty(idstring)) {\n            scrollpages[idstring] = 0;\n        }\n\n        respondToVisibility(idstring, encodedtable, callLoadData);\n    }\n};\n\n/**\n * React on visibility change.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {function} callback\n */\nfunction respondToVisibility(idstring, encodedtable, callback) {\n\n    const identifier = 'a' + idstring;\n    let element = document.querySelector('#' + identifier);\n\n    // If we find the table element AND if it has the encoded table set, we abort this.\n    // Hereby we avoid to run JS multiple times.\n    if (element && !element.dataset.encodedtable) {\n        element.dataset.encodedtable = encodedtable;\n    } else {\n        // eslint-disable-next-line no-console\n        console.log('wb didnnt find element aborted', identifier);\n        return;\n    }\n\n    // We only make this callback during init if there is the spinner running.\n    // We don't want to run all of this if we don't use lazyloading.\n    let spinner = document.querySelector(\"#\" + identifier + 'spinner');\n\n    if ((spinner !== null) && !isHidden(spinner)) {\n\n        var observer = new MutationObserver(function() {\n            if (!isHidden(element)) {\n                this.disconnect();\n\n                callback(idstring, encodedtable);\n            }\n        });\n\n        const hiddenElement = returnHiddenElement(element);\n\n        if (hiddenElement !== null) {\n\n            observer.observe(hiddenElement, {attributes: true});\n        } else {\n            callback(idstring, encodedtable);\n        }\n\n    } else {\n\n        // This is what we do when we didn't lazyload.\n        replaceLinksInFrag(idstring, encodedtable, element, null);\n\n        const selector = \".wunderbyte_table_container_\" + idstring;\n        initializeCheckboxes(selector, idstring, encodedtable);\n        initializeSearch(selector, idstring, encodedtable);\n        initializeSort(selector, idstring, encodedtable);\n        initializeReload(selector, idstring, encodedtable);\n\n        // Check to see if scrolling near bottom of page; load more photos\n        // This shoiuld only be added once.\n\n        // As this can only be here once per table, we mark the table.\n        addScrollFunctionality(idstring, encodedtable, element);\n\n        addReloadFunctionality(idstring, encodedtable, element);\n\n    }\n}\n\n/**\n * Return the next scrollable element.\n * @param {*} node\n * @returns {*} node\n */\nfunction getScrollParent(node) {\n    if (node === null) {\n      return null;\n    }\n\n    if (node.scrollHeight > node.clientHeight) {\n      return node;\n    } else {\n      return getScrollParent(node.parentNode);\n    }\n  }\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\n export const isHidden = (el) => {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n};\n\n/**\n * Reloads the rendered table and sets it to the div with the right identifier.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {null|int} page\n * @param {null|string} tsort\n * @param {null|string} thide\n * @param {null|string} tshow\n * @param {null|int} tdir\n * @param {null|int} treset\n * @param {null|string} filterobjects\n * @param {null|string} searchtext\n * @param {null|bool} replacerow\n */\nexport const callLoadData = (\n    idstring,\n    encodedtable,\n    page = null,\n    tsort = null,\n    thide = null,\n    tshow = null,\n    tdir = null,\n    treset = null,\n    filterobjects = null,\n    searchtext = null,\n    replacerow = false) => {\n\n    if (loadings[idstring]) {\n        return;\n    }\n\n    // We reset scrollpage with 0 when we come from the filter.\n    if (page !== null) {\n        scrollpages[idstring] = page;\n    }\n\n    // We always have to see if we need to apply a filter. Reload might come from scroll, but filter has to be applied nevertheless.\n    if (filterobjects === null) {\n        filterobjects = getFilterOjects(idstring);\n    }\n    // We always have to see if we need to apply a serachtextfilter.\n    if (searchtext === null) {\n        searchtext = getSearchInput(idstring);\n    }\n    // We always have to see if we need to apply a sortorder.\n    if (tsort === null) {\n        tsort = getSortSelection(idstring);\n    }\n\n    let table = document.getElementById('a' + idstring);\n\n    // This is now the individual spinner from the wunderbyte table template.\n    let spinner = document.querySelector('#a' + idstring + 'spinner .spinner-border');\n\n    // If we replace the whole table, we show the spinner. If we only add rows in infinite scroll, we don't.\n    if (scrollpages[idstring] == 0\n            && !replacerow) {\n        if (spinner) {\n            spinner.classList.remove('hidden');\n        }\n        if (table) {\n            table.classList.add('hidden');\n        }\n    }\n\n    loadings[idstring] = true;\n\n    Ajax.call([{\n        methodname: \"local_wunderbyte_table_load_data\",\n        args: {\n            'encodedtable': encodedtable,\n            'page': page,\n            'tsort': tsort,\n            'thide': thide,\n            'tshow': tshow,\n            'tdir': tdir,\n            'treset': treset,\n            'filterobjects': filterobjects,\n            'searchtext': searchtext\n        },\n        done: function(res) {\n\n            let jsonobject = JSON.parse(res.content);\n            let rendertemplate = res.template;\n\n            // We can always expect a wunderbyte table container at this point.\n            // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n            let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n            const componentscontainer = container.querySelector(\".wunderbyte_table_components\");\n\n            // If we only increase the scrollpage, we don't need to render everything again.\n            if (replacerow\n                || (scrollpages[idstring] > 0)) {\n\n                // Also, we want to use the table instead of the container template.\n                const rowtemplate = rendertemplate + '_row';\n\n                if (!jsonobject.table.hasOwnProperty('rows')) {\n                    // We set the scrollpage to -1 which means that we don't reload anymore.\n                    scrollpages[idstring] = -1;\n                    loadings[idstring] = false;\n                    return;\n                }\n                let rows = jsonobject.table.rows;\n\n                // We create an array of promises where every line is rendered individually.\n                const promises = rows.map(row => {\n                    Templates.renderForPromise(rowtemplate, row).then(({html, js}) => {\n\n                        if (replacerow) {\n\n                            // We need the id.\n                            const filterobject = JSON.parse(filterobjects);\n                            const rowid = filterobject.id;\n\n                            Templates.replaceNode(\"#a\" + idstring\n                                + \" .rows-container tr[data-id='\" + rowid + \"']\", html, js);\n                        } else {\n                            // Here we add the rendered content to the table div.\n                            Templates.appendNodeContents('#a' + idstring + \" .rows-container\", html, js);\n                        }\n\n                        return true;\n                    }).catch(e => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n                    return true;\n                });\n\n                if (!tablejss.hasOwnProperty(idstring)) {\n                    // eslint-disable-next-line no-unused-vars\n                    const promise = Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n                        tablejss[idstring] = js;\n                        return true;\n                    }).catch(e => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n\n                    promises.push(promise);\n                }\n\n                // Once all the promises are fullfilled, we set loading to false.\n                Promise.all(promises).then(() => {\n\n                    setTimeout(() => {\n                        // We only added rows, but they might need some js from the table, so we add the table js again.\n                        Templates.appendNodeContents('#a' + idstring, '', tablejss[idstring]);\n\n                    }, 100);\n\n                    loadings[idstring] = false;\n\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                return;\n\n            }\n\n            if (!componentscontainer) {\n                // If the componentscontainer is not yet rendered, we render the container. else, only the table.\n                rendertemplate = rendertemplate + '_container';\n            }\n\n            let frag = container.querySelector(\".wunderbyteTableClass\");\n\n            // We render the html with the right template.\n            Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n                if (componentscontainer) {\n                    // Now we clean the existing table.\n                    while (frag.firstChild) {\n                        frag.removeChild(frag.lastChild);\n                    }\n\n                    // Here we add the rendered content to the table div.\n                    Templates.appendNodeContents('#a' + idstring, html, js);\n                } else {\n                    // Here we try to render the whole.hro\n                    const parent = container.parentElement;\n                    container.remove();\n                    Templates.appendNodeContents(parent, html, js);\n\n                    container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n                }\n\n                replaceLinksInFrag(idstring, encodedtable, container, page);\n\n                // When everything is done, we loaded fine.\n                loadings[idstring] = false;\n\n                if (spinner) {\n                    spinner.classList.add('hidden');\n                }\n                if (table) {\n                    table.classList.remove('hidden');\n                }\n\n                // Make sure all elements are working.\n                const selector = \".wunderbyte_table_container_\" + idstring;\n                initializeCheckboxes(selector, idstring, encodedtable);\n                initializeSearch(selector, idstring, encodedtable);\n                initializeSort(selector, idstring, encodedtable);\n\n                const element = container.querySelector('#a' + idstring);\n\n                // This is the place where we are after lazyloading. We check if we need to reinitialize scrolllistener:\n                addScrollFunctionality(idstring, encodedtable, element);\n                addReloadFunctionality(idstring, encodedtable, element);\n\n                return true;\n            }).catch(ex => {\n                loadings[idstring] = false;\n                Notification.addNotification({\n                    message: 'failed rendering ' + ex,\n                    type: \"danger\"\n                });\n            });\n        },\n        fail: function(err) {\n            // If we have an error, resetting the table might be enough. we do that.\n            // To avoid a loop, we only do this in special cases.\n            if ((treset != 1)) {\n                callLoadData(idstring, encodedtable, page, null, null, null, null, 1);\n            } else {\n                let node = document.createElement('DIV');\n                let textnode = document.createTextNode(err.message);\n                node.appendChild(textnode);\n                table.appendChild(node);\n                spinner.classList.add('hidden');\n                table.classList.remove('hidden');\n            }\n        }\n    }]);\n};\n\n/**\n * Add the scroll functionality to the right table.\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} element\n * @returns {void}\n */\nfunction addScrollFunctionality(idstring, encodedtable, element) {\n\n    if (element.dataset.scrollinitialized) {\n        return;\n    }\n\n    element.dataset.scrollinitialized = true;\n\n    const scrollableelement = getScrollParent(element);\n\n    scrollableelement.addEventListener('scroll', () => {\n\n        // We only want to scroll, if the element is visible.\n        // So, if we find a hidden element in the parent, we don't scroll.\n        if (returnHiddenElement(element)) {\n            return;\n        }\n\n        const elementtop = element.getBoundingClientRect().top;\n        const elementheight = element.getBoundingClientRect().height;\n        const screenheight = document.body.scrollHeight;\n\n        if (!loadings[idstring] && scrollpages[idstring] >= 0) {\n            if (elementtop + elementheight - screenheight < 0) {\n                scrollpages[idstring] = scrollpages[idstring] + 1;\n                callLoadData(idstring,\n                        encodedtable,\n                        scrollpages[idstring],\n                        null,\n                        null,\n                        null,\n                        null,\n                        null,\n                        null,\n                        null);\n            }\n        }\n\n    });\n}\n\n/**\n *\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} table\n */\nfunction addReloadFunctionality(idstring, encodedtable, table) {\n\n    let rowelements = table.querySelectorAll('tr td.id');\n\n    // eslint-disable-next-line no-console\n    console.log('addReloadFunctionality', rowelements);\n\n    rowelements.forEach(item => {\n\n        // eslint-disable-next-line no-console\n        console.log('addReloadFunctionality', item);\n\n        const rowid = item.innerHTML.trim();\n\n        // eslint-disable-next-line no-console\n        console.log('add reload row', rowid);\n\n        item.addEventListener('click', () => {\n            wbTableReload('a' + idstring, encodedtable, rowid);\n        });\n    });\n\n}\n\n/**\n * If the element or one of its parents is hidden, we return it. the hiddenn element.\n * Else we return null.\n * @param {node} element\n * @returns {null|node}\n */\nfunction returnHiddenElement(element) {\n    // We look if we find a hidden parent. If not, we load right away.\n    while (element !== null) {\n        if (!isHidden(element)) {\n            element = element.parentElement;\n        } else {\n            return element;\n        }\n    }\n    return null;\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n * @param {int} page\n */\nfunction replaceSortColumnLinks(idstring, encodedtable, frag, page) {\n\n    var arrayOfItems = frag.querySelectorAll(\"th.header a\");\n\n    arrayOfItems.forEach(item => {\n        var sortid = item.getAttribute('data-sortby');\n        var sortorder = item.getAttribute('data-sortorder');\n        var thide = item.getAttribute('data-action') == 'hide' ? item.getAttribute('data-column') : null;\n        var tshow = item.getAttribute('data-action') == 'show' ? item.getAttribute('data-column') : null;\n\n        item.setAttribute('href', '#');\n        item.addEventListener('click', () => {\n            callLoadData(idstring, encodedtable, page, sortid, thide, tshow, sortorder);\n        });\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n * @param {int} page\n */\nfunction replaceResetTableLink(idstring, encodedtable, frag, page) {\n    var arrayOfItems = frag.querySelectorAll(\"div.resettable\");\n\n    if (!arrayOfItems || arrayOfItems.length == 0) {\n        return;\n    }\n    arrayOfItems.forEach(item => {\n        var classofelement = item.getAttribute('class');\n        if (classofelement.indexOf('resettable') >= 0) {\n            let listOfChildren = item.querySelectorAll('a');\n            listOfChildren.forEach(subitem => {\n                subitem.setAttribute('href', '#');\n                subitem.addEventListener('click', () => {\n                    callLoadData(idstring, encodedtable, page, null, null, null, null, 1);\n                });\n            });\n        }\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n */\nfunction replacePaginationLinks(idstring, encodedtable, frag) {\n    var arrayOfPageItems = frag.querySelectorAll(\".page-item\");\n\n    if (!arrayOfPageItems || arrayOfPageItems.length == 0) {\n        return;\n    }\n    arrayOfPageItems.forEach(item => {\n\n        let pageNumber = item.dataset.pagenumber;\n\n        if (pageNumber) {\n            --pageNumber;\n            item.addEventListener('click', () => {\n                callLoadData(idstring, encodedtable, pageNumber);\n            });\n        }\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n */\nfunction replaceDownloadLink(idstring, encodedtable, frag) {\n\n    var arrayOfItems = frag.querySelectorAll(\"form\");\n\n    arrayOfItems.forEach(item => {\n        if (item.tagName == 'FORM') {\n            item.setAttribute('method', 'POST');\n            let newnode = document.createElement('input');\n            newnode.setAttribute('type', 'hidden');\n            newnode.setAttribute('name', 'encodedtable');\n            newnode.setAttribute('value', encodedtable);\n            item.appendChild(newnode);\n        }\n    });\n}\n\n/**\n *\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} frag\n * @param {*} page\n */\n function replaceLinksInFrag(idstring, encodedtable, frag, page = null) {\n\n    if (!page) {\n        const activepage = frag.querySelector('li.page-item active');\n        if (activepage) {\n            page = activepage.getAttribute('data-page-number');\n        }\n    }\n\n    replaceDownloadLink(idstring, encodedtable, frag);\n    replaceResetTableLink(idstring, encodedtable, frag, page);\n    replacePaginationLinks(idstring, encodedtable, frag);\n    replaceSortColumnLinks(idstring, encodedtable, frag, page);\n}\n"],"names":["loadings","scrollpages","tablejss","getScrollParent","node","scrollHeight","clientHeight","parentNode","idstring","encodedtable","console","log","hasOwnProperty","callback","identifier","element","document","querySelector","dataset","spinner","isHidden","replaceLinksInFrag","selector","addScrollFunctionality","addReloadFunctionality","observer","MutationObserver","disconnect","hiddenElement","returnHiddenElement","observe","attributes","respondToVisibility","callLoadData","el","style","window","getComputedStyle","display","visibility","page","tsort","thide","tshow","tdir","treset","filterobjects","searchtext","replacerow","table","getElementById","classList","remove","add","call","methodname","args","done","res","jsonobject","JSON","parse","content","rendertemplate","template","container","componentscontainer","rowtemplate","promises","rows","map","row","renderForPromise","then","_ref","html","js","rowid","id","replaceNode","appendNodeContents","catch","e","promise","Templates","_ref2","push","Promise","all","setTimeout","frag","_ref3","firstChild","removeChild","lastChild","parent","parentElement","ex","addNotification","message","type","fail","err","createElement","textnode","createTextNode","appendChild","scrollinitialized","addEventListener","elementtop","getBoundingClientRect","top","elementheight","height","screenheight","body","rowelements","querySelectorAll","forEach","item","innerHTML","trim","replaceSortColumnLinks","sortid","getAttribute","sortorder","setAttribute","replaceResetTableLink","arrayOfItems","length","indexOf","subitem","replacePaginationLinks","arrayOfPageItems","pageNumber","pagenumber","replaceDownloadLink","tagName","newnode","activepage"],"mappings":"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"}