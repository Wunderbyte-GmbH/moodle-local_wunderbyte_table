{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\nimport {initializeCheckboxes, getFilterOjects} from 'local_wunderbyte_table/filter';\nimport {initializeSearch, getSearchInput} from 'local_wunderbyte_table/search';\nimport {initializeSort, getSortSelection} from 'local_wunderbyte_table/sort';\n\n// All these variables will be objects with the idstringso their tables as identifiers.\nvar loadings = {};\nvar scrollpages = {};\nvar tablejss = {};\n\n/**\n * Gets called from mustache template.\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport const init = (idstring, encodedtable) => {\n\n    if (idstring && encodedtable) {\n\n        if (!scrollpages.hasOwnProperty(idstring)) {\n            scrollpages[idstring] = 0;\n        }\n\n        respondToVisibility(idstring, encodedtable, callLoadData);\n    }\n};\n\n/**\n * React on visibility change.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {function} callback\n */\nfunction respondToVisibility(idstring, encodedtable, callback) {\n\n    const identifier = 'a' + idstring;\n    let element = document.querySelector('#' + identifier);\n\n    // If we find the table element AND if it has the encoded table set, we abort this.\n    // Hereby we avoid to run JS multiple times.\n    if (element && !element.dataset.encodedtable) {\n        element.dataset.encodedtable = encodedtable;\n    } else {\n        // If we don't find an element, we abort.\n        return;\n    }\n\n    // We only make this callback during init if there is the spinner running.\n    // We don't want to run all of this if we don't use lazyloading.\n    let spinner = document.querySelector(\"#\" + identifier + 'spinner');\n\n    if ((spinner !== null) && !isHidden(spinner)) {\n\n        var observer = new MutationObserver(function() {\n            if (!isHidden(element)) {\n                this.disconnect();\n                callback(idstring, encodedtable);\n            }\n        });\n\n        const hiddenElement = returnHiddenElement(element);\n\n        if (hiddenElement !== null) {\n            // eslint-disable-next-line no-console\n            console.log('we observe element for visibility', hiddenElement);\n            observer.observe(hiddenElement, {attributes: true});\n        }\n\n    } else {\n        // This is what we do when we didn't lazyload.\n        replaceLinksInFrag(idstring,encodedtable, element, null);\n\n        const selector = \".wunderbyte_table_container_\" + idstring;\n        initializeCheckboxes(selector, idstring, encodedtable);\n        initializeSearch(selector, idstring, encodedtable);\n        initializeSort(selector, idstring, encodedtable);\n\n        // Check to see if scrolling near bottom of page; load more photos\n        // This shoiuld only be added once.\n\n        // As this can only be here once per table, we mark the table.\n        addScrollFunctionality(idstring, encodedtable, element);\n    }\n}\n\n/**\n * Return the next scrollable element.\n * @param {*} node\n * @returns {*} node\n */\nfunction getScrollParent(node) {\n    if (node === null) {\n      return null;\n    }\n\n    if (node.scrollHeight > node.clientHeight) {\n      return node;\n    } else {\n      return getScrollParent(node.parentNode);\n    }\n  }\n\n/**\n * Function to reload a wunderbyte table from js.\n * Here we trim the idstring before we pass it to the calldatafunction.\n * @param {*} idstringplusa\n * @param {*} encodedtable\n */\nexport function wbTableReload(idstringplusa, encodedtable) {\n\n    // We need to trim the first character. We use the a to make sure no number is in first place due to random generation.\n    const idstring = idstringplusa.substring(1);\n\n    callLoadData(idstring, encodedtable);\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\n export const isHidden = (el) => {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n};\n\n/**\n * Reloads the rendered table and sets it to the div with the right identifier.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {null|int} page\n * @param {null|string} tsort\n * @param {null|string} thide\n * @param {null|string} tshow\n * @param {null|int} tdir\n * @param {null|int} treset\n * @param {null|string} filterobjects\n * @param {null|string} searchtext\n */\nexport const callLoadData = (\n    idstring,\n    encodedtable,\n    page = null,\n    tsort = null,\n    thide = null,\n    tshow = null,\n    tdir = null,\n    treset = null,\n    filterobjects = null,\n    searchtext = null) => {\n\n    // eslint-disable-next-line no-console\n    console.log('we load ', idstring);\n\n    if (loadings[idstring]) {\n        return;\n    }\n\n    // We reset scrollpage with 0 when we come from the filter.\n    if (page !== null) {\n        scrollpages[idstring] = page;\n    }\n\n    // We always have to see if we need to apply a filter. Reload might come from scroll, but filter has to be applied nevertheless.\n    if (filterobjects === null) {\n        filterobjects = getFilterOjects(idstring);\n    }\n    // We always have to see if we need to apply a serachtextfilter.\n    if (searchtext === null) {\n        searchtext = getSearchInput(idstring);\n    }\n    // We always have to see if we need to apply a sortorder.\n    if (tsort === null) {\n        tsort = getSortSelection(idstring);\n    }\n\n    let table = document.getElementById('a' + idstring);\n\n    // This is now the individual spinner from the wunderbyte table template.\n    let spinner = document.querySelector('#a' + idstring + 'spinner .spinner-border');\n\n    // If we replace the whole table, we show the spinner. If we only add rows in infinite scroll, we don't.\n    if (scrollpages[idstring] == 0) {\n        if (spinner) {\n            spinner.classList.remove('hidden');\n        }\n        if (table) {\n            table.classList.add('hidden');\n        }\n    }\n\n    loadings[idstring] = true;\n\n    // eslint-disable-next-line no-console\n    console.log('launch ajax ', idstring);\n\n    Ajax.call([{\n        methodname: \"local_wunderbyte_table_load_data\",\n        args: {\n            'encodedtable': encodedtable,\n            'page': page,\n            'tsort': tsort,\n            'thide': thide,\n            'tshow': tshow,\n            'tdir': tdir,\n            'treset': treset,\n            'filterobjects': filterobjects,\n            'searchtext': searchtext\n        },\n        done: function(res) {\n\n            let jsonobject = JSON.parse(res.content);\n            let rendertemplate = res.template;\n            let rendercontainer = true;\n\n            // We can always expect a wunderbyte table container at this point.\n            // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n            let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n            const filtercontainer = container.querySelector(\".wunderbyteTableFilter\");\n\n            // If there is a container, we don't want to render everything again.\n            if (scrollpages[idstring] > 0) {\n                // Also, we want to use the table instead of the container template.\n                // This is not perfect, but necessary at the moment.\n                const i = rendertemplate.lastIndexOf('/');\n                let rowtemplate = rendertemplate.substring(0, i);\n                rowtemplate += '/row';\n\n                if (!jsonobject.table.hasOwnProperty('rows')) {\n                    // We set the scrollpage to -1 which means that we don't reload anymore.\n                    scrollpages[idstring] = -1;\n                    loadings[idstring] = false;\n                    return;\n                }\n                let rows = jsonobject.table.rows;\n\n                // We create an array of promises where every line is rendered individually.\n                const promises = rows.map(row => {\n                    Templates.renderForPromise(rowtemplate, row).then(({html, js}) => {\n                        // Here we add the rendered content to the table div.\n                        Templates.appendNodeContents('#a' + idstring + \" div.rows\", html, js);\n                        return true;\n                    }).catch(e => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n                    return true;\n                });\n\n                if (!tablejss.hasOwnProperty(idstring)) {\n                    // eslint-disable-next-line no-unused-vars\n                    const promise = Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n                        tablejss[idstring] = js;\n                        return true;\n                    }).catch(e => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n\n                    promises.push(promise);\n                }\n\n                // Once all the promises are fullfilled, we set loading to false.\n                Promise.all(promises).then(() => {\n\n                    setTimeout(() => {\n                        // We only added rows, but they might need some js from the table, so we add the table js again.\n                        Templates.appendNodeContents('#a' + idstring, '', tablejss[idstring]);\n\n                        // eslint-disable-next-line no-console\n                        console.log('just added js to page ' + idstring + \" \" + page + \" \" + rows);\n                    }, 100);\n\n                    loadings[idstring] = false;\n\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                return;\n\n            } else if (filtercontainer) { // If there is a container, we don't want to render everything again.\n                // Also, we want to use the table instead of the container template.\n                // This is not perfect, but necessary at the moment.\n                const i = rendertemplate.lastIndexOf('/');\n                rendertemplate = rendertemplate.substring(0, i);\n                rendertemplate += '/table';\n\n                rendercontainer = false;\n            }\n\n            let frag = container.querySelector(\".wunderbyteTableClass\");\n\n            // We render the html with the right template.\n            Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n                if (!rendercontainer) {\n                    // Now we clean the existing table.\n                    while (frag.firstChild) {\n                        frag.removeChild(frag.lastChild);\n                    }\n\n                    // Here we add the rendered content to the table div.\n                    Templates.appendNodeContents('#a' + idstring, html, js);\n                } else {\n                    // Here we try to render the whole\n                    const parent = container.parentElement;\n                    container.remove();\n                    Templates.appendNodeContents(parent, html, js);\n\n                    container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n                }\n\n                replaceLinksInFrag(idstring,encodedtable, container, page);\n\n                // When everything is done, we loaded fine.\n                loadings[idstring] = false;\n\n                if (spinner) {\n                    spinner.classList.add('hidden');\n                }\n                if (table) {\n                    table.classList.remove('hidden');\n                }\n\n                const element = container.querySelector('#a' + idstring);\n\n                // This is the place where we are after lazyloading. We check if we need to reinitialize scrolllistener:\n                addScrollFunctionality(idstring, encodedtable, element);\n\n                return true;\n            }).catch(ex => {\n                loadings[idstring] = false;\n                Notification.addNotification({\n                    message: 'failed rendering ' + ex,\n                    type: \"danger\"\n                });\n            });\n        },\n        fail: function(err) {\n            // If we have an error, resetting the table might be enough. we do that.\n            // To avoid a loop, we only do this in special cases.\n            if ((treset != 1)) {\n                callLoadData(idstring, encodedtable, page, null, null, null, null, 1);\n            } else {\n                let node = document.createElement('DIV');\n                let textnode = document.createTextNode(err.message);\n                node.appendChild(textnode);\n                table.appendChild(node);\n                spinner.classList.add('hidden');\n                table.classList.remove('hidden');\n            }\n        }\n    }]);\n};\n\n/**\n * Add the scroll functionality to the right table.\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} element\n * @returns {void}\n */\nfunction addScrollFunctionality(idstring, encodedtable, element) {\n\n    if (element.dataset.scrollinitialized) {\n        return;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('addScrollFunctionality', idstring);\n\n    element.dataset.scrollinitialized = true;\n\n    const scrollableelement = getScrollParent(element);\n\n    // eslint-disable-next-line no-console\n    console.log('scrollableelement ' + idstring, scrollableelement);\n\n    scrollableelement.addEventListener('scroll', () => {\n\n        // We only want to scroll, if the element is visible.\n        // So, if we find a hidden element in the parent, we don't scroll.\n        if (returnHiddenElement(element)) {\n            // eslint-disable-next-line no-console\n            console.log('we dont scroll because element is hidden');\n            return;\n        }\n\n        const elementtop = element.getBoundingClientRect().top;\n        const elementheight = element.getBoundingClientRect().height;\n        const screenheight = document.body.scrollHeight;\n\n        // eslint-disable-next-line no-console\n        console.log('scrollinformation', idstring , elementtop + elementheight - screenheight, elementtop, elementheight);\n\n        if (!loadings[idstring] && scrollpages[idstring] >= 0) {\n            if (elementtop + elementheight - screenheight < 0) {\n                scrollpages[idstring] = scrollpages[idstring] + 1;\n                // eslint-disable-next-line no-console\n                console.log('call load for scroll ' + idstring, scrollpages[idstring]);\n                callLoadData(idstring,\n                        encodedtable,\n                        scrollpages[idstring],\n                        null,\n                        null,\n                        null,\n                        null,\n                        null,\n                        null,\n                        null);\n            }\n        }\n\n    });\n}\n\n/**\n * If the element or one of its parents is hidden, we return it. the hiddenn element.\n * Else we return null.\n * @param {node} element\n * @returns {null|node}\n */\nfunction returnHiddenElement(element) {\n    // We look if we find a hidden parent. If not, we load right away.\n    while (element !== null) {\n        if (!isHidden(element)) {\n            element = element.parentElement;\n        } else {\n            // eslint-disable-next-line no-console\n            console.log('we observe element for visibility');\n            return element;\n        }\n    }\n    return null;\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n * @param {int} page\n */\nfunction replaceSortColumnLinks(idstring, encodedtable, frag, page) {\n\n    var arrayOfItems = frag.querySelectorAll(\"th.header a\");\n\n    arrayOfItems.forEach(item => {\n        var sortid = item.getAttribute('data-sortby');\n        var sortorder = item.getAttribute('data-sortorder');\n        var thide = item.getAttribute('data-action') == 'hide' ? item.getAttribute('data-column') : null;\n        var tshow = item.getAttribute('data-action') == 'show' ? item.getAttribute('data-column') : null;\n\n        item.setAttribute('href', '#');\n        item.addEventListener('click', () => {\n            callLoadData(idstring, encodedtable, page, sortid, thide, tshow, sortorder);\n        });\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n * @param {int} page\n */\nfunction replaceResetTableLink(idstring, encodedtable, frag, page) {\n    var arrayOfItems = frag.querySelectorAll(\"div.resettable\");\n\n    if (!arrayOfItems || arrayOfItems.length == 0) {\n        return;\n    }\n    arrayOfItems.forEach(item => {\n        var classofelement = item.getAttribute('class');\n        if (classofelement.indexOf('resettable') >= 0) {\n            let listOfChildren = item.querySelectorAll('a');\n            listOfChildren.forEach(subitem => {\n                subitem.setAttribute('href', '#');\n                subitem.addEventListener('click', () => {\n                    callLoadData(idstring, encodedtable, page, null, null, null, null, 1);\n                });\n            });\n        }\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n */\nfunction replacePaginationLinks(idstring, encodedtable, frag) {\n    var arrayOfPageItems = frag.querySelectorAll(\".page-item\");\n\n    if (!arrayOfPageItems || arrayOfPageItems.length == 0) {\n        return;\n    }\n    arrayOfPageItems.forEach(item => {\n\n        let pageNumber = item.dataset.pagenumber;\n\n        if (pageNumber) {\n            --pageNumber;\n            item.addEventListener('click', () => {\n                callLoadData(idstring, encodedtable, pageNumber);\n            });\n        }\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n */\nfunction replaceDownloadLink(idstring, encodedtable, frag) {\n\n    var arrayOfItems = frag.querySelectorAll(\"form\");\n\n    arrayOfItems.forEach(item => {\n        if (item.tagName == 'FORM') {\n            item.setAttribute('method', 'POST');\n            let newnode = document.createElement('input');\n            newnode.setAttribute('type', 'hidden');\n            newnode.setAttribute('name', 'encodedtable');\n            newnode.setAttribute('value', encodedtable);\n            item.appendChild(newnode);\n        }\n    });\n}\n\n/**\n *\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} frag\n * @param {*} page\n */\n function replaceLinksInFrag(idstring, encodedtable, frag, page = null) {\n\n    if (!page) {\n        const activepage = frag.querySelector('li.page-item active');\n        if (activepage) {\n            page = activepage.getAttribute('data-page-number');\n        }\n    }\n\n    replaceDownloadLink(idstring, encodedtable, frag);\n    replaceResetTableLink(idstring, encodedtable, frag, page);\n    replacePaginationLinks(idstring, encodedtable, frag);\n    replaceSortColumnLinks(idstring, encodedtable, frag, page);\n}\n"],"names":["idstringplusa","encodedtable","idstring","substring","callLoadData","loadings","scrollpages","tablejss","getScrollParent","node","scrollHeight","clientHeight","parentNode","hasOwnProperty","callback","identifier","element","document","querySelector","dataset","spinner","isHidden","replaceLinksInFrag","selector","addScrollFunctionality","observer","MutationObserver","disconnect","hiddenElement","returnHiddenElement","console","log","observe","attributes","respondToVisibility","el","style","window","getComputedStyle","display","visibility","page","tsort","thide","tshow","tdir","treset","filterobjects","searchtext","table","getElementById","classList","remove","add","call","methodname","args","done","res","jsonobject","JSON","parse","content","rendertemplate","template","rendercontainer","container","filtercontainer","i","lastIndexOf","rowtemplate","rows","promises","map","row","renderForPromise","then","_ref","html","js","appendNodeContents","catch","e","promise","Templates","_ref2","push","Promise","all","setTimeout","frag","_ref3","parent","parentElement","firstChild","removeChild","lastChild","ex","addNotification","message","type","fail","err","createElement","textnode","createTextNode","appendChild","scrollinitialized","scrollableelement","addEventListener","elementtop","getBoundingClientRect","top","elementheight","height","screenheight","body","replaceSortColumnLinks","querySelectorAll","forEach","item","sortid","getAttribute","sortorder","setAttribute","replaceResetTableLink","arrayOfItems","length","indexOf","subitem","replacePaginationLinks","arrayOfPageItems","pageNumber","pagenumber","replaceDownloadLink","tagName","newnode","activepage"],"mappings":"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"}