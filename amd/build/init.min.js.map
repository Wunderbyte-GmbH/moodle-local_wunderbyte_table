{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n// import {renderFilter, initializeCheckboxes} from 'local_wunderbyte_table/search';\nimport {initializeCheckboxes, getFilterOjects, getSearchInput} from 'local_wunderbyte_table/search';\n\nvar loading = false;\nvar scrollpage = 0;\n\nvar tablejs = null;\n\n/**\n * Gets called from mustache template.\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport const init = (idstring, encodedtable) => {\n\n    if (idstring && encodedtable) {\n        respondToVisibility(idstring, encodedtable, callLoadData);\n    }\n};\n\n/**\n * React on visibility change.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {function} callback\n */\nfunction respondToVisibility(idstring, encodedtable, callback) {\n\n    const identifier = 'a' + idstring;\n    let element = document.getElementById(identifier);\n\n    // If we find the table element AND if it hasn't yet the encoded table set, we abort this.\n    // Hereby we avoid to run JS multiple times.\n    if (element && !element.dataset.encodedtable) {\n        element.dataset.encodedtable = encodedtable;\n    } else {\n        // If we don't find an element, we abort.\n        return;\n    }\n\n    // We only make this callback during init if there is the spinner running.\n    // We don't want to run all of this if we don't use lazyloading.\n    let spinner = document.getElementById(identifier + 'spinner');\n\n    if ((spinner !== null) && !isHidden(spinner)) {\n        callback(idstring, encodedtable);\n\n        var observer = new MutationObserver(function() {\n            if (!isHidden(element)) {\n                this.disconnect();\n                callback(idstring, encodedtable);\n            }\n        });\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (element !== null) {\n            if (!isHidden(element)) {\n                element = element.parentElement;\n            } else {\n                observer.observe(element, {attributes: true});\n                return;\n            }\n        }\n    } else {\n        // This is what we do when we didn't lazyload.\n        replaceLinksInFrag(idstring,encodedtable, element, null);\n\n        const selector = \".wunderbyte_table_container_\" + idstring;\n        initializeCheckboxes(selector, idstring, encodedtable);\n    }\n\n    // Check to see if scrolling near bottom of page; load more photos\n    // This shoiuld only be added once.\n\n    // As this can only be here once per table, we mark the table.\n    if (element.dataset.scrollinitialized) {\n        return;\n    }\n    element.dataset.scrollinitialized = true;\n\n    // eslint-disable-next-line no-console\n    console.log('initialize scroll', element.dataset.scrollinitialized);\n\n    const scrollableelement = document.querySelector(\"#page\");\n\n    // eslint-disable-next-line no-console\n    console.log(scrollableelement);\n\n    scrollableelement.addEventListener('scroll', () => {\n\n        if (!loading && scrollpage >= 0) {\n            if (element.scrollHeight < scrollableelement.scrollTop + document.body.scrollHeight) {\n                // eslint-disable-next-line no-console\n                console.log('load more data', window.scrollY, window.scrollY + window.innerHeight,\n                    document.body.scrollHeight);\n                scrollpage++;\n                // eslint-disable-next-line no-console\n                console.log('call load for scroll', scrollpage);\n                callLoadData(idstring,\n                        encodedtable,\n                        scrollpage,\n                        null,\n                        null,\n                        null,\n                        null,\n                        null,\n                        null,\n                        null);\n            }\n        }\n\n    });\n}\n\n/**\n * Function to reload a wunderbyte table from js.\n * Here we trim the idstring before we pass it to the calldatafunction.\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function wbTableReload(idstring, encodedtable = null) {\n\n\n    // We need to trim the first character. We use the a to make sure no number is in first place due to random generation.\n    idstring = idstring.substring(1);\n\n    let element = document.getElementById('a' + idstring);\n\n    if (!element) {\n\n        return;\n    }\n\n    if (!encodedtable) {\n        encodedtable = element.dataset.encodedtable;\n\n        if (!encodedtable) {\n            return;\n        }\n    }\n\n    callLoadData(idstring, encodedtable);\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\n export const isHidden = (el) => {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n};\n\n/**\n * Reloads the rendered table and sets it to the div with the right identifier.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {null|int} page\n * @param {null|string} tsort\n * @param {null|string} thide\n * @param {null|string} tshow\n * @param {null|int} tdir\n * @param {null|int} treset\n * @param {null|string} filterobjects\n * @param {null|string} searchtext\n */\nexport const callLoadData = (\n    idstring,\n    encodedtable,\n    page = null,\n    tsort = null,\n    thide = null,\n    tshow = null,\n    tdir = null,\n    treset = null,\n    filterobjects = null,\n    searchtext = null) => {\n\n    if (loading) {\n        return;\n    }\n\n    // We reset scrollpage with 0 when we come from the filter.\n    if (page !== null) {\n        scrollpage = page;\n    }\n\n    // We always have to see if we need to apply a filter. Reload might come from scroll, but filter has to be applied nevertheless.\n    if (filterobjects === null) {\n        filterobjects = getFilterOjects();\n    }\n    // We always have to see if we need to apply a serachtextfilter.\n    if (searchtext === null) {\n        searchtext = getSearchInput();\n    }\n\n    let table = document.getElementById('a' + idstring);\n\n    // This is now the individual spinner from the wunderbyte table template.\n    let spinner = document.querySelector('#a' + idstring + 'spinner .spinner-border');\n\n    // If we replace the whole table, we show the spinner. If we only add rows in infinite scroll, we don't.\n    if (scrollpage == 0) {\n        if (spinner) {\n            spinner.classList.remove('hidden');\n        }\n        if (table) {\n            table.classList.add('hidden');\n        }\n    }\n\n    loading = true;\n\n    Ajax.call([{\n        methodname: \"local_wunderbyte_table_load_data\",\n        args: {\n            'encodedtable': encodedtable,\n            'page': page,\n            'tsort': tsort,\n            'thide': thide,\n            'tshow': tshow,\n            'tdir': tdir,\n            'treset': treset,\n            'filterobjects': filterobjects,\n            'searchtext': searchtext\n        },\n        done: function(res) {\n\n            // eslint-disable-next-line no-console\n            console.log(res);\n\n            let jsonobject = JSON.parse(res.content);\n            let rendertemplate = res.template;\n            let rendercontainer = true;\n\n            // We can always expect a wunderbyte table container at this point.\n            // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n            let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n            const filtercontainer = container.querySelector(\".wunderbyteTableFilter\");\n\n            // If there is a container, we don't want to render everything again.\n            if (scrollpage > 0) {\n                // Also, we want to use the table instead of the container template.\n                // This is not perfect, but necessary at the moment.\n                const i = rendertemplate.lastIndexOf('/');\n                let rowtemplate = rendertemplate.substring(0, i);\n                rowtemplate += '/row';\n\n                // eslint-disable-next-line no-console\n                console.log(rowtemplate, rendertemplate);\n\n                if (!jsonobject.table.hasOwnProperty('rows')) {\n                    // We set the scrollpage to -1 which means that we don't reload anymore.\n                    scrollpage = -1;\n                    loading = false;\n                    return;\n                }\n                let rows = jsonobject.table.rows;\n\n                // eslint-disable-next-line no-console\n                console.log(rendertemplate, rows);\n\n                // We create an array of promises where every line is rendered individually.\n                const promises = rows.map(row => {\n                    Templates.renderForPromise(rowtemplate, row).then(({html, js}) => {\n                        // Here we add the rendered content to the table div.\n                        Templates.appendNodeContents('#a' + idstring + \" div.rows\", html, js);\n                        return true;\n                    }).catch(e => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n                });\n\n                if (tablejs === null) {\n                    // eslint-disable-next-line no-unused-vars\n                    const promise = Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n                        tablejs = js;\n                        return true;\n                    }).catch(e => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n\n                    promises.push(promise);\n                }\n\n                // Once all the promises are fullfilled, we set loading to false.\n                Promise.all(promises).then(() => {\n\n                    // eslint-disable-next-line no-console\n                    console.log(promises.length);\n\n                    setTimeout(() => {\n                        // We only added rows, but they might need some js from the table, so we add the table js again.\n                        Templates.appendNodeContents('#a' + idstring, '', tablejs);\n\n                        // eslint-disable-next-line no-console\n                        console.log('just added js to page ' + page + \" \" + rows);\n                    }, 100);\n\n                    loading = false;\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                return;\n\n            } else if (filtercontainer) { // If there is a container, we don't want to render everything again.\n                // Also, we want to use the table instead of the container template.\n                // This is not perfect, but necessary at the moment.\n                const i = rendertemplate.lastIndexOf('/');\n                rendertemplate = rendertemplate.substring(0, i);\n                rendertemplate += '/table';\n\n                rendercontainer = false;\n            }\n\n            let frag = container.querySelector(\".wunderbyteTableClass\");\n\n            // We render the html with the right template.\n            Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n                if (!rendercontainer) {\n                    // Now we clean the existing table.\n                    while (frag.firstChild) {\n                        frag.removeChild(frag.lastChild);\n                    }\n\n                    // Here we add the rendered content to the table div.\n                    Templates.appendNodeContents('#a' + idstring, html, js);\n                } else {\n                    // Here we try to render the whole\n                    const parent = container.parentElement;\n                    container.remove();\n                    Templates.appendNodeContents(parent, html, js);\n\n                    container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n                }\n\n                replaceLinksInFrag(idstring,encodedtable, container, page);\n\n                // When everything is done, we loaded fine.\n                loading = false;\n\n                if (spinner) {\n                    spinner.classList.add('hidden');\n                }\n                if (table) {\n                    table.classList.remove('hidden');\n                }\n\n                return true;\n            }).catch(ex => {\n                loading = false;\n                Notification.addNotification({\n                    message: 'failed rendering ' + ex,\n                    type: \"danger\"\n                });\n            });\n        },\n        fail: function(err) {\n            // If we have an error, resetting the table might be enough. we do that.\n            // To avoid a loop, we only do this in special cases.\n            if ((treset != 1)) {\n                callLoadData(idstring, encodedtable, page, null, null, null, null, 1);\n            } else {\n                let node = document.createElement('DIV');\n                let textnode = document.createTextNode(err.message);\n                node.appendChild(textnode);\n                table.appendChild(node);\n                spinner.classList.add('hidden');\n                table.classList.remove('hidden');\n            }\n        }\n    }]);\n};\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n * @param {int} page\n */\nfunction replaceSortColumnLinks(idstring, encodedtable, frag, page) {\n\n    var arrayOfItems = frag.querySelectorAll(\"th.header a\");\n\n    arrayOfItems.forEach(item => {\n        var sortid = item.getAttribute('data-sortby');\n        var sortorder = item.getAttribute('data-sortorder');\n        var thide = item.getAttribute('data-action') == 'hide' ? item.getAttribute('data-column') : null;\n        var tshow = item.getAttribute('data-action') == 'show' ? item.getAttribute('data-column') : null;\n\n        item.setAttribute('href', '#');\n        item.addEventListener('click', () => {\n            callLoadData(idstring, encodedtable, page, sortid, thide, tshow, sortorder);\n        });\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n * @param {int} page\n */\nfunction replaceResetTableLink(idstring, encodedtable, frag, page) {\n    var arrayOfItems = frag.querySelectorAll(\"div.resettable\");\n\n    if (!arrayOfItems || arrayOfItems.length == 0) {\n        return;\n    }\n    arrayOfItems.forEach(item => {\n        var classofelement = item.getAttribute('class');\n        if (classofelement.indexOf('resettable') >= 0) {\n            let listOfChildren = item.querySelectorAll('a');\n            listOfChildren.forEach(subitem => {\n                subitem.setAttribute('href', '#');\n                subitem.addEventListener('click', () => {\n                    callLoadData(idstring, encodedtable, page, null, null, null, null, 1);\n                });\n            });\n        }\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n */\nfunction replacePaginationLinks(idstring, encodedtable, frag) {\n    var arrayOfPageItems = frag.querySelectorAll(\".page-item\");\n\n    if (!arrayOfPageItems || arrayOfPageItems.length == 0) {\n        return;\n    }\n    arrayOfPageItems.forEach(item => {\n\n        let pageNumber = item.dataset.pagenumber;\n\n        if (pageNumber) {\n            --pageNumber;\n            item.addEventListener('click', () => {\n                callLoadData(idstring, encodedtable, pageNumber);\n            });\n        }\n    });\n}\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n */\nfunction replaceDownloadLink(idstring, encodedtable, frag) {\n\n    var arrayOfItems = frag.querySelectorAll(\"form\");\n\n    arrayOfItems.forEach(item => {\n        if (item.tagName == 'FORM') {\n            item.setAttribute('method', 'POST');\n            let newnode = document.createElement('input');\n            newnode.setAttribute('type', 'hidden');\n            newnode.setAttribute('name', 'encodedtable');\n            newnode.setAttribute('value', encodedtable);\n            item.appendChild(newnode);\n        }\n    });\n}\n\n/**\n *\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} frag\n * @param {*} page\n */\n function replaceLinksInFrag(idstring, encodedtable, frag, page = null) {\n\n    if (!page) {\n        const activepage = frag.querySelector('li.page-item active');\n        if (activepage) {\n            page = activepage.getAttribute('data-page-number');\n        }\n    }\n\n    replaceDownloadLink(idstring, encodedtable, frag);\n    replaceResetTableLink(idstring, encodedtable, frag, page);\n    replacePaginationLinks(idstring, encodedtable, frag);\n    replaceSortColumnLinks(idstring, encodedtable, frag, page);\n}\n"],"names":["idstring","encodedtable","substring","element","document","getElementById","dataset","callLoadData","loading","scrollpage","tablejs","callback","identifier","spinner","isHidden","replaceLinksInFrag","selector","observer","MutationObserver","disconnect","observe","attributes","parentElement","scrollinitialized","console","log","scrollableelement","querySelector","addEventListener","scrollHeight","scrollTop","body","window","scrollY","innerHeight","respondToVisibility","el","style","getComputedStyle","display","visibility","page","tsort","thide","tshow","tdir","treset","filterobjects","searchtext","table","classList","remove","add","call","methodname","args","done","res","jsonobject","JSON","parse","content","rendertemplate","template","rendercontainer","container","filtercontainer","i","lastIndexOf","rowtemplate","hasOwnProperty","rows","promises","map","row","renderForPromise","then","_ref","html","js","appendNodeContents","catch","e","promise","Templates","_ref2","push","Promise","all","length","setTimeout","frag","_ref3","parent","firstChild","removeChild","lastChild","ex","addNotification","message","type","fail","err","node","createElement","textnode","createTextNode","appendChild","replaceSortColumnLinks","querySelectorAll","forEach","item","sortid","getAttribute","sortorder","setAttribute","replaceResetTableLink","arrayOfItems","indexOf","subitem","replacePaginationLinks","arrayOfPageItems","pageNumber","pagenumber","replaceDownloadLink","tagName","newnode","activepage"],"mappings":"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"}