{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\nimport {initializeCheckboxes, getFilterObjects} from 'local_wunderbyte_table/filter';\nimport {initializeSearch, getSearchInput} from 'local_wunderbyte_table/search';\nimport {initializeSort, getSortSelection} from 'local_wunderbyte_table/sort';\nimport {initializeReload} from 'local_wunderbyte_table/reload';\nimport {initializeActionButton} from 'local_wunderbyte_table/actionbutton';\nimport {initializeEditTableButton} from 'local_wunderbyte_table/edittable';\nimport {initializeRowsSelect} from './rowsdisplayselect';\nimport {initializeResetFilterButton, updateUrlWithFilterSearchSort} from './filter';\nimport {initializeFilterSearch} from './filtersearch';\n\nimport {get_string as getString} from 'core/str';\n\n// All these variables will be objects with the idstring so their tables as identifiers.\nvar loadings = {};\nexport var queries = {};\nvar scrollpages = {};\nvar tablejss = {};\nvar scrollingelement = {};\n\nvar moreThanOneTable = false;\nexport const SELECTORS = {\n    CONTAINER: \".wunderbyte_table_container_\",\n    FILTER: \" .wunderbyteTableFilter\",\n    WBTABLE: \"wunderbyte-table-\",\n};\n\n/**\n * Gets called from mustache template.\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport const init = (idstring, encodedtable) => {\n\n    // eslint-disable-next-line no-console\n    console.log('init booking ' + idstring);\n\n    if (!queries[idstring]) {\n        checkInTable(idstring, encodedtable);\n    }\n\n    if (Object.keys(queries).length > 1) {\n        moreThanOneTable = true;\n    }\n\n    if (idstring && encodedtable) {\n\n        if (!scrollpages.hasOwnProperty(idstring)) {\n\n            if (infinitescrollEnabled(idstring)) {\n                scrollpages[idstring] = 0;\n            } else {\n                scrollpages[idstring] = -1;\n            }\n\n        }\n        respondToVisibility(idstring, encodedtable, callLoadData);\n    }\n};\n\n/**\n * Toggle aside block with filters.\n * @param {string} idstring\n */\nconst initToggleAside = (idstring) => {\n    const togglebutton = document.querySelector('#asidecollapse_' + idstring);\n\n    if (togglebutton) {\n        togglebutton.addEventListener('click', () => {\n            const aside = document.querySelector('.wunderbyte_table_container_' + idstring + ' aside');\n            aside.classList.toggle('inactive');\n            const wbtable = document.querySelector('.wunderbyte_table_container_' + idstring);\n            wbtable.classList.toggle('inactivefilter');\n        });\n    }\n\n};\n\n/**\n * React on visibility change.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {function} callback\n */\nfunction respondToVisibility(idstring, encodedtable, callback) {\n\n    const identifier = 'a' + idstring;\n    let element = document.querySelector('#' + identifier);\n\n    // If we find the table element AND if it has the encoded table set, we abort this.\n    // Hereby we avoid to run JS multiple times.\n    if (element && !element.dataset.encodedtable) {\n        element.dataset.encodedtable = encodedtable;\n    } else {\n\n        // We abort everything else, but we run again the components initialization.\n        // important, as parts of the table might have been reloaded.\n        initializeComponents(idstring, encodedtable);\n        return;\n    }\n\n    // We only make this callback during init if there is the spinner running.\n    // We don't want to run all of this if we don't use lazyloading.\n    let spinner = document.querySelector(\"#\" + identifier + 'spinner');\n\n    if ((spinner !== null) && !isHidden(spinner)) {\n\n        var observer = new MutationObserver(function() {\n            if (!isHidden(element)) {\n                this.disconnect();\n\n                callback(idstring, encodedtable);\n            }\n        });\n\n        const hiddenElement = returnHiddenElement(element);\n\n        if (hiddenElement !== null) {\n\n            observer.observe(hiddenElement, {attributes: true});\n        } else {\n            callback(idstring, encodedtable);\n        }\n\n    } else {\n\n        const selector = \".wunderbyte_table_container_\" + idstring;\n        const container = document.querySelector(selector);\n\n        if (container != undefined) {\n            // This is what we do when we didn't lazyload.\n            // replaceLinksInFrag(idstring, encodedtable, element, null);\n            addLinksToPagination(idstring, encodedtable, element);\n\n            initializeComponents(idstring, encodedtable);\n\n            // Check to see if scrolling near bottom of page; load more photos\n            // This shoiuld only be added once.\n\n            // As this can only be here once per table, we mark the table.\n            addScrollFunctionality(idstring, encodedtable, element);\n            initToggleAside(idstring);\n        }\n\n    }\n}\n\n/**\n * Return the next scrollable element.\n * @param {*} node\n * @returns {*} node\n */\nfunction getScrollParent(node) {\n    if (node === null) {\n        return null;\n    }\n    if (node.scrollHeight > node.clientHeight) {\n        if (doublecheckScrollable(node)) {\n            // In some cases (lazyouthtml table), we need to doublecheck if the element is scrollable.\n            return node;\n        } else {\n            return getScrollParent(node.parentNode);\n        }\n    } else {\n        return getScrollParent(node.parentNode);\n    }\n}\n\n/**\n * Function to check if element is scrollable by checking overflow.\n * @param {*} node\n * @returns {boolean}\n */\nfunction doublecheckScrollable(node) {\n    const styles = window.getComputedStyle(node);\n    const isScrollable = styles.overflow === 'scroll' || styles.overflow === 'auto';\n\n    return isScrollable;\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\nexport const isHidden = (el) => {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n};\n\n/**\n * Reloads the rendered table and sets it to the div with the right identifier.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {null|int} page\n * @param {null|string} tsort\n * @param {null|string} thide\n * @param {null|string} tshow\n * @param {null|int} tdir\n * @param {null|int} treset\n * @param {null|string} filterobjects\n * @param {null|string} searchtext\n * @param {null|bool} replacerow\n */\nexport const callLoadData = (\n    idstring,\n    encodedtable,\n    page = null,\n    tsort = null,\n    thide = null,\n    tshow = null,\n    tdir = null,\n    treset = null,\n    filterobjects = null,\n    searchtext = null,\n    replacerow = false) => {\n\n    if (loadings[idstring] && !replacerow) {\n        return;\n    }\n    // We reset scrollpage with 0 when we come from the filter.\n    if (page !== null) {\n\n        if (infinitescrollEnabled(idstring)) {\n            scrollpages[idstring] = page;\n        } else {\n            scrollpages[idstring] = -1;\n        }\n    }\n\n    // We always have to see if we need to apply a filter. Reload might come from scroll, but filter has to be applied nevertheless.\n    if (filterobjects === null) {\n        filterobjects = getFilterObjects(idstring);\n    }\n    // We always have to see if we need to apply a serachtextfilter.\n    if (searchtext === null) {\n        searchtext = getSearchInput(idstring);\n    }\n    // We always have to see if we need to apply a sortorder.\n    if (tsort === null) {\n        tsort = getSortSelection(idstring);\n    }\n\n    const table = document.getElementById('a' + idstring);\n\n    // We don't want to update URL for lazyout tables that be loaded (have childnodes) at this point.\n    if (moreThanOneTable !== true && table.childNodes.length > 0) {\n        updateUrlWithFilterSearchSort(filterobjects, searchtext, tsort, tdir);\n    }\n\n    // This is now the individual spinner from the wunderbyte table template.\n    let spinner = document.querySelector('#a' + idstring + 'spinner .spinner-border');\n\n    // If we replace the whole table, we show the spinner. If we only add rows in infinite scroll, we don't.\n    if (scrollpages[idstring] == 0\n        && !replacerow) {\n        if (spinner) {\n            spinner.classList.remove('hidden');\n        }\n    }\n\n    // This is used to store information for reload etc.\n    checkInTable(\n        idstring,\n        encodedtable,\n        page,\n        tsort,\n        thide,\n        tshow,\n        tdir,\n        treset,\n        filterobjects,\n        searchtext,\n        replacerow\n    );\n\n    loadings[idstring] = true;\n\n    Ajax.call([{\n        methodname: \"local_wunderbyte_table_load_data\",\n        args: {\n            'encodedtable': encodedtable,\n            'page': page,\n            'tsort': tsort,\n            'thide': thide,\n            'tshow': tshow,\n            'tdir': tdir,\n            'treset': treset,\n            'wbtfilter': filterobjects,\n            'searchtext': searchtext\n        },\n        done: async function(res) {\n\n            let jsonobject = '';\n            try {\n               jsonobject = JSON.parse(res.content);\n            } catch (e) {\n\n                const message = await getString('couldnotloaddata', 'local_wunderbyte_table');\n\n                Notification.addNotification({\n                    message,\n                    type: \"danger\"\n                });\n\n                // We need say we are not loading anymore.\n                loadings[idstring] = false;\n\n                // eslint-disable-next-line no-console\n                console.log(e);\n                return;\n            }\n\n            let rendertemplate = res.template;\n\n            // We can always expect a wunderbyte table container at this point.\n            // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n            let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n            if (!container) {\n                return;\n            }\n            const componentscontainer = container.querySelector(\".wunderbyte_table_components\");\n\n            // If we only increase the scrollpage, we don't need to render everything again.\n            if (replacerow\n                || (scrollpages[idstring] > 0)) {\n\n                // Also, we want to use the table instead of the container template.\n                const rowtemplate = rendertemplate + '_row';\n\n                if (!jsonobject.table.hasOwnProperty('rows')) {\n                    // We set the scrollpage to -1 which means that we don't reload anymore.\n                    scrollpages[idstring] = -1;\n                    loadings[idstring] = false;\n                    return;\n                }\n                let rows = jsonobject.table.rows;\n\n                // We create an array of promises where every line is rendered individually.\n                const promises = rows.map(row => {\n                    Templates.renderForPromise(rowtemplate, row).then(({html, js}) => {\n\n                        if (replacerow) {\n\n                            // We need the id.\n                            const filterobject = JSON.parse(filterobjects);\n                            const rowid = filterobject.id;\n\n                            Templates.replaceNode(\"#a\" + idstring\n                                + \" .rows-container tr[data-id='\" + rowid + \"']\", html, js);\n                        } else {\n                            // Here we add the rendered content to the table div.\n                            Templates.appendNodeContents('#a' + idstring + \" .rows-container\", html, js);\n                        }\n\n                        return true;\n                    }).catch(e => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n                    return true;\n                });\n\n\n                if (!tablejss.hasOwnProperty(idstring)) {\n\n                    const promise = returnPromiseToSaveJS(rendertemplate, jsonobject, idstring);\n\n                    promises.push(promise);\n                }\n\n                // Once all the promises are fullfilled, we set loading to false.\n                Promise.all(promises).then(() => {\n\n                    setTimeout(() => {\n                        // We only added rows, but they might need some js from the table, so we add the table js again.\n                        Templates.appendNodeContents('#a' + idstring, '', tablejss[idstring]);\n\n                    }, 100);\n\n                    loadings[idstring] = false;\n\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                return;\n            }\n\n            const promises = [];\n            if (!componentscontainer) {\n                // If the componentscontainer is not yet rendered, we render the container. else, only the table.\n                rendertemplate = rendertemplate + '_container';\n            } else {\n                const sortselector = '.wunderbyteTableSelect';\n                promises.push(Templates.renderForPromise('local_wunderbyte_table/component_sort', jsonobject).then(({html, js}) => {\n                    const element = container.querySelector(sortselector);\n                    Templates.replaceNode(element, html, js);\n                    // Make sure the element is working.\n                    initializeComponents(idstring, encodedtable);\n                    return true;\n                }).catch(ex => {\n                    // eslint-disable-next-line no-console\n                    console.log(ex);\n                }));\n            }\n\n            let frag = container.querySelector(\".wunderbyteTableClass\");\n\n            // If we called a sorting and the result is an empty array, we don't need to render.\n            let rows = jsonobject.table.rows;\n            if (tsort && (!rows || rows.length < 1)) {\n\n                if (spinner) {\n                    spinner.classList.add('hidden');\n                }\n                if (table) {\n                    table.classList.remove('hidden');\n                }\n\n                loadings[idstring] = false;\n\n            } else {\n                // We render the html with the right template.\n                promises.push(Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n                    if (componentscontainer) {\n                        // Now we clean the existing table.\n                        while (frag.firstChild) {\n                            frag.removeChild(frag.lastChild);\n                        }\n\n                        // Here we add the rendered content to the table div.\n                        Templates.appendNodeContents('#a' + idstring, html, js);\n                    } else {\n                        // Here we try to render the whole.hro\n                        const parent = container.parentElement;\n                        container.remove();\n                        Templates.appendNodeContents(parent, html, js);\n\n                        container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n                    }\n                    if (container == undefined) {\n                        return true;\n                    }\n                    addLinksToPagination(idstring, encodedtable, container);\n\n                    // When everything is done, we loaded fine.\n                    loadings[idstring] = false;\n\n                    if (spinner) {\n                        spinner.classList.add('hidden');\n                    }\n                    if (table) {\n                        table.classList.remove('hidden');\n                    }\n\n                    // Make sure all elements are working.\n                    initializeComponents(idstring, encodedtable);\n\n                    if (!container) {\n                        return true;\n                    }\n                    const element = container.querySelector('#a' + idstring);\n\n                    // This is the place where we are after lazyloading. We check if we need to reinitialize scrolllistener:\n                    addScrollFunctionality(idstring, encodedtable, element);\n\n                    return true;\n                }).catch(ex => {\n                    loadings[idstring] = false;\n                    Notification.addNotification({\n                        message: 'failed rendering ' + ex,\n                        type: \"danger\"\n                    });\n                }));\n            }\n\n            // We excecute the promises from the array one after the other.\n            // eslint-disable-next-line no-unused-vars\n            const x = await promises[0];\n            // eslint-disable-next-line no-unused-vars\n            const y = await promises[1];\n        },\n        fail: function(err) {\n            // If we have an error, resetting the table might be enough. we do that.\n            // To avoid a loop, we only do this in special cases.\n            if ((treset != 1)) {\n                callLoadData(idstring, encodedtable, page, null, null, null, null, 1);\n            } else {\n                let node = document.createElement('DIV');\n                let textnode = document.createTextNode(err.message);\n                node.appendChild(textnode);\n                table.appendChild(node);\n                spinner.classList.add('hidden');\n                table.classList.remove('hidden');\n            }\n        }\n    }]);\n};\n\n\n/**\n * Add the scroll functionality to the right table.\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} element\n * @returns {void}\n */\nfunction addScrollFunctionality(idstring, encodedtable, element) {\n\n    // First we check if scroll functioanlity is enabled.\n    if (!infinitescrollEnabled(idstring)) {\n        return;\n    }\n\n    if (element.dataset.scrollinitialized) {\n        return;\n    }\n\n    element.dataset.scrollinitialized = true;\n\n    const scrollableelement = getScrollParent(element);\n\n    if (scrollableelement) {\n        scrollableelement.addEventListener('scroll', () => {\n\n            if (!scrollingelement.hasOwnProperty(idstring)) {\n                scrollingelement[idstring] = 'scrollElement';\n            } else {\n                if (scrollingelement[idstring] === 'scrollElement') {\n                    scrollListener(element, idstring, encodedtable);\n                }\n            }\n        });\n    }\n\n    // It's not easy to decide which is the right, so we have to add both.\n    window.addEventListener('scroll', () => {\n\n        if (!scrollingelement.hasOwnProperty(idstring)) {\n            scrollingelement[idstring] = 'window';\n        } else {\n            if (scrollingelement[idstring] === 'window') {\n                scrollListener(element, idstring, encodedtable);\n            }\n        }\n    });\n\n}\n\n/**\n * To be called in the scroll listener.\n * @param {node} element\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\nfunction scrollListener(element, idstring, encodedtable) {\n    // We only want to scroll, if the element is visible.\n    // So, if we find a hidden element in the parent, we don't scroll.\n    if (returnHiddenElement(element)) {\n        return;\n    }\n    const elementtop = element.getBoundingClientRect().top;\n    const screenheight = document.body.scrollHeight;\n\n    let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n    const tableelement = container.querySelector('[class^=\"' + SELECTORS.WBTABLE + '\"]');\n\n    // If we can't find this table element, we abort.\n    if (!tableelement) {\n        return;\n    }\n\n    const tableelementheight = tableelement.getBoundingClientRect().height;\n\n    if (!loadings[idstring] && scrollpages[idstring] >= 0) {\n        if (elementtop + tableelementheight - screenheight < 0) {\n            scrollpages[idstring] = scrollpages[idstring] + 1;\n            callLoadData(idstring,\n                encodedtable,\n                scrollpages[idstring],\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null);\n        }\n    }\n}\n\n/**\n * If the element or one of its parents is hidden, we return it. the hiddenn element.\n * Else we return null.\n * @param {node} element\n * @returns {null|node}\n */\nfunction returnHiddenElement(element) {\n    // We look if we find a hidden parent. If not, we load right away.\n    while (element !== null) {\n        if (!isHidden(element)) {\n            element = element.parentElement;\n        } else {\n            return element;\n        }\n    }\n    return null;\n}\n\n\n/**\n * The rendered table has links we can't use. We replace them with eventlisteners and use the callLoadData function.\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {DocumentFragment} frag\n */\nfunction addLinksToPagination(idstring, encodedtable, frag) {\n    if (!frag) {\n        return;\n    }\n\n    var arrayOfPageItems = frag.querySelectorAll(\".page-item\");\n\n    if (!arrayOfPageItems || arrayOfPageItems.length == 0) {\n        return;\n    }\n    arrayOfPageItems.forEach(item => {\n\n        let pageNumber = item.dataset.pagenumber;\n\n        if (pageNumber) {\n            --pageNumber;\n            item.addEventListener('click', () => {\n                callLoadData(idstring, encodedtable, pageNumber);\n            });\n        }\n    });\n}\n\n/**\n * Function to check if the talbe in question has infinitescroll enabled.\n * @param {string} idstring\n * @returns {bool}\n */\nfunction infinitescrollEnabled(idstring) {\n    // If we don't find the infinitescrollelement, we don#t add the listener.\n    const selector = \".wunderbyte_table_container_\" + idstring;\n    if (document.querySelector(selector + ' div.infinitescroll_enabled')) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Initialize all the JS we need.\n * @param {string} idstring\n * @param {string} encodedtable\n */\nfunction initializeComponents(idstring, encodedtable) {\n    const selector = \".wunderbyte_table_container_\" + idstring;\n\n        initializeCheckboxes(selector, idstring, encodedtable);\n        initializeSearch(selector, idstring, encodedtable);\n        initializeSort(selector, idstring, encodedtable);\n        initializeRowsSelect(selector, idstring, encodedtable);\n        initializeFilterSearch(selector, idstring, encodedtable);\n        initializeResetFilterButton(selector, idstring, encodedtable);\n        initializeEditTableButton(selector, idstring, encodedtable);\n\n        // A very strange error leads to a failed import from the reloadTable.js under some circumstances.\n        // Reload has to be called with this precaution therefore.\n        if (initializeReload) {\n            initializeReload(selector, idstring, encodedtable);\n        }\n        initializeActionButton(selector, idstring, encodedtable);\n\n}\n\n/**\n * Function to return promise.\n * @param {*} rendertemplate\n * @param {*} jsonobject\n * @param {*} idstring\n * @returns {Promise}\n */\nfunction returnPromiseToSaveJS(rendertemplate, jsonobject, idstring) {\n    // eslint-disable-next-line no-unused-vars\n    return Templates.renderForPromise(rendertemplate, jsonobject).then(({html, js}) => {\n\n        tablejss[idstring] = js;\n\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n * Function to save queries. Has some logic which helps us to achieve the desired result.\n * @param {*} idstring\n * @param {*} encodedtable\n * @param {*} page\n * @param {*} tsort\n * @param {*} thide\n * @param {*} tshow\n * @param {*} tdir\n * @param {*} treset\n * @param {*} filterobjects\n * @param {*} searchtext\n * @param {*} replacerow\n */\nfunction checkInTable(\n    idstring,\n    encodedtable,\n    page = null,\n    tsort = null,\n    thide = null,\n    tshow = null,\n    tdir = null,\n    treset = null,\n    filterobjects = null,\n    searchtext = null,\n    replacerow = false) {\n\n    // We don't want to save any queries that want to replace row.\n    if (replacerow) {\n        return;\n    }\n\n    queries[idstring] = {\n        idstring,\n        encodedtable,\n        page,\n        tsort,\n        thide,\n        tshow,\n        tdir,\n        treset,\n        filterobjects,\n        searchtext,\n        replacerow: false // Replace row is always false.\n    };\n}"],"names":["_interopRequireDefault","obj","__esModule","default","_ajax","_templates","_notification","loadings","queries","_exports","scrollpages","tablejss","scrollingelement","moreThanOneTable","SELECTORS","CONTAINER","FILTER","WBTABLE","init","idstring","encodedtable","console","log","checkInTable","Object","keys","length","hasOwnProperty","infinitescrollEnabled","callback","identifier","element","document","querySelector","dataset","initializeComponents","spinner","isHidden","selector","undefined","addLinksToPagination","addScrollFunctionality","initToggleAside","observer","MutationObserver","this","disconnect","hiddenElement","returnHiddenElement","observe","attributes","respondToVisibility","callLoadData","togglebutton","addEventListener","classList","toggle","getScrollParent","node","scrollHeight","clientHeight","styles","window","getComputedStyle","overflow","doublecheckScrollable","parentNode","el","style","display","visibility","page","arguments","tsort","thide","tshow","tdir","treset","filterobjects","searchtext","replacerow","getFilterObjects","getSearchInput","getSortSelection","table","getElementById","childNodes","updateUrlWithFilterSearchSort","remove","Ajax","call","methodname","args","wbtfilter","done","async","res","jsonobject","JSON","parse","content","e","message","getString","Notification","addNotification","type","rendertemplate","template","container","componentscontainer","rowtemplate","promises","rows","map","row","Templates","renderForPromise","then","_ref","html","js","rowid","id","replaceNode","appendNodeContents","catch","promise","_ref4","returnPromiseToSaveJS","push","Promise","all","setTimeout","sortselector","_ref2","ex","frag","add","_ref3","firstChild","removeChild","lastChild","parent","parentElement","fail","err","createElement","textnode","createTextNode","appendChild","scrollinitialized","scrollableelement","scrollListener","elementtop","getBoundingClientRect","top","screenheight","body","tableelement","tableelementheight","height","arrayOfPageItems","querySelectorAll","forEach","item","pageNumber","pagenumber","initializeCheckboxes","initializeSearch","initializeSort","initializeRowsSelect","initializeFilterSearch","initializeResetFilterButton","initializeEditTableButton","initializeReload","initializeActionButton"],"mappings":"+fAuB6C,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA;;;;;8JAF7CG,MAAAJ,uBAAAI,OACAC,WAAAL,uBAAAK,YACAC,cAAAN,uBAAAM,eAeA,IAAIC,SAAW,CAAA,EACJC,QAAOC,SAAAD,QAAG,GACjBE,YAAc,CAAA,EACdC,SAAW,CAAA,EACXC,iBAAmB,CAAA,EAEnBC,kBAAmB,EAChB,MAAMC,UAASL,SAAAK,UAAG,CACrBC,UAAW,+BACXC,OAAQ,0BACRC,QAAS,qBAkCXR,SAAAS,KA1BkBA,CAACC,SAAUC,gBAG3BC,QAAQC,IAAI,gBAAkBH,UAEzBX,QAAQW,WACTI,aAAaJ,SAAUC,cAGvBI,OAAOC,KAAKjB,SAASkB,OAAS,IAC9Bb,kBAAmB,GAGnBM,UAAYC,eAEPV,YAAYiB,eAAeR,YAExBS,sBAAsBT,UACtBT,YAAYS,UAAY,EAExBT,YAAYS,WAAa,GAgCzC,SAA6BA,SAAUC,aAAcS,UAEjD,MAAMC,WAAa,IAAMX,SACzB,IAAIY,QAAUC,SAASC,cAAc,IAAMH,YAI3C,IAAIC,SAAYA,QAAQG,QAAQd,aAO5B,YADAe,qBAAqBhB,SAAUC,cAL/BW,QAAQG,QAAQd,aAAeA,aAWnC,IAAIgB,QAAUJ,SAASC,cAAc,IAAMH,WAAa,WAExD,GAAiB,OAAZM,SAAsBC,SAASD,SAmB7B,CAEH,MAAME,SAAW,+BAAiCnB,SAGjCoB,MAFCP,SAASC,cAAcK,YAKrCE,qBAAqBrB,SAAUC,aAAcW,SAE7CI,qBAAqBhB,SAAUC,cAM/BqB,uBAAuBtB,SAAUC,aAAcW,SAC/CW,gBAAgBvB,UAGxB,KAvC8C,CAE1C,IAAIwB,SAAW,IAAIC,kBAAiB,WAC3BP,SAASN,WACVc,KAAKC,aAELjB,SAASV,SAAUC,cAE3B,IAEA,MAAM2B,cAAgBC,oBAAoBjB,SAEpB,OAAlBgB,cAEAJ,SAASM,QAAQF,cAAe,CAACG,YAAY,IAE7CrB,SAASV,SAAUC,aAG3B,CAqBJ,CAzFQ+B,CAAoBhC,SAAUC,aAAcgC,cAChD,EAOJ,MAAMV,gBAAmBvB,WACrB,MAAMkC,aAAerB,SAASC,cAAc,kBAAoBd,UAE5DkC,cACAA,aAAaC,iBAAiB,SAAS,KACrBtB,SAASC,cAAc,+BAAiCd,SAAW,UAC3EoC,UAAUC,OAAO,YACPxB,SAASC,cAAc,+BAAiCd,UAChEoC,UAAUC,OAAO,iBAAiB,GAElD,EA8EJ,SAASC,gBAAgBC,MACrB,OAAa,OAATA,KACO,KAEPA,KAAKC,aAAeD,KAAKE,cAiBjC,SAA+BF,MAC3B,MAAMG,OAASC,OAAOC,iBAAiBL,MAGvC,MAFyC,WAApBG,OAAOG,UAA6C,SAApBH,OAAOG,QAGhE,CArBYC,CAAsBP,MAEfA,KAKJD,gBAAgBC,KAAKQ,WAEpC,CAmBO,MAAM7B,SAAY8B,KACrB,IAAIC,MAAQN,OAAOC,iBAAiBI,IACpC,MAA2B,SAAlBC,MAAMC,SAA6C,WAArBD,MAAME,UAAwB,EACvE7D,SAAA4B,SAAAA,SAgBK,MAAMe,aAAe,SACxBjC,SACAC,cASuB,IARvBmD,KAAIC,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACPC,MAAKD,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACRE,MAAKF,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACRG,MAAKH,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACRI,KAAIJ,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACPK,OAAML,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACTM,cAAaN,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KAChBO,WAAUP,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACbQ,WAAUR,UAAA9C,OAAA,SAAAa,IAAAiC,UAAA,KAAAA,UAAA,IAEV,GAAIjE,SAASY,YAAc6D,WACvB,OAGS,OAATT,OAEI3C,sBAAsBT,UACtBT,YAAYS,UAAYoD,KAExB7D,YAAYS,WAAa,GAKX,OAAlB2D,gBACAA,eAAgB,EAAAG,QAAgBA,kBAAC9D,WAGlB,OAAf4D,aACAA,YAAa,EAAAG,QAAcA,gBAAC/D,WAGlB,OAAVsD,QACAA,OAAQ,EAAAU,MAAgBA,kBAAChE,WAG7B,MAAMiE,MAAQpD,SAASqD,eAAe,IAAMlE,WAGnB,IAArBN,kBAA6BuE,MAAME,WAAW5D,OAAS,IACvD,EAAA6D,SAAAA,+BAA8BT,cAAeC,WAAYN,MAAOG,MAIpE,IAAIxC,QAAUJ,SAASC,cAAc,KAAOd,SAAW,2BAG1B,GAAzBT,YAAYS,WACR6D,YACA5C,SACAA,QAAQmB,UAAUiC,OAAO,UAKjCjE,aACIJ,SACAC,aACAmD,KACAE,MACAC,MACAC,MACAC,KACAC,OACAC,cACAC,WACAC,YAGJzE,SAASY,WAAY,EAErBsE,MAAItF,QAACuF,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CACFxE,aAAgBA,aAChBmD,KAAQA,KACRE,MAASA,MACTC,MAASA,MACTC,MAASA,MACTC,KAAQA,KACRC,OAAUA,OACVgB,UAAaf,cACbC,WAAcA,YAElBe,KAAMC,eAAeC,KAEjB,IAAIC,WAAa,GACjB,IACGA,WAAaC,KAAKC,MAAMH,IAAII,QAC9B,CAAC,MAAOC,GAEL,MAAMC,cAAgB,EAAAC,iBAAU,mBAAoB,0BAYpD,OAVAC,cAAYrG,QAACsG,gBAAgB,CACzBH,gBACAI,KAAM,WAIVnG,SAASY,WAAY,OAGrBE,QAAQC,IAAI+E,EAEhB,CAEA,IAAIM,eAAiBX,IAAIY,SAIrBC,UAAY7E,SAASC,cAAc,+BAAiCd,UACxE,IAAK0F,UACD,OAEJ,MAAMC,oBAAsBD,UAAU5E,cAAc,gCAGpD,GAAI+C,YACItE,YAAYS,UAAY,EAAI,CAGhC,MAAM4F,YAAcJ,eAAiB,OAErC,IAAKV,WAAWb,MAAMzD,eAAe,QAIjC,OAFAjB,YAAYS,WAAa,OACzBZ,SAASY,WAAY,GAMzB,MAAM6F,SAHKf,WAAWb,MAAM6B,KAGNC,KAAIC,MACtBC,WAASjH,QAACkH,iBAAiBN,YAAaI,KAAKG,MAAKC,OAAgB,IAAfC,KAACA,KAAIC,GAAEA,IAAGF,KAEzD,GAAIvC,WAAY,CAGZ,MACM0C,MADexB,KAAKC,MAAMrB,eACL6C,GAE3BP,WAAAA,QAAUQ,YAAY,KAAOzG,SACvB,gCAAkCuG,MAAQ,KAAMF,KAAMC,GAChE,MAEIL,WAAAA,QAAUS,mBAAmB,KAAO1G,SAAW,mBAAoBqG,KAAMC,IAG7E,OAAO,CAAI,IACZK,OAAMzB,IAELhF,QAAQC,IAAI+E,EAAE,KAEX,KAIX,IAAK1F,SAASgB,eAAeR,UAAW,CAEpC,MAAM4G,QAoU1B,SAA+BpB,eAAgBV,WAAY9E,UAEvD,OAAOiG,WAASjH,QAACkH,iBAAiBV,eAAgBV,YAAYqB,MAAKU,QAAgB,IAAfR,KAACA,KAAIC,GAAEA,IAAGO,MAI1E,OAFArH,SAASQ,UAAYsG,IAEd,CAAI,IACZK,OAAMzB,IAELhF,QAAQC,IAAI+E,EAAE,GAEtB,CA/UoC4B,CAAsBtB,eAAgBV,WAAY9E,UAElE6F,SAASkB,KAAKH,QAClB,CAmBA,YAhBAI,QAAQC,IAAIpB,UAAUM,MAAK,KAEvBe,YAAW,KAEPjB,WAAAA,QAAUS,mBAAmB,KAAO1G,SAAU,GAAIR,SAASQ,UAAU,GAEtE,KAEHZ,SAASY,WAAY,CAErB,IACD2G,OAAMzB,IAELhF,QAAQC,IAAI+E,EAAE,GAItB,CAEA,MAAMW,SAAW,GACjB,GAAKF,oBAGE,CACH,MAAMwB,aAAe,yBACrBtB,SAASkB,KAAKd,WAAAA,QAAUC,iBAAiB,wCAAyCpB,YAAYqB,MAAKiB,QAAgB,IAAff,KAACA,KAAIC,GAAEA,IAAGc,MAC1G,MAAMxG,QAAU8E,UAAU5E,cAAcqG,cAIxC,OAHAlB,WAASjH,QAACyH,YAAY7F,QAASyF,KAAMC,IAErCtF,qBAAqBhB,SAAUC,eACxB,CAAI,IACZ0G,OAAMU,KAELnH,QAAQC,IAAIkH,GAAG,IAEvB,MAbI7B,gBAAkC,aAetC,IAAI8B,KAAO5B,UAAU5E,cAAc,yBAG/BgF,KAAOhB,WAAWb,MAAM6B,KACxBxC,SAAWwC,MAAQA,KAAKvF,OAAS,IAE7BU,SACAA,QAAQmB,UAAUmF,IAAI,UAEtBtD,OACAA,MAAM7B,UAAUiC,OAAO,UAG3BjF,SAASY,WAAY,GAIrB6F,SAASkB,KAAKd,WAAAA,QAAUC,iBAAiBV,eAAgBV,YAAYqB,MAAKqB,QAAgB,IAAfnB,KAACA,KAAIC,GAAEA,IAAGkB,MAEjF,GAAI7B,oBAAqB,CAErB,KAAO2B,KAAKG,YACRH,KAAKI,YAAYJ,KAAKK,WAI1B1B,WAASjH,QAAC0H,mBAAmB,KAAO1G,SAAUqG,KAAMC,GACxD,KAAO,CAEH,MAAMsB,OAASlC,UAAUmC,cACzBnC,UAAUrB,SACV4B,WAASjH,QAAC0H,mBAAmBkB,OAAQvB,KAAMC,IAE3CZ,UAAY7E,SAASC,cAAc,+BAAiCd,SACxE,CACA,GAAiBoB,MAAbsE,UACA,OAAO,EAiBX,GAfArE,qBAAqBrB,SAAUC,aAAcyF,WAG7CtG,SAASY,WAAY,EAEjBiB,SACAA,QAAQmB,UAAUmF,IAAI,UAEtBtD,OACAA,MAAM7B,UAAUiC,OAAO,UAI3BrD,qBAAqBhB,SAAUC,eAE1ByF,UACD,OAAO,EAEX,MAAM9E,QAAU8E,UAAU5E,cAAc,KAAOd,UAK/C,OAFAsB,uBAAuBtB,SAAUC,aAAcW,UAExC,CAAI,IACZ+F,OAAMU,KACLjI,SAASY,WAAY,EACrBqF,cAAYrG,QAACsG,gBAAgB,CACzBH,QAAS,oBAAsBkC,GAC/B9B,KAAM,UACR,WAMMM,SAAS,SAETA,SAAS,EAC5B,EACDiC,KAAM,SAASC,KAGX,GAAe,GAAVrE,OACDzB,aAAajC,SAAUC,aAAcmD,KAAM,KAAM,KAAM,KAAM,KAAM,OAChE,CACH,IAAIb,KAAO1B,SAASmH,cAAc,OAC9BC,SAAWpH,SAASqH,eAAeH,IAAI5C,SAC3C5C,KAAK4F,YAAYF,UACjBhE,MAAMkE,YAAY5F,MAClBtB,QAAQmB,UAAUmF,IAAI,UACtBtD,MAAM7B,UAAUiC,OAAO,SAC3B,CACJ,MAYR,SAAS/C,uBAAuBtB,SAAUC,aAAcW,SAGpD,IAAKH,sBAAsBT,UACvB,OAGJ,GAAIY,QAAQG,QAAQqH,kBAChB,OAGJxH,QAAQG,QAAQqH,mBAAoB,EAEpC,MAAMC,kBAAoB/F,gBAAgB1B,SAEtCyH,mBACAA,kBAAkBlG,iBAAiB,UAAU,KAEpC1C,iBAAiBe,eAAeR,UAGE,kBAA/BP,iBAAiBO,WACjBsI,eAAe1H,QAASZ,SAAUC,cAHtCR,iBAAiBO,UAAY,eAKjC,IAKR2C,OAAOR,iBAAiB,UAAU,KAEzB1C,iBAAiBe,eAAeR,UAGE,WAA/BP,iBAAiBO,WACjBsI,eAAe1H,QAASZ,SAAUC,cAHtCR,iBAAiBO,UAAY,QAKjC,GAGR,CASA,SAASsI,eAAe1H,QAASZ,SAAUC,cAGvC,GAAI4B,oBAAoBjB,SACpB,OAEJ,MAAM2H,WAAa3H,QAAQ4H,wBAAwBC,IAC7CC,aAAe7H,SAAS8H,KAAKnG,aAGnC,MAAMoG,aADU/H,SAASC,cAAc,+BAAiCd,UACzCc,cAAc,YAAcnB,UAAUG,QAAU,MAG/E,IAAK8I,aACD,OAGJ,MAAMC,mBAAqBD,aAAaJ,wBAAwBM,QAE3D1J,SAASY,WAAaT,YAAYS,WAAa,GAC5CuI,WAAaM,mBAAqBH,aAAe,IACjDnJ,YAAYS,UAAYT,YAAYS,UAAY,EAChDiC,aAAajC,SACTC,aACAV,YAAYS,UACZ,KACA,KACA,KACA,KACA,KACA,KACA,MAGhB,CAQA,SAAS6B,oBAAoBjB,SAEzB,KAAmB,OAAZA,SAAkB,CACrB,GAAKM,SAASN,SAGV,OAAOA,QAFPA,QAAUA,QAAQiH,aAI1B,CACA,OAAO,IACX,CASA,SAASxG,qBAAqBrB,SAAUC,aAAcqH,MAClD,GAAKA,KAAL,CAIA,IAAIyB,iBAAmBzB,KAAK0B,iBAAiB,cAExCD,kBAA+C,GAA3BA,iBAAiBxI,QAG1CwI,iBAAiBE,SAAQC,OAErB,IAAIC,WAAaD,KAAKnI,QAAQqI,WAE1BD,eACEA,WACFD,KAAK/G,iBAAiB,SAAS,KAC3BF,aAAajC,SAAUC,aAAckJ,WAAW,IAExD,GAhBJ,CAkBJ,CAOA,SAAS1I,sBAAsBT,UAE3B,MAAMmB,SAAW,+BAAiCnB,SAClD,QAAIa,SAASC,cAAcK,SAAW,8BAI1C,CAOA,SAASH,qBAAqBhB,SAAUC,cACpC,MAAMkB,SAAW,+BAAiCnB,UAE9C,EAAAqJ,8BAAqBlI,SAAUnB,SAAUC,eACzC,EAAAqJ,0BAAiBnI,SAAUnB,SAAUC,eACrC,EAAAsJ,sBAAepI,SAAUnB,SAAUC,eACnC,EAAAuJ,yCAAqBrI,SAAUnB,SAAUC,eACzC,EAAAwJ,sCAAuBtI,SAAUnB,SAAUC,eAC3C,EAAAyJ,sCAA4BvI,SAAUnB,SAAUC,eAChD,EAAA0J,sCAA0BxI,SAAUnB,SAAUC,cAI1C2J,2BACA,EAAAA,0BAAiBzI,SAAUnB,SAAUC,eAEzC,EAAA4J,sCAAuB1I,SAAUnB,SAAUC,aAEnD,CAoCA,SAASG,aACLJ,SACAC,cASoB,IARpBmD,KAAIC,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACPC,MAAKD,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACRE,MAAKF,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACRG,MAAKH,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACRI,KAAIJ,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACPK,OAAML,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACTM,cAAaN,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KAChBO,WAAUP,UAAA9C,OAAA,QAAAa,IAAAiC,UAAA,GAAAA,UAAA,GAAG,KACHA,UAAA9C,OAAA,SAAAa,IAAAiC,UAAA,KAAAA,UAAA,MAOVhE,QAAQW,UAAY,CAChBA,kBACAC,0BACAmD,UACAE,YACAC,YACAC,YACAC,UACAC,cACAC,4BACAC,sBACAC,YAAY,GAEpB,CAvPEvE,SAAA2C,aAAAA,YAuPD"}