{"version":3,"file":"reordering.min.js","sources":["../src/reordering.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for sorting columns in question bank view.\n *\n * @copyright  2024 Wunderbyte GmbH\n * @author     Georg MaiÃŸer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n import SortableList from 'core/sortable_list';\n import jQuery from 'jquery';\n import {transmitAction} from 'local_wunderbyte_table/actionbutton';\n\n const SELECTOR = {\n    ROWS: '.rows-container',\n };\n\n var activeinfo = null;\n /**\n  * Sets up sortable list in the column sort order page.\n  * @param {Element} listRoot\n  * @param {String} identifier\n  * @param {String} idstring\n  * @param {String} encodedtable\n  */\n const initSortableLists = (listRoot, identifier, idstring, encodedtable) => {\n    new SortableList(listRoot);\n\n    jQuery(identifier + ' > *').on(SortableList.EVENTS.DROP, function(event, info) {\n        // eslint-disable-next-line no-console\n        console.log('drop', event.currentTarget);\n\n       if (info.positionChanged && activeinfo != info) {\n\n            activeinfo = info;\n            const data = {\n                ids: getIdOrder(listRoot),\n            };\n\n            const datastring = JSON.stringify(data);\n\n            transmitAction(-1, 'reorderrows', datastring, idstring, encodedtable);\n            listRoot.querySelectorAll('tr').forEach(item => item.classList.remove('wb-table-sortable-drag'));\n            listRoot.querySelectorAll('tr').forEach(item => item.classList.remove('wb-table-sortable-active'));\n       }\n    });\n\n    jQuery(identifier + ' > *').on(SortableList.EVENTS.DRAGSTART, (event) => {\n        // eslint-disable-next-line no-console\n        console.log('dragstart', event.currentTarget);\n        event.currentTarget.classList.add('wb-table-sortable-active');\n    });\n\n    jQuery(identifier + ' > *').on(SortableList.EVENTS.DRAG, (event) => {\n        // eslint-disable-next-line no-console\n        console.log('drag', event.currentTarget);\n        event.currentTarget.classList.add('wb-table-sortable-drag');\n    });\n\n    jQuery(identifier + ' > *').on(SortableList.EVENTS.DAGEND, (event) => {\n        // eslint-disable-next-line no-console\n        console.log('dragend', event.currentTarget);\n        listRoot.querySelectorAll('tr').forEach(item => item.classList.remove('wb-table-sortable-drag'));\n        listRoot.querySelectorAll('tr').forEach(item => item.classList.remove('wb-table-sortable-active'));\n    });\n};\n\n /**\n  * Gets the newly reordered columns to display in the question bank view.\n  * @param {Element} listRoot\n  * @returns {Array}\n  */\n const getIdOrder = listRoot => {\n     const columns = Array.from(listRoot.querySelectorAll('tr[data-id]'))\n         .map(column => column.dataset.id);\n    columns.pop();\n    return columns;\n };\n\n\n /**\n  * Function to initialize the search after rendering the searchbox.\n  * @param {*} listContainer\n  * @param {*} idstring\n  * @param {*} encodedtable\n  * @returns {void}\n  */\n export function initializeReordering(listContainer, idstring, encodedtable) {\n\n\n    const container = document.querySelector(listContainer);\n\n    const rowscontainer = container.querySelector(`${SELECTOR.ROWS}`);\n\n\n    if (!rowscontainer || rowscontainer.dataset.sortinitialized) {\n      return;\n    }\n    rowscontainer.dataset.sortinitialized = true;\n\n    initSortableLists(rowscontainer, SELECTOR.ROWS, idstring, encodedtable);\n\n}\n\n"],"names":["listContainer","idstring","encodedtable","rowscontainer","document","querySelector","SELECTOR","dataset","sortinitialized","listRoot","identifier","SortableList","on","EVENTS","DROP","event","info","console","log","currentTarget","positionChanged","activeinfo","data","ids","getIdOrder","datastring","JSON","stringify","querySelectorAll","forEach","item","classList","remove","DRAGSTART","add","DRAG","DAGEND","initSortableLists","columns","Array","from","map","column","id","pop"],"mappings":";;;;;;;oGAqGsCA,cAAeC,SAAUC,oBAKrDC,cAFYC,SAASC,cAAcL,eAETK,wBAAiBC,oBAG5CH,eAAiBA,cAAcI,QAAQC,uBAG5CL,cAAcI,QAAQC,iBAAkB,EAzEjB,EAACC,SAAUC,WAAYT,SAAUC,oBACpDS,uBAAaF,8BAEVC,WAAa,QAAQE,GAAGD,uBAAaE,OAAOC,MAAM,SAASC,MAAOC,SAErEC,QAAQC,IAAI,OAAQH,MAAMI,eAEvBH,KAAKI,iBAAmBC,YAAcL,KAAM,CAE3CK,WAAaL,WACPM,KAAO,CACTC,IAAKC,WAAWf,WAGdgB,WAAaC,KAAKC,UAAUL,wCAElB,EAAG,cAAeG,WAAYxB,SAAUC,cACxDO,SAASmB,iBAAiB,MAAMC,SAAQC,MAAQA,KAAKC,UAAUC,OAAO,4BACtEvB,SAASmB,iBAAiB,MAAMC,SAAQC,MAAQA,KAAKC,UAAUC,OAAO,sDAIvEtB,WAAa,QAAQE,GAAGD,uBAAaE,OAAOoB,WAAYlB,QAE3DE,QAAQC,IAAI,YAAaH,MAAMI,eAC/BJ,MAAMI,cAAcY,UAAUG,IAAI,mDAG/BxB,WAAa,QAAQE,GAAGD,uBAAaE,OAAOsB,MAAOpB,QAEtDE,QAAQC,IAAI,OAAQH,MAAMI,eAC1BJ,MAAMI,cAAcY,UAAUG,IAAI,iDAG/BxB,WAAa,QAAQE,GAAGD,uBAAaE,OAAOuB,QAASrB,QAExDE,QAAQC,IAAI,UAAWH,MAAMI,eAC7BV,SAASmB,iBAAiB,MAAMC,SAAQC,MAAQA,KAAKC,UAAUC,OAAO,4BACtEvB,SAASmB,iBAAiB,MAAMC,SAAQC,MAAQA,KAAKC,UAAUC,OAAO,kCAqC1EK,CAAkBlC,cAAeG,cAAeL,SAAUC,mHAvFvDI,cACG,sBAGLe,WAAa,WAuDXG,WAAaf,iBACT6B,QAAUC,MAAMC,KAAK/B,SAASmB,iBAAiB,gBAChDa,KAAIC,QAAUA,OAAOnC,QAAQoC,YACnCL,QAAQM,MACDN"}