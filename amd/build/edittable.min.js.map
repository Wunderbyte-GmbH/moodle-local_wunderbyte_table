{"version":3,"file":"edittable.min.js","sources":["../src/edittable.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport {init as filterFieldsInit} from 'local_wunderbyte_table/filterfieldsreload';\nimport {init as filterColumnsInit} from 'local_wunderbyte_table/filtercolumnsreload';\nimport {init as deleteKeyValuePairInit} from 'local_wunderbyte_table/deletekeyvaluepair';\n\nconst SELECTORS = {\n    EDITTABLEBUTTON: ' .wb_edit_button',\n    ADDFILTERBUTTON: ' .wb_add_filter_button',\n};\n\n/**\n * Init function.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function initializeEditTableButton(selector, idstring, encodedtable) {\n\n    const button = document.querySelector(selector + SELECTORS.EDITTABLEBUTTON);\n\n    if (!button) {\n        return;\n    }\n\n    if (button.initialized) {\n        return;\n    } else {\n        button.initialized = true;\n    }\n\n    button.addEventListener('click', (e) => editTableModal(e, idstring, encodedtable));\n    addFilterButtonListener(selector, idstring, encodedtable);\n\n}\n\n/**\n * Edit Table Modal.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function addFilterButtonListener(selector, idstring, encodedtable) {\n    const button = verifyValidButtonInitialisation(selector);\n    if (button) {\n        button.addEventListener('click', (e) => addFilterTableModal(e, idstring, encodedtable));\n    }\n    return;\n}\n\n/**\n * Edit Table Modal.\n * @param {*} selector\n */\nexport function verifyValidButtonInitialisation(selector) {\n    const button = document.querySelector(selector + SELECTORS.ADDFILTERBUTTON);\n    if (!button) {\n        return false;\n    }\n    if (button.initialized) {\n        return false;\n    } else {\n        button.initialized = true;\n    }\n    return button;\n}\n\n/**\n * Edit Table Modal.\n * @param {*} event\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function addFilterTableModal(event, idstring, encodedtable) {\n    // We two parents up, we find the right element with the necessary information.\n    const element = event.target;\n    const modalForm = new ModalForm({\n        formClass: \"local_wunderbyte_table\\\\form\\\\addfiltertable\",\n        args: {\n            idstring,\n            encodedtable,\n        },\n        modalConfig: {title: getString('addwbtablefilter', 'local_wunderbyte_table')},\n        returnFocus: element\n    });\n    modalForm.addEventListener('core_form_modalform_loaded', () => {\n        filterFieldsInit();\n        filterColumnsInit(encodedtable);\n        deleteKeyValuePairInit();\n    });\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, response => {\n        // eslint-disable-next-line no-console\n        console.log('form submitted response: ', response);\n        window.location.reload();\n    });\n    modalForm.addEventListener('change', (e) => {\n        if (e.target.name == 'subdatepicker_type') {\n            Ajax.call([{\n                methodname: 'local_wunderbyte_table_get_filter_specific_fields',\n                args: {filterspecifictype: e.target.value},\n                done: (response) => {\n                    const filteradd = document.getElementById('filter-add-field');\n                    if (filteradd && response.filteraddfields) {\n                        filteradd.innerHTML = response.filteraddfields;\n                    }\n                },\n                fail: (error) => {\n                    // eslint-disable-next-line no-console\n                    console.error('Web service error:', error);\n                }\n            }]);\n        }\n    });\n\n    modalForm.show();\n}\n\n/**\n * Edit Table Modal.\n * @param {*} event\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function editTableModal(event, idstring, encodedtable) {\n\n    // We two parents up, we find the right element with the necessary information.\n    const element = event.target;\n\n    // eslint-disable-next-line no-console\n    console.log('closest', element);\n\n    // eslint-disable-next-line no-console\n    console.log('values ', idstring);\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_wunderbyte_table\\\\form\\\\edittable\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            idstring,\n            encodedtable,\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('customizewbtable', 'local_wunderbyte_table')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: element\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, response => {\n\n        // eslint-disable-next-line no-console\n        console.log('form submitted response: ', response);\n\n        window.location.reload();\n    });\n\n    // Show the form.\n    modalForm.show();\n\n}\n"],"names":["selector","idstring","encodedtable","button","document","querySelector","SELECTORS","initialized","addEventListener","e","editTableModal","addFilterButtonListener","verifyValidButtonInitialisation","addFilterTableModal","event","element","target","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","response","console","log","window","location","reload","name","call","methodname","filterspecifictype","value","done","filteradd","getElementById","filteraddfields","innerHTML","fail","error","show"],"mappings":";;;;;0PAsC0CA,SAAUC,SAAUC,oBAEpDC,OAASC,SAASC,cAAcL,SAAWM,+BAE5CH,iBAIDA,OAAOI,mBAGPJ,OAAOI,aAAc,EAGzBJ,OAAOK,iBAAiB,SAAUC,GAAMC,eAAeD,EAAGR,SAAUC,gBACpES,wBAAwBX,SAAUC,SAAUC,gLA1B1CI,0BACe,mBADfA,0BAEe,kCAkCLK,wBAAwBX,SAAUC,SAAUC,oBAClDC,OAASS,gCAAgCZ,UAC3CG,QACAA,OAAOK,iBAAiB,SAAUC,GAAMI,oBAAoBJ,EAAGR,SAAUC,yBASjEU,gCAAgCZ,gBACtCG,OAASC,SAASC,cAAcL,SAAWM,mCAC5CH,UAGDA,OAAOI,cAGPJ,OAAOI,aAAc,EAElBJ,kBASKU,oBAAoBC,MAAOb,SAAUC,oBAE3Ca,QAAUD,MAAME,OAChBC,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,+CACXC,KAAM,CACFnB,SAAAA,SACAC,aAAAA,cAEJmB,YAAa,CAACC,OAAO,mBAAU,mBAAoB,2BACnDC,YAAaR,UAEjBE,UAAUT,iBAAiB,8BAA8B,kEAEnCN,gDAGtBe,UAAUT,iBAAiBS,UAAUO,OAAOC,gBAAgBC,WAExDC,QAAQC,IAAI,4BAA6BF,UACzCG,OAAOC,SAASC,YAEpBd,UAAUT,iBAAiB,UAAWC,IACb,sBAAjBA,EAAEO,OAAOgB,oBACJC,KAAK,CAAC,CACPC,WAAY,oDACZd,KAAM,CAACe,mBAAoB1B,EAAEO,OAAOoB,OACpCC,KAAOX,iBACGY,UAAYlC,SAASmC,eAAe,oBACtCD,WAAaZ,SAASc,kBACtBF,UAAUG,UAAYf,SAASc,kBAGvCE,KAAOC,QAEHhB,QAAQgB,MAAM,qBAAsBA,cAMpD1B,UAAU2B,gBASElC,eAAeI,MAAOb,SAAUC,oBAGtCa,QAAUD,MAAME,OAGtBW,QAAQC,IAAI,UAAWb,SAGvBY,QAAQC,IAAI,UAAW3B,gBAEjBgB,UAAY,IAAIC,mBAAU,CAG5BC,UAAW,0CAEXC,KAAM,CACFnB,SAAAA,SACAC,aAAAA,cAGJmB,YAAa,CAACC,OAAO,mBAAU,mBAAoB,2BAEnDC,YAAaR,UAIjBE,UAAUT,iBAAiBS,UAAUO,OAAOC,gBAAgBC,WAGxDC,QAAQC,IAAI,4BAA6BF,UAEzCG,OAAOC,SAASC,YAIpBd,UAAU2B"}