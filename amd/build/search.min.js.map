{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {callLoadData} from 'local_wunderbyte_table/init';\n\nimport {getFilterObjects} from 'local_wunderbyte_table/filter';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nvar lastsearchinputs = {};\nconst LOCAL_WUNDERBYTE_TABLE_SEARCH_MINLENGTH = 2;\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} idstring\n */\n export const renderSearchbox = (idstring) => {\n\n    const selector = \".wunderbyte_table_container_\" + idstring;\n    const container = document.querySelector(selector);\n    const searchcontainer = container.querySelector(\"input.search\");\n\n    if (searchcontainer) {\n      return;\n    }\n\n    Templates.renderForPromise('local_wunderbyte_table/search', []).then(({html}) => {\n\n        container.insertAdjacentHTML('afterbegin', html);\n\n        initializeSearch(selector);\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n};\n\n\n/**\n * Function to initialize the search after rendering the searchbox.\n * @param {*} containerselector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function initializeSearch(containerselector, idstring, encodedtable) {\n\n    const inputElement = document.querySelector(containerselector + ' input.search');\n\n    if (!inputElement) {\n        return;\n    }\n\n    if (!inputElement.dataset.initialized) {\n\n      inputElement.dataset.initialized = true;\n\n      inputElement.addEventListener('keyup', (e) => {\n\n        let minlength = LOCAL_WUNDERBYTE_TABLE_SEARCH_MINLENGTH;\n        let timeout = 400;\n        // If Enter was pressed in searchfield, trigger search immediatly, without minimum length of input.\n        if (e.key == 'Enter') {\n          minlength = 0;\n          timeout = 0;\n        }\n\n        let now = Date.now();\n\n        lastsearchinputs[idstring] = now;\n\n        setTimeout(() => {\n\n          const searchstring = getSearchInput(idstring, minlength);\n\n          // If the timevalue after the wait is the same as before, we didn't have another input.\n          // we want to make sure we do no loading while we are waiting for the answer.\n          // And the iput string must be longer than 3.\n          if (lastsearchinputs[idstring] === now\n              && searchstring !== null) {\n\n            const filterobjects = getFilterObjects(idstring);\n            const sort = getSortSelection(idstring);\n\n            callLoadData(idstring,\n              encodedtable,\n              0, // We set page to 0 because we need to start the container anew.\n              null,\n              sort,\n              null,\n              null,\n              null,\n              filterobjects,\n              searchstring);\n\n          }\n        }, timeout);\n\n        return;\n      });\n    }\n}\n\n/**\n * Function to read the searchstring from the input element.\n * @param {*} idstring\n * @param {int} minlength\n * @returns {null|string}\n */\nexport function getSearchInput(idstring, minlength = LOCAL_WUNDERBYTE_TABLE_SEARCH_MINLENGTH) {\n\n  const inputElement = document.querySelector(\".wunderbyte_table_container_\" + idstring + ' input.search');\n\n  if (!inputElement) {\n    return null;\n  }\n\n    let searchstring = null;\n\n    if (inputElement.value.length > minlength\n        || inputElement.value.length === 0) {\n      searchstring = inputElement.value;\n    }\n\n  return searchstring;\n}\n"],"names":["lastsearchinputs","initializeSearch","containerselector","idstring","encodedtable","inputElement","document","querySelector","dataset","initialized","addEventListener","e","minlength","timeout","key","now","Date","setTimeout","searchstring","getSearchInput","filterobjects","sort","value","length","selector","container","renderForPromise","then","_ref","html","insertAdjacentHTML","catch","console","log"],"mappings":";;;;;iPA4BIA,iBAAmB,YAqCNC,iBAAiBC,kBAAmBC,SAAUC,oBAErDC,aAAeC,SAASC,cAAcL,kBAAoB,iBAE3DG,eAIAA,aAAaG,QAAQC,cAExBJ,aAAaG,QAAQC,aAAc,EAEnCJ,aAAaK,iBAAiB,SAAUC,QAElCC,UAlDoC,EAmDpCC,QAAU,IAED,SAATF,EAAEG,MACJF,UAAY,EACZC,QAAU,OAGRE,IAAMC,KAAKD,MAEff,iBAAiBG,UAAYY,IAE7BE,YAAW,WAEHC,aAAeC,eAAehB,SAAUS,cAK1CZ,iBAAiBG,YAAcY,KACX,OAAjBG,aAAuB,OAEtBE,eAAgB,4BAAiBjB,UACjCkB,MAAO,0BAAiBlB,iCAEjBA,SACXC,aACA,EACA,KACAiB,KACA,KACA,KACA,KACAD,cACAF,iBAGHL,uBAaKM,eAAehB,cAAUS,iEApGO,QAsGxCP,aAAeC,SAASC,cAAc,+BAAiCJ,SAAW,qBAEnFE,oBACI,SAGHa,aAAe,YAEfb,aAAaiB,MAAMC,OAASX,WACK,IAA9BP,aAAaiB,MAAMC,UACxBL,aAAeb,aAAaiB,OAGzBJ,sCA7GwBf,iBAEvBqB,SAAW,+BAAiCrB,SAC5CsB,UAAYnB,SAASC,cAAciB,UACjBC,UAAUlB,cAAc,oCAMtCmB,iBAAiB,gCAAiC,IAAIC,MAAKC,WAACC,KAACA,WAEnEJ,UAAUK,mBAAmB,aAAcD,MAE3C5B,iBAAiBuB,aAGlBO,OAAMpB,IAELqB,QAAQC,IAAItB"}