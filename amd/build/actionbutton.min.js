define("local_wunderbyte_table/actionbutton",["exports","core/modal_factory","core/modal_events","core/ajax","local_wunderbyte_table/notifications","local_wunderbyte_table/reload","core/str","core_form/modalform"],(function(_exports,_modal_factory,_modal_events,_ajax,_notifications,_reload,_str,_modalform){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/*
   * @package    local_wunderbyte_table
   * @copyright  Wunderbyte GmbH <info@wunderbyte.at>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.initializeActionButton=function(selector,idstring,encodedtable){const container=document.querySelector(selector);if(!container)return;container.querySelectorAll(SELECTOR_ACTIONBUTTON).forEach((button=>{button.dataset.initialized||(button.dataset.initialized=!0,button.dataset.methodname&&button.dataset.methodname.length>0?button.dataset.ischeckbox?button.addEventListener("change",(()=>{const data=button.dataset;data.state=button.checked,console.log(data.state),transmitAction(button.dataset.id,button.dataset.methodname,JSON.stringify(data),idstring,encodedtable)})):button.addEventListener("click",(async()=>{var selectionresult=await async function(idstring,data){const result=getIds(data.id,idstring,data),checkedids=result.checkedids,datastring=result.labelarray.join("<br>")??"";return{checkedids:checkedids,labelstring:datastring}}(idstring,button.dataset);if("1"==button.dataset.selectionmandatory||1==button.dataset.selectionmandatory||"true"==button.dataset.selectionmandatory)var selectionmandatory=!0;selectionmandatory&&selectionresult.checkedids.length<1?async function(){const message=await(0,_str.get_string)("nocheckboxchecked","local_wunderbyte_table");(0,_notifications.showNotification)(message,"danger")}():"true"===button.dataset.nomodal||"1"===button.dataset.nomodal?chooseActionToTransmit(button,idstring,encodedtable,selectionresult):async function(button,idstring,encodedtable,result){let datastring=result.labelstring??"",strings=[];strings=result.labelstring.length>0?[{key:button.dataset.titlestring??"generictitle",component:button.dataset.component??"local_wunderbyte_table"},{key:button.dataset.bodystring??"genericbody",component:button.dataset.component??"local_wunderbyte_table",param:{data:datastring}},{key:button.dataset.submitbuttonstring??"genericsubmit",component:button.dataset.component??"local_wunderbyte_table"}]:[{key:button.dataset.titlestring??"generictitle",component:button.dataset.component??"local_wunderbyte_table"},{key:button.dataset.noselectionbodystring??"noselectionbody",component:button.dataset.component??"local_wunderbyte_table"},{key:button.dataset.submitbuttonstring??"genericsubmit",component:button.dataset.component??"local_wunderbyte_table"}];const localizedstrings=await(0,_str.get_strings)(strings);_modal_factory.default.create({type:_modal_factory.default.types.SAVE_CANCEL}).then((modal=>(modal.setTitle(localizedstrings[0]),modal.setBody(localizedstrings[1]),modal.setSaveButtonText(localizedstrings[2]),modal.getRoot().on(_modal_events.default.save,(function(){chooseActionToTransmit(button,idstring,encodedtable,result)})),modal.show(),modal))).catch((e=>{console.log(e)}))}(button,idstring,encodedtable,selectionresult)})):button.dataset.formname&&button.dataset.formname.length>0&&button.addEventListener("click",(e=>{const target=e.target;console.log("transmit data",target);let title="title";void 0!==target.dataset.title&&(title=target.dataset.title),function(button,titleText,bodyText,saveButtonText,idstring,encodedtable){console.log(button,bodyText,saveButtonText,idstring,encodedtable);const formname=button.dataset.formname;let data=button.dataset;if(data.id=button.dataset.id,-1==data.id){const result=getIds(data.id,idstring,data);data.checkedids=result.checkedids}console.log(data);let modalForm=new _modalform.default({formClass:formname,args:data,modalConfig:{title:titleText},returnFocus:button});modalForm.addEventListener(modalForm.events.FORM_SUBMITTED,(e=>{console.log(e.detail),e.detail.reload?window.location.reload():(0,_reload.reloadAllTables)()})),modalForm.show()}(button,title,"body","button",idstring,encodedtable)})))}))},_exports.transmitAction=transmitAction,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_ajax=_interopRequireDefault(_ajax),_modalform=_interopRequireDefault(_modalform);const SELECTOR_ACTIONBUTTON=".wb_action_button",SELECTOR_CHECKBOX="input.wb-checkbox";function transmitAction(id,methodname,datastring,idstring,encodedtable){let callspinner=document.querySelector(".wunderbyte_table_container_"+idstring+" .wb-table-call-spinner");callspinner&&callspinner.classList.remove("hidden"),_ajax.default.call([{methodname:"local_wunderbyte_table_execute_action",args:{id:parseInt(id),methodname:methodname,data:datastring,encodedtable:encodedtable},done:function(data){let callspinner=document.querySelector(".wunderbyte_table_container_"+idstring+" .wb-table-call-spinner");callspinner&&callspinner.classList.add("hidden"),1==data.success?(data.reload>0&&window.location.reload(),data.message.length>0&&(0,_notifications.showNotification)(data.message,"success")):(0,_notifications.showNotification)(data.message,"danger"),(0,_reload.reloadAllTables)();const container=document.querySelector("#a"+idstring);if(container.closest(".modal-dialog")){container.closest("body").classList.add("modal-open")}},fail:function(ex){console.log("ex:"+ex);let callspinner=document.querySelector(".wunderbyte_table_container_"+idstring+" .wb-table-call-spinner");callspinner&&callspinner.classList.add("hidden"),(0,_notifications.showNotification)("row "+id+" was not treated","danger")}}])}function getIds(id,idstring,data){var checkedids=[];const labelarray=[],container=document.querySelector("#a"+idstring);if((id=parseInt(id))<1){container.querySelectorAll(SELECTOR_CHECKBOX).forEach((x=>{if(x.checked){const id=x.closest("tr").dataset.id;labelarray.push(returnLabel(id,data.labelcolumn,container)),checkedids.push(id)}}))}else labelarray.push(returnLabel(id,data.labelcolumn,container)),checkedids.push(id);return{checkedids:checkedids,labelarray:labelarray};function returnLabel(id,label,container){try{return container.querySelector('[data-id="'+id+'"] [data-label="'+label+'"]').textContent}catch(e){return""+id}}}function chooseActionToTransmit(button,idstring,encodedtable,selectionresult){const data=button.dataset,id=parseInt(button.dataset.id),methodname=button.dataset.methodname,checkedids=selectionresult.checkedids??[];if(0===checkedids.length)return console.log("no ids checked"),void transmitAction(button.dataset.id,button.dataset.methodname,JSON.stringify(button.dataset),idstring,encodedtable);0!=id?(console.log("single call"),transmitAction(id,methodname,JSON.stringify({...data,checkedids:checkedids}),idstring,encodedtable)):(console.log("multiple call"),checkedids.forEach((cid=>{transmitAction(cid,methodname,JSON.stringify(data),idstring,encodedtable)})))}}));

//# sourceMappingURL=actionbutton.min.js.map