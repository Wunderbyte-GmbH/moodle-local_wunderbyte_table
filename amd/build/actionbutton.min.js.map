{"version":3,"file":"actionbutton.min.js","sources":["../src/actionbutton.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {showNotification} from 'local_wunderbyte_table/notifications';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {\n  get_strings as getStrings,\n  get_string as getString\n} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTOR = {\n  ACTIONBUTTON: '[data-type=\"wb_action_button\"]',\n  CHECKBOX: 'input.wb-checkbox',\n};\n\n/**\n * Function to add click listener to action button.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\nexport function initializeActionButton(selector, idstring, encodedtable) {\n  const container = document.querySelector(selector);\n\n  if (!container) {\n    return;\n  }\n  const actionbuttons = container.querySelectorAll(SELECTOR.ACTIONBUTTON);\n  actionbuttons.forEach(button => {\n    if (button.dataset.initialized) {\n      return;\n    }\n    button.dataset.initialized = true;\n\n    // First check if we have a valid methodname.\n    if (button.dataset.methodname && button.dataset.methodname.length > 0) {\n      // Second check if it's a checkbox, then we need a change listener.\n      if (button.dataset.ischeckbox) {\n        button.addEventListener('change', () => {\n\n          const data = button.dataset;\n          data.state = button.checked;\n\n          transmitAction(button.dataset.id, button.dataset.methodname,\n            JSON.stringify(data), idstring, encodedtable);\n        });\n      } else if (button.tagName == 'INPUT') {\n        const debouncedInputHandler = debounce(() => {\n          const data = button.dataset;\n          data.value = button.value;\n\n          transmitAction(button.dataset.id, button.dataset.methodname,\n            JSON.stringify(data), idstring, encodedtable);\n        }, 300);\n\n        button.addEventListener('input', debouncedInputHandler);\n      } else if (button.tagName == 'SELECT') {\n        button.addEventListener('change', () => {\n          const data = button.dataset;\n          if (data.selectedValue != button.value) {\n            data.selectedValue = button.value;\n            transmitAction(\n              button.dataset.id,\n              button.dataset.methodname,\n              JSON.stringify(data),\n              idstring,\n              encodedtable\n            );\n          }\n        });\n      } else {\n        // Else it's a button, we attach the click listener.\n        button.addEventListener('click', async() => {\n\n          // Collect data from selection.\n          // This will either return an object with the ids (as array) and labels (as string) of the selection or an empty object.\n          var selectionresult = await getSelectionData(idstring, button.dataset);\n          // Button Data will either return as int (1 for true) as bool, or as \"true\" string. We want all cases to return true.\n          if (button.dataset.selectionmandatory == \"1\"\n            || button.dataset.selectionmandatory == true\n            || button.dataset.selectionmandatory == \"true\") {\n            var selectionmandatory = true;\n          }\n          // eslint-disable-next-line block-scoped-var\n          if (selectionmandatory && selectionresult.checkedids.length < 1) {\n            showNoCheckboxNotification();\n            // If selection is mandatory and there is no selection, no call will be executed.\n            return;\n          } else if (button.dataset.nomodal === 'true' || button.dataset.nomodal === \"1\") {\n            // If nomodal is set true, action will be triggerd immediately.\n            chooseActionToTransmit(button, idstring, encodedtable, selectionresult);\n          } else {\n            showConfirmationModal(button, idstring, encodedtable, selectionresult);\n            // Modal will trigger Action to Transmit\n          }\n        });\n      }\n      // If it's not a methodname, we might have a form name a need to attach the right listener.\n    } else if (button.dataset.formname && button.dataset.formname.length > 0) {\n      button.addEventListener('click', e => {\n        const target = e.target.closest(SELECTOR.ACTIONBUTTON);\n        // eslint-disable-next-line no-console\n        console.log('transmit data', target);\n        let title = 'title';\n        if (target.dataset.title !== undefined) {\n          title = target.dataset.title;\n        }\n        let saveButtonText = 'button';\n        if (target.dataset.submitbuttonstring !== undefined) {\n          saveButtonText = target.dataset.submitbuttonstring;\n        }\n        showEditFormModal(button, title, 'body', saveButtonText, idstring, encodedtable);\n      });\n    }\n  });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {*} result\n */\nasync function showConfirmationModal(button, idstring, encodedtable, result) {\n  // Checking if we have data from selection result. Otherwise generating default string for body.\n  let datastring = result.labelstring ?? '';\n  let strings = [];\n  if (result.labelstring.length > 0) {\n    strings = getStringsFromDataset(button, datastring, false);\n  } else {\n    strings = getStringsFromDataset(button, '', true);\n  }\n  const localizedstrings = await getStrings(strings);\n\n  ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n    modal.setTitle(localizedstrings[0]);\n    modal.setBody(localizedstrings[1]);\n    modal.setSaveButtonText(localizedstrings[2]);\n    modal.getRoot().on(ModalEvents.save, function() {\n      chooseActionToTransmit(button, idstring, encodedtable, result);\n    });\n    modal.show();\n    return modal;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} func\n * @param {int} delay\n */\nfunction debounce(func, delay) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), delay);\n  };\n}\n\n/**\n * Function to collect the ids, check if selection of ids is mandatory and prepare a string of selected labels.\n * @param {*} idstring\n * @param {*} data //the dataset of the button that triggerd the action.\n * @returns {object}\n */\nasync function getSelectionData(idstring, data) {\n\n  // First we collect the checked boxes.\n  const result = getIds(data.id, idstring, data);\n  const checkedids = result.checkedids;\n\n  const labelarray = result.labelarray;\n\n  const datastring = labelarray.join('<br>') ?? '';\n\n  return {\n    'checkedids': checkedids,\n    'labelstring': datastring,\n  };\n}\n\n/**\n *  If no boxes are checked, we will send out a notification.\n */\nasync function showNoCheckboxNotification() {\n  const message = await getString('nocheckboxchecked', 'local_wunderbyte_table');\n  showNotification(message, \"danger\");\n\n}\n\n/**\n * Ajax function to handle action buttons.\n * @param {int} id\n * @param {string} methodname\n * @param {string} datastring\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport function transmitAction(id, methodname, datastring, idstring, encodedtable) {\n\n  // Show the call spinner.\n  let callspinner = document.querySelector(\".wunderbyte_table_container_\" + idstring + \" .wb-table-call-spinner\");\n  if (callspinner) {\n    callspinner.classList.remove('hidden');\n  }\n\n  Ajax.call([{\n    methodname: \"local_wunderbyte_table_execute_action\",\n    args: {\n      'id': parseInt(id),\n      'methodname': methodname,\n      'data': datastring,\n      'encodedtable': encodedtable,\n    },\n    done: function(data) {\n      // Hide the call spinner.\n      let callspinner = document.querySelector(\".wunderbyte_table_container_\" + idstring + \" .wb-table-call-spinner\");\n      if (callspinner) {\n        callspinner.classList.add('hidden');\n      }\n\n      if (data.success == 1) {\n\n        if (data.reload > 0) {\n          window.location.reload();\n        }\n        if (data.message.length > 0) {\n          showNotification(data.message, \"success\");\n        }\n      } else {\n        showNotification(data.message, \"danger\");\n      }\n\n      reloadAllTables();\n\n      // We check if the table is within a modal and if so, we make sure that this modal...\n      // Stays scrollable by making sure that the body keeps the modal-open class.\n      const container = document.querySelector('#a' + idstring);\n      if (container.closest(\".modal-dialog\")) {\n        let body = container.closest(\"body\");\n        body.classList.add(\"modal-open\");\n      }\n    },\n    fail: function(ex) {\n      // eslint-disable-next-line no-console\n      console.log(\"ex:\" + ex);\n\n      // Hide the call spinner.\n      let callspinner = document.querySelector(\".wunderbyte_table_container_\" + idstring + \" .wb-table-call-spinner\");\n      if (callspinner) {\n        callspinner.classList.add('hidden');\n      }\n\n      showNotification(\"row \" + id + \" was not treated\", \"danger\");\n    },\n  }]);\n}\n\n/**\n * Function to collect checked idboxes.\n * @param {*} id\n * @param {*} idstring\n * @param {*} data\n * @returns {object}\n */\nfunction getIds(id, idstring, data) {\n  var checkedids = [];\n\n  const labelarray = [];\n  const container = document.querySelector('#a' + idstring);\n\n  // If the id is 0, we return for all checked checkboxes.\n  // if not, just for the current one.\n\n  // Make sure we treat id as int.\n  id = parseInt(id);\n  if (id < 1) {\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOX);\n\n    // Create an array of ids of the checked boxes.\n    checkboxes.forEach(x => {\n\n      if (x.checked) {\n\n        // We don't need the id of the checkbox, but the data-id of the row.\n\n        const id = x.closest('tr').dataset.id;\n\n        labelarray.push(returnLabel(id, data.labelcolumn, container));\n        checkedids.push(id);\n      }\n    });\n\n  } else {\n    labelarray.push(returnLabel(id, data.labelcolumn, container));\n    checkedids.push(id);\n  }\n  return {\n    'checkedids': checkedids,\n    'labelarray': labelarray,\n  };\n\n  /**\n   * Function to return label name or id if no name available.\n   * @param {*} id\n   * @param {*} label\n   * @param {*} container\n   * @returns {String}\n   */\n  function returnLabel(id, label, container) {\n    try {\n      const name = container.querySelector('[data-id=\"' + id + '\"] [data-label=\"' + label + '\"]').textContent;\n      return name;\n    } catch (e) {\n      return '' + id;\n    }\n  }\n}\n\n/**\n *\n * @param {*} button\n * @param {*} titleText\n * @param {*} bodyText\n * @param {*} saveButtonText\n * @param {*} idstring\n * @param {*} encodedtable\n */\nasync function showEditFormModal(button, titleText, bodyText, saveButtonText, idstring, encodedtable) {\n  // eslint-disable-next-line no-console\n  console.log(button, bodyText, saveButtonText, idstring, encodedtable);\n\n  let strings = [];\n  strings = getStringsFromDataset(button, '', true);\n  const localizedstrings = await getStrings(strings);\n  titleText = localizedstrings[0];\n  saveButtonText = localizedstrings[2];\n\n  const formname = button.dataset.formname;\n  let data = button.dataset;\n  data.id = button.dataset.id; // Get all the data of the clicked button.\n\n  if (data.id == -1) {\n    const result = getIds(data.id, idstring, data);\n    data.checkedids = result.checkedids;\n  }\n  // eslint-disable-next-line no-console\n  console.log(data);\n  let modalForm = new ModalForm({\n    // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n    formClass: formname,\n    // Add as many arguments as you need, they will be passed to the form:\n    args: data,\n    // Pass any configuration settings to the modal dialogue, for example, the title:\n    modalConfig: {\n      title: titleText\n    },\n    // DOM element that should get the focus after the modal dialogue is closed:\n    returnFocus: button,\n  });\n  if (saveButtonText != 'button') {\n    modalForm = new ModalForm({\n      // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n      formClass: formname,\n      // Add as many arguments as you need, they will be passed to the form:\n      args: data,\n      // Pass any configuration settings to the modal dialogue, for example, the title:\n      modalConfig: {\n        title: titleText\n      },\n      saveButtonText: saveButtonText,\n      // DOM element that should get the focus after the modal dialogue is closed:\n      returnFocus: button,\n    });\n  }\n\n  // Listen to events if you want to execute something on form submit.\n  // Event detail will contain everything the process() function returned:\n  modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n    const data = e.detail;\n    if (data.reload) {\n      // Reload whole site.\n      window.location.reload();\n    } else {\n      reloadAllTables();\n    }\n\n    if (data.message && data.message.length > 0) {\n      showNotification(data.message, data.success == 1 ? 'success' : 'danger');\n    }\n  });\n\n  // Show the form.\n  modalForm.show();\n}\n\n/**\n * Case decision between call without selection, single call or multiple call triggering transmit action.\n * @param {string} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {object} selectionresult\n */\nfunction chooseActionToTransmit(button, idstring, encodedtable, selectionresult) {\n  const data = button.dataset;\n  const id = parseInt(button.dataset.id);\n  const methodname = button.dataset.methodname;\n  const checkedids = selectionresult.checkedids ?? [];\n  // Checkedids will either be ['id1', 'id2', ...] or [] if no selection was made.\n\n  if (checkedids.length === 0) {\n    // eslint-disable-next-line no-console\n    console.log(\"no ids checked\");\n    transmitAction(button.dataset.id,\n      button.dataset.methodname,\n      JSON.stringify(button.dataset), idstring, encodedtable);\n    return;\n  }\n\n  if (id != 0) { // -1 means we want single line execution.\n    // eslint-disable-next-line no-console\n    console.log(\"single call\");\n    transmitAction(id, methodname, JSON.stringify({...data, checkedids}), idstring, encodedtable);\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\"multiple call\");\n    checkedids.forEach(cid => {\n      transmitAction(cid, methodname, JSON.stringify(data), idstring, encodedtable);\n    });\n  }\n}\n\n/**\n * Helper function to get strings from dataset of first element (e.g. button).\n * @param {object} button\n * @param {string} datastring\n * @param {boolean} noselection\n * @returns {Array}\n */\nfunction getStringsFromDataset(button, datastring, noselection) {\n  let strings = [];\n  strings.push({\n    key: button.dataset.titlestring ?? 'generictitle',\n    component: button.dataset.component ?? 'local_wunderbyte_table',\n  });\n  if (noselection) {\n    strings.push({\n      key: button.dataset.noselectionbodystring ?? 'noselectionbody',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n    });\n  } else {\n    strings.push({\n      key: button.dataset.bodystring ?? 'genericbody',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n      param: {\n        data: datastring,\n      },\n    });\n  }\n  strings.push({\n    key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n    component: button.dataset.component ?? 'local_wunderbyte_table',\n  });\n  return strings;\n}\n"],"names":["selector","idstring","encodedtable","container","document","querySelector","querySelectorAll","SELECTOR","forEach","button","dataset","initialized","methodname","length","ischeckbox","addEventListener","data","state","checked","transmitAction","id","JSON","stringify","tagName","debouncedInputHandler","func","delay","timeout","args","clearTimeout","setTimeout","debounce","value","selectedValue","async","selectionresult","result","getIds","checkedids","datastring","labelarray","join","getSelectionData","selectionmandatory","message","showNoCheckboxNotification","nomodal","chooseActionToTransmit","labelstring","strings","getStringsFromDataset","localizedstrings","create","type","ModalFactory","types","SAVE_CANCEL","then","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","show","catch","e","console","log","showConfirmationModal","formname","target","closest","title","undefined","saveButtonText","submitbuttonstring","titleText","bodyText","modalForm","ModalForm","formClass","modalConfig","returnFocus","events","FORM_SUBMITTED","detail","reload","window","location","success","showEditFormModal","callspinner","classList","remove","call","parseInt","done","add","fail","ex","x","push","returnLabel","labelcolumn","label","textContent","cid","noselection","key","titlestring","component","noselectionbodystring","bodystring","param"],"mappings":"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"}