{"version":3,"file":"actionbutton.min.js","sources":["../src/actionbutton.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {showNotification} from 'local_wunderbyte_table/notifications';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {\n  get_strings as getStrings,\n  get_string as getString\n} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTOR = {\n  ACTIONBUTTON: '.wb_action_button',\n  CHECKBOX: 'input.wb-checkbox',\n};\n\n/**\n * Function to add click listener to action button.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\nexport function initializeActionButton(selector, idstring, encodedtable) {\n\n  const container = document.querySelector(selector);\n  const actionbuttons = container.querySelectorAll(SELECTOR.ACTIONBUTTON);\n\n  actionbuttons.forEach(button => {\n    if (button.dataset.initialized) {\n      return;\n    }\n\n    button.dataset.initialized = true;\n\n    // First check if we have a valid methodname.\n    if (button.dataset.methodname && button.dataset.methodname.length > 0) {\n\n      // Second check if it's a checkbox, then we need a change listener.\n      if (button.dataset.ischeckbox) {\n        button.addEventListener('change', () => {\n\n          const data = button.dataset;\n          data.state = button.checked;\n\n          // eslint-disable-next-line no-console\n          console.log(data.state);\n\n          transmitAction(button.dataset.id, button.dataset.methodname,\n            JSON.stringify(data), idstring, encodedtable);\n        });\n      } else {\n        // Else it's a button, we attach the click listener.\n        button.addEventListener('click', async() => {\n\n          // Collect data from selection.\n          // This will either return an object with the ids and labels (as strings) of the selection or an empty array.\n          const selectionresult = await getSelectionData(idstring, button.dataset);\n          // If selection is mandatory and there is no selection, no call will be executed.\n          if (button.dataset.selectionmandatory == \"1\" && selectionresult.checkedids.length < 1) {\n            showNoCheckboxNotification();\n            return;\n          } else if (button.dataset.nomodal === 'true' || button.dataset.nomodal === \"1\") {\n            transmitAction(button.dataset.id,\n              button.dataset.methodname,\n              JSON.stringify(button.dataset), idstring, encodedtable);\n                // eslint-disable-next-line no-console\n                console.log(\"no modal\");\n          } else if (button.dataset.id < 0) {\n              // eslint-disable-next-line no-console\n              console.log(\"modal + singlecall\");\n            showSingleExcecutionModal(button, idstring, encodedtable, selectionresult);\n          } else {\n            // eslint-disable-next-line no-console\n            console.log(\"modal + multiple\");\n            showConfirmationModal(button, idstring, encodedtable, selectionresult);\n          }\n        });\n      }\n      // If it's not a methodname, we might have a form name a need to attach the right listener.\n    } else if (button.dataset.formname && button.dataset.formname.length > 0) {\n      button.addEventListener('click', e => {\n        const target = e.target;\n        // eslint-disable-next-line no-console\n        console.log('transmit data', target);\n        showEditFormModal(button, 'title', 'body', 'button', idstring, encodedtable);\n      });\n    }\n  });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {*} result\n */\nasync function showConfirmationModal(button, idstring, encodedtable, result) {\n\n  const id = parseInt(button.dataset.id);\n  const methodname = button.dataset.methodname;\n  const data = button.dataset; // Get all the data of the clicked button.\n\n  // Try to collect data from selection.\n  var checkedids = result.checkedids ?? [];\n  let datastring = result.labelstring ?? '';\n\n  let strings = [\n    {\n      key: button.dataset.titlestring ?? 'generictitle',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n    },\n    {\n      key: button.dataset.bodystring ?? 'genericbody',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n      param: {\n        // eslint-disable-next-line block-scoped-var\n        data: datastring,\n      },\n    },\n    {\n      key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n    },\n  ];\n\n  const localizedstrings = await getStrings(strings);\n\n  /*\n  TODO difference between modal for selected items or without selection.\n  */\n\n  ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n    modal.setTitle(localizedstrings[0]);\n    modal.setBody(localizedstrings[1]);\n    modal.setSaveButtonText(localizedstrings[2]);\n    modal.getRoot().on(ModalEvents.save, function() {\n\n      // If there is only one id, we transmit one call.\n      if (id != 0) {\n        transmitAction(id, methodname, JSON.stringify({...data, checkedids}), idstring, encodedtable);\n      } else { // Zero means we want single line execution.\n        // eslint-disable-next-line block-scoped-var\n        checkedids.forEach(cid => {\n          transmitAction(cid, methodname, JSON.stringify(data), idstring, encodedtable);\n        });\n      }\n    });\n\n    modal.show();\n    return modal;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n}\n\n\n/**\n * Function to collect the ids, check if selection of ids is mandatory and prepare a string of selected lables.\n * @param {*} idstring\n * @param {*} data //the dataset of the button that triggerd the action.\n * @returns {object}\n */\nasync function getSelectionData(idstring, data) {\n\n  // First we collect the checked boxes.\n  const result = getIds(data.id, idstring, data);\n  const checkedids = result.checkedids;\n\n  const labelarray = result.labelarray;\n\n  const datastring = labelarray.join('<br>') ?? '';\n\n  return {\n    'checkedids': checkedids,\n    'labelstring': datastring,\n  };\n}\n\n/**\n *  If no boxes are checked, we will send out a notification.\n */\nasync function showNoCheckboxNotification() {\n  const message = await getString('nocheckboxchecked', 'local_wunderbyte_table');\n  showNotification(message, \"danger\");\n\n}\n\n/**\n * Shows confirmation modal for single call execution.\n * @param {*} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {*} selectionresult\n */\nfunction showSingleExcecutionModal(button, idstring, encodedtable, selectionresult) {\n  // For the moment we make no difference between a single call and a multiple call modal\n  // therefore we are calling the generic function\n  showConfirmationModal(button, idstring, encodedtable, selectionresult);\n}\n\n\n/**\n * Ajax function to handle action buttons.\n * @param {int} id\n * @param {string} methodname\n * @param {string} datastring\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport function transmitAction(id, methodname, datastring, idstring, encodedtable) {\n  Ajax.call([{\n    methodname: \"local_wunderbyte_table_execute_action\",\n    args: {\n      'id': parseInt(id),\n      'methodname': methodname,\n      'data': datastring,\n      'encodedtable': encodedtable,\n    },\n    done: function (data) {\n\n      if (data.success == 1) {\n        showNotification(data.message, \"success\");\n      } else {\n        showNotification(data.message, \"danger\");\n      }\n      reloadAllTables();\n    },\n    fail: function (ex) {\n      // eslint-disable-next-line no-console\n      console.log(\"ex:\" + ex);\n    },\n  }]);\n}\n\n/**\n * Function to collect checked idboxes.\n * @param {*} id\n * @param {*} idstring\n * @param {*} data\n * @returns {object}\n */\nfunction getIds(id, idstring, data) {\n\n  var checkedids = [];\n\n  const labelarray = [];\n  const container = document.querySelector('#a' + idstring);\n\n  // If the id is 0, we return for all checked checkboxes.\n  // if not, just for the current one.\n  if (id < 1) {\n\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOX);\n\n    // Create an array of ids of the checked boxes.\n    checkboxes.forEach(x => {\n\n      if (x.checked) {\n        labelarray.push(returnLabel(x.id, data.labelcolumn));\n        checkedids.push(x.id);\n      }\n    });\n\n  } else {\n    labelarray.push(returnLabel(id, data.labelcolumn));\n    checkedids.push(id);\n  }\n  return {\n    'checkedids': checkedids,\n    'labelarray': labelarray,\n  };\n\n  /**\n   * Function to return label name or id if no name available.\n   * @param {*} id\n   * @param {*} label\n   * @returns {String}\n   */\n  function returnLabel(id, label) {\n    try {\n      const name = container.querySelector('[data-id=\"' + id + '\"] [data-label=\"' + label + '\"]').textContent;\n      return name;\n    } catch (e) {\n      return '' + id;\n    }\n  }\n}\n\n/**\n *\n * @param {*} button\n * @param {*} titleText\n * @param {*} bodyText\n * @param {*} saveButtonText\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction showEditFormModal(button, titleText, bodyText, saveButtonText, idstring, encodedtable) {\n\n  // eslint-disable-next-line no-console\n  console.log(button, bodyText, saveButtonText, idstring, encodedtable);\n\n  const formname = button.dataset.formname;\n  let data = button.dataset;\n  data.id = button.dataset.id; // Get all the data of the clicked button.\n\n  // eslint-disable-next-line no-console\n  console.log(data);\n\n  let modalForm = new ModalForm({\n    // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n    formClass: formname,\n    // Add as many arguments as you need, they will be passed to the form:\n    args: data,\n    // Pass any configuration settings to the modal dialogue, for example, the title:\n    modalConfig: { title: titleText },\n    // DOM element that should get the focus after the modal dialogue is closed:\n    returnFocus: button,\n  });\n\n  // Listen to events if you want to execute something on form submit.\n  // Event detail will contain everything the process() function returned:\n  modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n\n    // eslint-disable-next-line no-console\n    console.log(e.detail);\n\n    reloadAllTables();\n  });\n\n  // Show the form.\n  modalForm.show();\n}\n"],"names":["selector","idstring","encodedtable","container","document","querySelector","querySelectorAll","SELECTOR","forEach","button","dataset","initialized","methodname","length","ischeckbox","addEventListener","data","state","checked","console","log","transmitAction","id","JSON","stringify","async","selectionresult","result","checkedids","labelarray","x","push","returnLabel","labelcolumn","label","textContent","e","getIds","datastring","join","getSelectionData","selectionmandatory","message","showNoCheckboxNotification","nomodal","showConfirmationModal","showSingleExcecutionModal","formname","target","titleText","bodyText","saveButtonText","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","detail","show","showEditFormModal","parseInt","labelstring","strings","key","titlestring","component","bodystring","param","submitbuttonstring","localizedstrings","create","type","ModalFactory","types","SAVE_CANCEL","then","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","cid","catch","call","done","success","fail","ex"],"mappings":"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"}