{"version":3,"file":"actionbutton.min.js","sources":["../src/actionbutton.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {showNotification} from 'local_wunderbyte_table/notifications';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {\n  get_strings as getStrings,\n  get_string as getString\n} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTOR = {\n  ACTIONBUTTON: '.wb_action_button',\n  CHECKBOX: 'input.wb-checkbox',\n};\n\n/**\n * Function to add click listener to action button.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\nexport function initializeActionButton(selector, idstring, encodedtable) {\n\n  const container = document.querySelector(selector);\n  const actionbuttons = container.querySelectorAll(SELECTOR.ACTIONBUTTON);\n\n  actionbuttons.forEach(button => {\n    if (button.dataset.initialized) {\n      return;\n    }\n\n    button.dataset.initialized = true;\n\n    // First check if we have a valid methodname.\n    if (button.dataset.methodname && button.dataset.methodname.length > 0) {\n\n      // Second check if it's a checkbox, then we need a change listener.\n      if (button.dataset.ischeckbox) {\n        button.addEventListener('change', () => {\n\n          const data = button.dataset;\n          data.state = button.checked;\n\n          // eslint-disable-next-line no-console\n          console.log(data.state);\n\n          transmitAction(button.dataset.id, button.dataset.methodname,\n            JSON.stringify(data), idstring, encodedtable);\n        });\n      } else {\n        // Else it's a button, we attach the click listener.\n        button.addEventListener('click', async() => {\n\n          // Collect data from selection.\n          // This will either return an object with the ids (as array) and labels (as string) of the selection or an empty object.\n          var selectionresult = await getSelectionData(idstring, button.dataset);\n          // Button Data will either return as int (1 for true) as bool, or as \"true\" string. We want all cases to return true.\n          if (button.dataset.selectionmandatory == \"1\"\n          || button.dataset.selectionmandatory == true\n          || button.dataset.selectionmandatory == \"true\") {\n            var selectionmandatory = true;\n          }\n          // eslint-disable-next-line block-scoped-var\n          if (selectionmandatory && selectionresult.checkedids.length < 1) {\n            showNoCheckboxNotification();\n            // If selection is mandatory and there is no selection, no call will be executed.\n            return;\n          } else if (button.dataset.nomodal === 'true' || button.dataset.nomodal === \"1\") {\n            // If nomodal is set true, action will be triggerd immediately.\n            chooseActionToTransmit(button, idstring, encodedtable, selectionresult);\n          } else {\n            showConfirmationModal(button, idstring, encodedtable, selectionresult);\n            // Modal will trigger Action to Transmit\n          }\n        });\n      }\n      // If it's not a methodname, we might have a form name a need to attach the right listener.\n    } else if (button.dataset.formname && button.dataset.formname.length > 0) {\n      button.addEventListener('click', e => {\n        const target = e.target;\n        // eslint-disable-next-line no-console\n        console.log('transmit data', target);\n        showEditFormModal(button, 'title', 'body', 'button', idstring, encodedtable);\n      });\n    }\n  });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {*} result\n */\nasync function showConfirmationModal(button, idstring, encodedtable, result) {\n\n  // Checking if we have data from selection result. Otherwise generating default string for body.\n  let datastring = result.labelstring ?? '';\n  let strings = [];\n  if (result.labelstring.length > 0) {\n    strings = [\n      {\n        key: button.dataset.titlestring ?? 'generictitle',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.bodystring ?? 'genericbody',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n        param: {\n          // eslint-disable-next-line block-scoped-var\n          data: datastring,\n        },\n      },\n      {\n        key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n    ];\n  } else {\n    strings = [\n      {\n        key: button.dataset.titlestring ?? 'generictitle',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.noselectionbodystring ?? 'noselectionbody',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n    ];\n  }\n\n  const localizedstrings = await getStrings(strings);\n\n  ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n    modal.setTitle(localizedstrings[0]);\n    modal.setBody(localizedstrings[1]);\n    modal.setSaveButtonText(localizedstrings[2]);\n    modal.getRoot().on(ModalEvents.save, function() {\n      chooseActionToTransmit(button, idstring, encodedtable, result);\n    });\n    modal.show();\n    return modal;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n}\n\n\n/**\n * Function to collect the ids, check if selection of ids is mandatory and prepare a string of selected lables.\n * @param {*} idstring\n * @param {*} data //the dataset of the button that triggerd the action.\n * @returns {object}\n */\nasync function getSelectionData(idstring, data) {\n\n  // First we collect the checked boxes.\n  const result = getIds(data.id, idstring, data);\n  const checkedids = result.checkedids;\n\n  const labelarray = result.labelarray;\n\n  const datastring = labelarray.join('<br>') ?? '';\n\n  return {\n    'checkedids': checkedids,\n    'labelstring': datastring,\n  };\n}\n\n/**\n *  If no boxes are checked, we will send out a notification.\n */\nasync function showNoCheckboxNotification() {\n  const message = await getString('nocheckboxchecked', 'local_wunderbyte_table');\n  showNotification(message, \"danger\");\n\n}\n\n/**\n * Ajax function to handle action buttons.\n * @param {int} id\n * @param {string} methodname\n * @param {string} datastring\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport function transmitAction(id, methodname, datastring, idstring, encodedtable) {\n  Ajax.call([{\n    methodname: \"local_wunderbyte_table_execute_action\",\n    args: {\n      'id': parseInt(id),\n      'methodname': methodname,\n      'data': datastring,\n      'encodedtable': encodedtable,\n    },\n    done: function(data) {\n\n      if (data.success == 1) {\n        showNotification(data.message, \"success\");\n      } else {\n        showNotification(data.message, \"danger\");\n      }\n      reloadAllTables();\n    },\n    fail: function(ex) {\n      // eslint-disable-next-line no-console\n      console.log(\"ex:\" + ex);\n\n      showNotification(\"row \" + id + \" was not treated\", \"danger\");\n    },\n  }]);\n}\n\n/**\n * Function to collect checked idboxes.\n * @param {*} id\n * @param {*} idstring\n * @param {*} data\n * @returns {object}\n */\nfunction getIds(id, idstring, data) {\n\n  var checkedids = [];\n\n  const labelarray = [];\n  const container = document.querySelector('#a' + idstring);\n\n  // If the id is 0, we return for all checked checkboxes.\n  // if not, just for the current one.\n\n  // Make sure we treat id as int.\n  id = parseInt(id);\n  if (id < 1) {\n\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOX);\n\n    // Create an array of ids of the checked boxes.\n    checkboxes.forEach(x => {\n\n      if (x.checked) {\n\n        // We don't need the id of the checkbox, but the data-id of the row.\n\n        const id = x.closest('tr').dataset.id;\n\n        labelarray.push(returnLabel(id, data.labelcolumn, container));\n        checkedids.push(id);\n      }\n    });\n\n  } else {\n    labelarray.push(returnLabel(id, data.labelcolumn, container));\n    checkedids.push(id);\n  }\n  return {\n    'checkedids': checkedids,\n    'labelarray': labelarray,\n  };\n\n  /**\n   * Function to return label name or id if no name available.\n   * @param {*} id\n   * @param {*} label\n   * @param {*} container\n   * @returns {String}\n   */\n  function returnLabel(id, label, container) {\n    try {\n      const name = container.querySelector('[data-id=\"' + id + '\"] [data-label=\"' + label + '\"]').textContent;\n      return name;\n    } catch (e) {\n      return '' + id;\n    }\n  }\n}\n\n/**\n *\n * @param {*} button\n * @param {*} titleText\n * @param {*} bodyText\n * @param {*} saveButtonText\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction showEditFormModal(button, titleText, bodyText, saveButtonText, idstring, encodedtable) {\n\n  // eslint-disable-next-line no-console\n  console.log(button, bodyText, saveButtonText, idstring, encodedtable);\n\n  const formname = button.dataset.formname;\n  let data = button.dataset;\n  data.id = button.dataset.id; // Get all the data of the clicked button.\n\n  // eslint-disable-next-line no-console\n  console.log(data);\n\n  let modalForm = new ModalForm({\n    // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n    formClass: formname,\n    // Add as many arguments as you need, they will be passed to the form:\n    args: data,\n    // Pass any configuration settings to the modal dialogue, for example, the title:\n    modalConfig: {title: titleText},\n    // DOM element that should get the focus after the modal dialogue is closed:\n    returnFocus: button,\n  });\n\n  // Listen to events if you want to execute something on form submit.\n  // Event detail will contain everything the process() function returned:\n  modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n\n    // eslint-disable-next-line no-console\n    console.log(e.detail);\n\n    reloadAllTables();\n  });\n\n  // Show the form.\n  modalForm.show();\n}\n\n/**\n * Case decision between call without selection, single call or multiple call triggering transmit action.\n * @param {string} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {object} selectionresult\n */\nfunction chooseActionToTransmit(button, idstring, encodedtable, selectionresult) {\n  const data = button.dataset;\n  const id = parseInt(button.dataset.id);\n  const methodname = button.dataset.methodname;\n  const checkedids = selectionresult.checkedids ?? [];\n  // Checkedids will either be ['id1', 'id2', ...] or [] if no selection was made.\n\n  if (checkedids.length === 0) {\n    // eslint-disable-next-line no-console\n    console.log(\"no ids checked\");\n    transmitAction(button.dataset.id,\n      button.dataset.methodname,\n      JSON.stringify(button.dataset), idstring, encodedtable);\n      return;\n  }\n\n  if (id != 0) { // -1 means we want single line execution.\n        // eslint-disable-next-line no-console\n        console.log(\"single call\");\n    transmitAction(id, methodname, JSON.stringify({...data, checkedids}), idstring, encodedtable);\n  } else {\n      // eslint-disable-next-line no-console\n      console.log(\"multiple call\");\n    // eslint-disable-next-line block-scoped-var\n    checkedids.forEach(cid => {\n      transmitAction(cid, methodname, JSON.stringify(data), idstring, encodedtable);\n    });\n  }\n}\n\n"],"names":["selector","idstring","encodedtable","document","querySelector","querySelectorAll","SELECTOR","forEach","button","dataset","initialized","methodname","length","ischeckbox","addEventListener","data","state","checked","console","log","transmitAction","id","JSON","stringify","getSelectionData","selectionresult","selectionmandatory","checkedids","showNoCheckboxNotification","nomodal","chooseActionToTransmit","showConfirmationModal","formname","e","target","titleText","bodyText","saveButtonText","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","detail","show","showEditFormModal","result","datastring","labelstring","strings","key","titlestring","component","bodystring","param","submitbuttonstring","noselectionbodystring","localizedstrings","create","type","ModalFactory","types","SAVE_CANCEL","then","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","catch","getIds","labelarray","join","message","call","parseInt","done","success","fail","ex","container","x","closest","push","returnLabel","labelcolumn","label","textContent","cid"],"mappings":"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"}