{"version":3,"file":"actionbutton.min.js","sources":["../src/actionbutton.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {showNotification} from 'local_wunderbyte_table/notifications';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {\n  get_strings as getStrings,\n  get_string as getString\n} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTOR = {\n  ACTIONBUTTON: '.wb_action_button',\n  CHECKBOX: 'input.wb-checkbox',\n};\n\n/**\n * Function to add click listener to action button.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\nexport function initializeActionButton(selector, idstring, encodedtable) {\n\n  const container = document.querySelector(selector);\n\n  if (!container) {\n    return;\n  }\n  const actionbuttons = container.querySelectorAll(SELECTOR.ACTIONBUTTON);\n\n  actionbuttons.forEach(button => {\n    if (button.dataset.initialized) {\n      return;\n    }\n\n    button.dataset.initialized = true;\n\n    // First check if we have a valid methodname.\n    if (button.dataset.methodname && button.dataset.methodname.length > 0) {\n\n      // Second check if it's a checkbox, then we need a change listener.\n      if (button.dataset.ischeckbox) {\n        button.addEventListener('change', () => {\n\n          const data = button.dataset;\n          data.state = button.checked;\n\n          // eslint-disable-next-line no-console\n          console.log(data.state);\n\n          transmitAction(button.dataset.id, button.dataset.methodname,\n            JSON.stringify(data), idstring, encodedtable);\n        });\n      } else {\n        // Else it's a button, we attach the click listener.\n        button.addEventListener('click', async() => {\n\n          // Collect data from selection.\n          // This will either return an object with the ids (as array) and labels (as string) of the selection or an empty object.\n          var selectionresult = await getSelectionData(idstring, button.dataset);\n          // Button Data will either return as int (1 for true) as bool, or as \"true\" string. We want all cases to return true.\n          if (button.dataset.selectionmandatory == \"1\"\n          || button.dataset.selectionmandatory == true\n          || button.dataset.selectionmandatory == \"true\") {\n            var selectionmandatory = true;\n          }\n          // eslint-disable-next-line block-scoped-var\n          if (selectionmandatory && selectionresult.checkedids.length < 1) {\n            showNoCheckboxNotification();\n            // If selection is mandatory and there is no selection, no call will be executed.\n            return;\n          } else if (button.dataset.nomodal === 'true' || button.dataset.nomodal === \"1\") {\n            // If nomodal is set true, action will be triggerd immediately.\n            chooseActionToTransmit(button, idstring, encodedtable, selectionresult);\n          } else {\n            showConfirmationModal(button, idstring, encodedtable, selectionresult);\n            // Modal will trigger Action to Transmit\n          }\n        });\n      }\n      // If it's not a methodname, we might have a form name a need to attach the right listener.\n    } else if (button.dataset.formname && button.dataset.formname.length > 0) {\n      button.addEventListener('click', e => {\n        const target = e.target;\n        // eslint-disable-next-line no-console\n        console.log('transmit data', target);\n        let title = 'title';\n        if (target.dataset.title !== undefined) {\n          title = target.dataset.title;\n        }\n        showEditFormModal(button, title, 'body', 'button', idstring, encodedtable);\n      });\n    }\n  });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {*} result\n */\nasync function showConfirmationModal(button, idstring, encodedtable, result) {\n\n  // Checking if we have data from selection result. Otherwise generating default string for body.\n  let datastring = result.labelstring ?? '';\n  let strings = [];\n  if (result.labelstring.length > 0) {\n    strings = [\n      {\n        key: button.dataset.titlestring ?? 'generictitle',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.bodystring ?? 'genericbody',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n        param: {\n          data: datastring,\n        },\n      },\n      {\n        key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n    ];\n  } else {\n    strings = [\n      {\n        key: button.dataset.titlestring ?? 'generictitle',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.noselectionbodystring ?? 'noselectionbody',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n    ];\n  }\n\n  const localizedstrings = await getStrings(strings);\n\n  ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n    modal.setTitle(localizedstrings[0]);\n    modal.setBody(localizedstrings[1]);\n    modal.setSaveButtonText(localizedstrings[2]);\n    modal.getRoot().on(ModalEvents.save, function() {\n      chooseActionToTransmit(button, idstring, encodedtable, result);\n    });\n    modal.show();\n    return modal;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n}\n\n\n/**\n * Function to collect the ids, check if selection of ids is mandatory and prepare a string of selected lables.\n * @param {*} idstring\n * @param {*} data //the dataset of the button that triggerd the action.\n * @returns {object}\n */\nasync function getSelectionData(idstring, data) {\n\n  // First we collect the checked boxes.\n  const result = getIds(data.id, idstring, data);\n  const checkedids = result.checkedids;\n\n  const labelarray = result.labelarray;\n\n  const datastring = labelarray.join('<br>') ?? '';\n\n  return {\n    'checkedids': checkedids,\n    'labelstring': datastring,\n  };\n}\n\n/**\n *  If no boxes are checked, we will send out a notification.\n */\nasync function showNoCheckboxNotification() {\n  const message = await getString('nocheckboxchecked', 'local_wunderbyte_table');\n  showNotification(message, \"danger\");\n\n}\n\n/**\n * Ajax function to handle action buttons.\n * @param {int} id\n * @param {string} methodname\n * @param {string} datastring\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport function transmitAction(id, methodname, datastring, idstring, encodedtable) {\n  Ajax.call([{\n    methodname: \"local_wunderbyte_table_execute_action\",\n    args: {\n      'id': parseInt(id),\n      'methodname': methodname,\n      'data': datastring,\n      'encodedtable': encodedtable,\n    },\n    done: function(data) {\n\n      if (data.success == 1) {\n        if (data.message.length > 0) {\n          showNotification(data.message, \"success\");\n        }\n      } else {\n        showNotification(data.message, \"danger\");\n      }\n      reloadAllTables();\n\n      // We check if the table is within a modal and if so, we make sure that this modal...\n      // Stays scrollable by making sure that the body keeps the modal-open class.\n      const container = document.querySelector('#a' + idstring);\n      if (container.closest(\".modal-dialog\")) {\n        let body = container.closest(\"body\");\n        body.classList.add(\"modal-open\");\n      }\n    },\n    fail: function(ex) {\n      // eslint-disable-next-line no-console\n      console.log(\"ex:\" + ex);\n\n      showNotification(\"row \" + id + \" was not treated\", \"danger\");\n    },\n  }]);\n}\n\n/**\n * Function to collect checked idboxes.\n * @param {*} id\n * @param {*} idstring\n * @param {*} data\n * @returns {object}\n */\nfunction getIds(id, idstring, data) {\n\n  var checkedids = [];\n\n  const labelarray = [];\n  const container = document.querySelector('#a' + idstring);\n\n  // If the id is 0, we return for all checked checkboxes.\n  // if not, just for the current one.\n\n  // Make sure we treat id as int.\n  id = parseInt(id);\n  if (id < 1) {\n\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOX);\n\n    // Create an array of ids of the checked boxes.\n    checkboxes.forEach(x => {\n\n      if (x.checked) {\n\n        // We don't need the id of the checkbox, but the data-id of the row.\n\n        const id = x.closest('tr').dataset.id;\n\n        labelarray.push(returnLabel(id, data.labelcolumn, container));\n        checkedids.push(id);\n      }\n    });\n\n  } else {\n    labelarray.push(returnLabel(id, data.labelcolumn, container));\n    checkedids.push(id);\n  }\n  return {\n    'checkedids': checkedids,\n    'labelarray': labelarray,\n  };\n\n  /**\n   * Function to return label name or id if no name available.\n   * @param {*} id\n   * @param {*} label\n   * @param {*} container\n   * @returns {String}\n   */\n  function returnLabel(id, label, container) {\n    try {\n      const name = container.querySelector('[data-id=\"' + id + '\"] [data-label=\"' + label + '\"]').textContent;\n      return name;\n    } catch (e) {\n      return '' + id;\n    }\n  }\n}\n\n/**\n *\n * @param {*} button\n * @param {*} titleText\n * @param {*} bodyText\n * @param {*} saveButtonText\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction showEditFormModal(button, titleText, bodyText, saveButtonText, idstring, encodedtable) {\n\n  // eslint-disable-next-line no-console\n  console.log(button, bodyText, saveButtonText, idstring, encodedtable);\n\n  const formname = button.dataset.formname;\n  let data = button.dataset;\n  data.id = button.dataset.id; // Get all the data of the clicked button.\n\n  if (data.id == -1) {\n    const result = getIds(data.id, idstring, data);\n    data.checkedids = result.checkedids;\n  }\n  // eslint-disable-next-line no-console\n  console.log(data);\n\n  let modalForm = new ModalForm({\n    // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n    formClass: formname,\n    // Add as many arguments as you need, they will be passed to the form:\n    args: data,\n    // Pass any configuration settings to the modal dialogue, for example, the title:\n    modalConfig: {title: titleText},\n    // DOM element that should get the focus after the modal dialogue is closed:\n    returnFocus: button,\n  });\n\n  // Listen to events if you want to execute something on form submit.\n  // Event detail will contain everything the process() function returned:\n  modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n\n    // eslint-disable-next-line no-console\n    console.log(e.detail);\n\n    reloadAllTables();\n  });\n\n  // Show the form.\n  modalForm.show();\n}\n\n/**\n * Case decision between call without selection, single call or multiple call triggering transmit action.\n * @param {string} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {object} selectionresult\n */\nfunction chooseActionToTransmit(button, idstring, encodedtable, selectionresult) {\n  const data = button.dataset;\n  const id = parseInt(button.dataset.id);\n  const methodname = button.dataset.methodname;\n  const checkedids = selectionresult.checkedids ?? [];\n  // Checkedids will either be ['id1', 'id2', ...] or [] if no selection was made.\n\n  if (checkedids.length === 0) {\n    // eslint-disable-next-line no-console\n    console.log(\"no ids checked\");\n    transmitAction(button.dataset.id,\n      button.dataset.methodname,\n      JSON.stringify(button.dataset), idstring, encodedtable);\n      return;\n  }\n\n  if (id != 0) { // -1 means we want single line execution.\n        // eslint-disable-next-line no-console\n        console.log(\"single call\");\n    transmitAction(id, methodname, JSON.stringify({...data, checkedids}), idstring, encodedtable);\n  } else {\n      // eslint-disable-next-line no-console\n      console.log(\"multiple call\");\n    checkedids.forEach(cid => {\n      transmitAction(cid, methodname, JSON.stringify(data), idstring, encodedtable);\n    });\n  }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","selector","idstring","encodedtable","container","document","querySelector","querySelectorAll","SELECTOR","ACTIONBUTTON","forEach","button","dataset","initialized","methodname","length","ischeckbox","addEventListener","data","state","checked","console","log","transmitAction","id","JSON","stringify","async","selectionresult","result","getIds","checkedids","datastring","labelarray","join","labelstring","getSelectionData","selectionmandatory","message","getString","showNotification","showNoCheckboxNotification","nomodal","chooseActionToTransmit","strings","key","titlestring","component","bodystring","param","submitbuttonstring","noselectionbodystring","localizedstrings","getStrings","get_strings","ModalFactory","create","type","types","SAVE_CANCEL","then","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","show","catch","e","showConfirmationModal","formname","target","title","undefined","titleText","bodyText","saveButtonText","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","detail","reloadAllTables","showEditFormModal","_modal_factory","_modal_events","_ajax","_modalform","CHECKBOX","Ajax","call","parseInt","done","success","closest","classList","add","fail","ex","x","push","returnLabel","labelcolumn","label","textContent","cid"],"mappings":"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"}