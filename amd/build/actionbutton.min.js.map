{"version":3,"file":"actionbutton.min.js","sources":["../src/actionbutton.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {showNotification} from 'local_wunderbyte_table/notifications';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {\n  get_strings as getStrings,\n  get_string as getString\n} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTOR = {\n  ACTIONBUTTON: '.wb_action_button',\n  CHECKBOX: 'input.wb-checkbox',\n};\n\n/**\n * Function to add click listener to action button.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\nexport function initializeActionButton(selector, idstring, encodedtable) {\n\n  const container = document.querySelector(selector);\n\n  if (!container) {\n    return;\n  }\n  const actionbuttons = container.querySelectorAll(SELECTOR.ACTIONBUTTON);\n\n  actionbuttons.forEach(button => {\n    if (button.dataset.initialized) {\n      return;\n    }\n\n    button.dataset.initialized = true;\n\n    // First check if we have a valid methodname.\n    if (button.dataset.methodname && button.dataset.methodname.length > 0) {\n\n      // Second check if it's a checkbox, then we need a change listener.\n      if (button.dataset.ischeckbox) {\n        button.addEventListener('change', () => {\n\n          const data = button.dataset;\n          data.state = button.checked;\n\n          // eslint-disable-next-line no-console\n          console.log(data.state);\n\n          transmitAction(button.dataset.id, button.dataset.methodname,\n            JSON.stringify(data), idstring, encodedtable);\n        });\n      } else {\n        // Else it's a button, we attach the click listener.\n        button.addEventListener('click', async() => {\n\n          // Collect data from selection.\n          // This will either return an object with the ids (as array) and labels (as string) of the selection or an empty object.\n          var selectionresult = await getSelectionData(idstring, button.dataset);\n          // Button Data will either return as int (1 for true) as bool, or as \"true\" string. We want all cases to return true.\n          if (button.dataset.selectionmandatory == \"1\"\n          || button.dataset.selectionmandatory == true\n          || button.dataset.selectionmandatory == \"true\") {\n            var selectionmandatory = true;\n          }\n          // eslint-disable-next-line block-scoped-var\n          if (selectionmandatory && selectionresult.checkedids.length < 1) {\n            showNoCheckboxNotification();\n            // If selection is mandatory and there is no selection, no call will be executed.\n            return;\n          } else if (button.dataset.nomodal === 'true' || button.dataset.nomodal === \"1\") {\n            // If nomodal is set true, action will be triggerd immediately.\n            chooseActionToTransmit(button, idstring, encodedtable, selectionresult);\n          } else {\n            showConfirmationModal(button, idstring, encodedtable, selectionresult);\n            // Modal will trigger Action to Transmit\n          }\n        });\n      }\n      // If it's not a methodname, we might have a form name a need to attach the right listener.\n    } else if (button.dataset.formname && button.dataset.formname.length > 0) {\n      button.addEventListener('click', e => {\n        const target = e.target;\n        // eslint-disable-next-line no-console\n        console.log('transmit data', target);\n        let title = 'title';\n        if (target.dataset.title !== undefined) {\n          title = target.dataset.title;\n        }\n        showEditFormModal(button, title, 'body', 'button', idstring, encodedtable);\n      });\n    }\n  });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {*} result\n */\nasync function showConfirmationModal(button, idstring, encodedtable, result) {\n\n  // Checking if we have data from selection result. Otherwise generating default string for body.\n  let datastring = result.labelstring ?? '';\n  let strings = [];\n  if (result.labelstring.length > 0) {\n    strings = [\n      {\n        key: button.dataset.titlestring ?? 'generictitle',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.bodystring ?? 'genericbody',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n        param: {\n          data: datastring,\n        },\n      },\n      {\n        key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n    ];\n  } else {\n    strings = [\n      {\n        key: button.dataset.titlestring ?? 'generictitle',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.noselectionbodystring ?? 'noselectionbody',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n      {\n        key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n        component: button.dataset.component ?? 'local_wunderbyte_table',\n      },\n    ];\n  }\n\n  const localizedstrings = await getStrings(strings);\n\n  ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n    modal.setTitle(localizedstrings[0]);\n    modal.setBody(localizedstrings[1]);\n    modal.setSaveButtonText(localizedstrings[2]);\n    modal.getRoot().on(ModalEvents.save, function() {\n      chooseActionToTransmit(button, idstring, encodedtable, result);\n    });\n    modal.show();\n    return modal;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n}\n\n\n/**\n * Function to collect the ids, check if selection of ids is mandatory and prepare a string of selected lables.\n * @param {*} idstring\n * @param {*} data //the dataset of the button that triggerd the action.\n * @returns {object}\n */\nasync function getSelectionData(idstring, data) {\n\n  // First we collect the checked boxes.\n  const result = getIds(data.id, idstring, data);\n  const checkedids = result.checkedids;\n\n  const labelarray = result.labelarray;\n\n  const datastring = labelarray.join('<br>') ?? '';\n\n  return {\n    'checkedids': checkedids,\n    'labelstring': datastring,\n  };\n}\n\n/**\n *  If no boxes are checked, we will send out a notification.\n */\nasync function showNoCheckboxNotification() {\n  const message = await getString('nocheckboxchecked', 'local_wunderbyte_table');\n  showNotification(message, \"danger\");\n\n}\n\n/**\n * Ajax function to handle action buttons.\n * @param {int} id\n * @param {string} methodname\n * @param {string} datastring\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport function transmitAction(id, methodname, datastring, idstring, encodedtable) {\n\n  // Show the call spinner.\n  let callspinner = document.querySelector(\".wunderbyte_table_container_\" + idstring + \" .wb-table-call-spinner\");\n  if (callspinner) {\n      callspinner.classList.remove('hidden');\n  }\n\n  Ajax.call([{\n    methodname: \"local_wunderbyte_table_execute_action\",\n    args: {\n      'id': parseInt(id),\n      'methodname': methodname,\n      'data': datastring,\n      'encodedtable': encodedtable,\n    },\n    done: function(data) {\n      // Hide the call spinner.\n      let callspinner = document.querySelector(\".wunderbyte_table_container_\" + idstring + \" .wb-table-call-spinner\");\n      if (callspinner) {\n          callspinner.classList.add('hidden');\n      }\n\n      if (data.success == 1) {\n\n        if (data.reload > 0) {\n          window.location.reload();\n        }\n        if (data.message.length > 0) {\n          showNotification(data.message, \"success\");\n        }\n      } else {\n        showNotification(data.message, \"danger\");\n      }\n\n      reloadAllTables();\n\n      // We check if the table is within a modal and if so, we make sure that this modal...\n      // Stays scrollable by making sure that the body keeps the modal-open class.\n      const container = document.querySelector('#a' + idstring);\n      if (container.closest(\".modal-dialog\")) {\n        let body = container.closest(\"body\");\n        body.classList.add(\"modal-open\");\n      }\n    },\n    fail: function(ex) {\n      // eslint-disable-next-line no-console\n      console.log(\"ex:\" + ex);\n\n      // Hide the call spinner.\n      let callspinner = document.querySelector(\".wunderbyte_table_container_\" + idstring + \" .wb-table-call-spinner\");\n      if (callspinner) {\n          callspinner.classList.add('hidden');\n      }\n\n      showNotification(\"row \" + id + \" was not treated\", \"danger\");\n    },\n  }]);\n}\n\n/**\n * Function to collect checked idboxes.\n * @param {*} id\n * @param {*} idstring\n * @param {*} data\n * @returns {object}\n */\nfunction getIds(id, idstring, data) {\n\n  var checkedids = [];\n\n  const labelarray = [];\n  const container = document.querySelector('#a' + idstring);\n\n  // If the id is 0, we return for all checked checkboxes.\n  // if not, just for the current one.\n\n  // Make sure we treat id as int.\n  id = parseInt(id);\n  if (id < 1) {\n\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOX);\n\n    // Create an array of ids of the checked boxes.\n    checkboxes.forEach(x => {\n\n      if (x.checked) {\n\n        // We don't need the id of the checkbox, but the data-id of the row.\n\n        const id = x.closest('tr').dataset.id;\n\n        labelarray.push(returnLabel(id, data.labelcolumn, container));\n        checkedids.push(id);\n      }\n    });\n\n  } else {\n    labelarray.push(returnLabel(id, data.labelcolumn, container));\n    checkedids.push(id);\n  }\n  return {\n    'checkedids': checkedids,\n    'labelarray': labelarray,\n  };\n\n  /**\n   * Function to return label name or id if no name available.\n   * @param {*} id\n   * @param {*} label\n   * @param {*} container\n   * @returns {String}\n   */\n  function returnLabel(id, label, container) {\n    try {\n      const name = container.querySelector('[data-id=\"' + id + '\"] [data-label=\"' + label + '\"]').textContent;\n      return name;\n    } catch (e) {\n      return '' + id;\n    }\n  }\n}\n\n/**\n *\n * @param {*} button\n * @param {*} titleText\n * @param {*} bodyText\n * @param {*} saveButtonText\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction showEditFormModal(button, titleText, bodyText, saveButtonText, idstring, encodedtable) {\n\n  // eslint-disable-next-line no-console\n  console.log(button, bodyText, saveButtonText, idstring, encodedtable);\n\n  const formname = button.dataset.formname;\n  let data = button.dataset;\n  data.id = button.dataset.id; // Get all the data of the clicked button.\n\n  if (data.id == -1) {\n    const result = getIds(data.id, idstring, data);\n    data.checkedids = result.checkedids;\n  }\n  // eslint-disable-next-line no-console\n  console.log(data);\n\n  let modalForm = new ModalForm({\n    // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n    formClass: formname,\n    // Add as many arguments as you need, they will be passed to the form:\n    args: data,\n    // Pass any configuration settings to the modal dialogue, for example, the title:\n    modalConfig: {title: titleText},\n    // DOM element that should get the focus after the modal dialogue is closed:\n    returnFocus: button,\n  });\n\n  // Listen to events if you want to execute something on form submit.\n  // Event detail will contain everything the process() function returned:\n  modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n\n    // eslint-disable-next-line no-console\n    console.log(e.detail);\n\n    if (e.detail.reload) {\n      // Reload whole site.\n      window.location.reload();\n    } else {\n      reloadAllTables();\n    }\n  });\n\n  // Show the form.\n  modalForm.show();\n}\n\n/**\n * Case decision between call without selection, single call or multiple call triggering transmit action.\n * @param {string} button\n * @param {string} idstring\n * @param {string} encodedtable\n * @param {object} selectionresult\n */\nfunction chooseActionToTransmit(button, idstring, encodedtable, selectionresult) {\n  const data = button.dataset;\n  const id = parseInt(button.dataset.id);\n  const methodname = button.dataset.methodname;\n  const checkedids = selectionresult.checkedids ?? [];\n  // Checkedids will either be ['id1', 'id2', ...] or [] if no selection was made.\n\n  if (checkedids.length === 0) {\n    // eslint-disable-next-line no-console\n    console.log(\"no ids checked\");\n    transmitAction(button.dataset.id,\n      button.dataset.methodname,\n      JSON.stringify(button.dataset), idstring, encodedtable);\n      return;\n  }\n\n  if (id != 0) { // -1 means we want single line execution.\n        // eslint-disable-next-line no-console\n        console.log(\"single call\");\n    transmitAction(id, methodname, JSON.stringify({...data, checkedids}), idstring, encodedtable);\n  } else {\n      // eslint-disable-next-line no-console\n      console.log(\"multiple call\");\n    checkedids.forEach(cid => {\n      transmitAction(cid, methodname, JSON.stringify(data), idstring, encodedtable);\n    });\n  }\n}\n"],"names":["selector","idstring","encodedtable","container","document","querySelector","querySelectorAll","SELECTOR","forEach","button","dataset","initialized","methodname","length","ischeckbox","addEventListener","data","state","checked","console","log","transmitAction","id","JSON","stringify","async","selectionresult","result","getIds","checkedids","datastring","labelarray","join","getSelectionData","selectionmandatory","message","showNoCheckboxNotification","nomodal","chooseActionToTransmit","labelstring","strings","key","titlestring","component","bodystring","param","submitbuttonstring","noselectionbodystring","localizedstrings","create","type","ModalFactory","types","SAVE_CANCEL","then","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","show","catch","e","showConfirmationModal","formname","target","title","undefined","titleText","bodyText","saveButtonText","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","detail","reload","window","location","showEditFormModal","callspinner","classList","remove","call","parseInt","done","add","success","closest","fail","ex","x","push","returnLabel","labelcolumn","label","textContent","cid"],"mappings":"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"}