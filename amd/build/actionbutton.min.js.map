{"version":3,"file":"actionbutton.min.js","sources":["../src/actionbutton.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {showNotification} from 'local_wunderbyte_table/notifications';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {get_strings as getStrings} from 'core/str';\n\nconst SELECTOR = {\n  ACTIONBUTTON: '.wb_action_button',\n  CHECKBOX: 'input.wb-checkbox',\n};\n\n/**\n * Function to add click listener to acton button.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\n export function initializeActionButton(selector, idstring, encodedtable) {\n\n      const container = document.querySelector(selector);\n      const actionbuttons = container.querySelectorAll(SELECTOR.ACTIONBUTTON);\n\n      // eslint-disable-next-line no-console\n      console.log('initializeActionButton', container, actionbuttons);\n\n      actionbuttons.forEach(button => {\n          if (button.dataset.initialized) {\n            return;\n          }\n\n          if (button.dataset.methodname.length === 0) {\n            return;\n          }\n\n          button.dataset.initialized = true;\n\n          button.addEventListener('click', e => {\n\n            const target = e.target;\n\n            // eslint-disable-next-line no-console\n            console.log('transmit data', target);\n\n            showConfirmationModal(button, 'title', 'body', 'button', idstring, encodedtable);\n          });\n      });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} button\n * @param {string} titleText\n * @param {string} bodyText\n * @param {string} saveButtonText\n * @param {string} idstring\n * @param {string} encodedtable\n */\nasync function showConfirmationModal(button, titleText, bodyText, saveButtonText, idstring, encodedtable) {\n\n  const id = button.dataset.id;\n  const methodname = button.dataset.methodname;\n  const data = button.dataset; // Get all the data of the clicked button.\n\n  var checkedids = [];\n  const labelarray = [];\n\n  // If the id is 0, we return for all checked checkboxes.\n  // if not, just for the current one.\n  if (id < 1) {\n    const container = document.querySelector('#a' + idstring);\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOX);\n    // eslint-disable-next-line no-console\n    console.log(SELECTOR.CHECKBOX, checkboxes);\n\n    // Create an array of ids of the checked boxes.\n    checkboxes.forEach(x => {\n\n        // eslint-disable-next-line no-console\n        console.log(x.id, data.labelcolumn);\n\n        if (x.checked) {\n\n          try {\n            const name = container.querySelector('[data-id=\"' + x.id + '\"] [data-label=\"' + data.labelcolumn + '\"]').textContent;\n            labelarray.push(name);\n          } catch (e) {\n            labelarray.push(x.id);\n          }\n\n          checkedids.push(x.id);\n      }\n    });\n\n    data.checkedids = checkedids;\n  } else {\n    checkedids = [id];\n  }\n\n  const datastring = labelarray.join('<br>') ?? '';\n\n  // eslint-disable-next-line no-console\n  console.log(datastring, checkedids);\n\n  let strings = [\n    {\n      key: button.dataset.titlestring ?? 'generictitle',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n    },\n    {\n      key: button.dataset.bodystring ?? 'genericbody',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n      param: {\n        // eslint-disable-next-line block-scoped-var\n        data: datastring,\n      }\n    },\n    {\n      key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n    },\n  ];\n\n  // eslint-disable-next-line no-console\n  console.log(strings);\n\n  const localizedstrings = await getStrings(strings);\n\n  // eslint-disable-next-line no-console\n  console.log(localizedstrings);\n\n  ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n    modal.setTitle(localizedstrings[0]);\n        modal.setBody(localizedstrings[1]);\n        modal.setSaveButtonText(localizedstrings[2]);\n        modal.getRoot().on(ModalEvents.save, function() {\n\n            // If there is only one id, we transmit one call.\n            if (id != 0) {\n              transmitAction(id, methodname, JSON.stringify(data), idstring, encodedtable);\n            } else { // Zero means we want single line execution.\n              // eslint-disable-next-line block-scoped-var\n              checkedids.forEach(cid => {\n                transmitAction(cid, methodname, JSON.stringify(data), idstring, encodedtable);\n              });\n            }\n        });\n\n        modal.show();\n        return modal;\n  }).catch(e => {\n      // eslint-disable-next-line no-console\n      console.log(e);\n  });\n}\n\n/**\n * Ajax function to handle action buttons.\n * @param {int} id\n * @param {string} methodname\n * @param {string} datastring\n * @param {string} idstring\n * @param {string} encodedtable\n */\nfunction transmitAction(id, methodname, datastring, idstring, encodedtable) {\n  Ajax.call([{\n    methodname: \"local_wunderbyte_table_execute_action\",\n    args: {\n        'id': parseInt(id),\n        'methodname': methodname,\n        'data': datastring,\n        'encodedtable': encodedtable,\n    },\n    done: function(data) {\n\n        if (data.success == 1) {\n          // eslint-disable-next-line no-console\n          console.log('success');\n          showNotification(data.message, \"success\");\n        } else {\n          showNotification(data.message, \"danger\");\n        }\n        reloadAllTables();\n\n\n    },\n    fail: function(ex) {\n        // eslint-disable-next-line no-console\n        console.log(\"ex:\" + ex);\n    },\n}]);\n}"],"names":["selector","idstring","encodedtable","container","document","querySelector","actionbuttons","querySelectorAll","SELECTOR","console","log","forEach","button","dataset","initialized","methodname","length","addEventListener","e","target","titleText","bodyText","saveButtonText","id","data","checkedids","labelarray","checkboxes","x","labelcolumn","checked","name","textContent","push","datastring","join","strings","key","titlestring","component","bodystring","param","submitbuttonstring","localizedstrings","create","type","ModalFactory","types","SAVE_CANCEL","then","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","transmitAction","JSON","stringify","cid","show","catch","showConfirmationModal","call","args","parseInt","done","success","message","fail","ex"],"mappings":";;;;;sGAyCwCA,SAAUC,SAAUC,oBAEhDC,UAAYC,SAASC,cAAcL,UACnCM,cAAgBH,UAAUI,iBAAiBC,uBAGjDC,QAAQC,IAAI,yBAA0BP,UAAWG,eAEjDA,cAAcK,SAAQC,SACdA,OAAOC,QAAQC,aAIsB,IAArCF,OAAOC,QAAQE,WAAWC,SAI9BJ,OAAOC,QAAQC,aAAc,EAE7BF,OAAOK,iBAAiB,SAASC,UAEzBC,OAASD,EAAEC,OAGjBV,QAAQC,IAAI,gBAAiBS,uBAgBJP,OAAQQ,UAAWC,SAAUC,eAAgBrB,SAAUC,+KAEpFqB,GAAKX,OAAOC,QAAQU,GACpBR,WAAaH,OAAOC,QAAQE,WAC5BS,KAAOZ,OAAOC,YAEhBY,WAAa,SACXC,WAAa,MAIfH,GAAK,EAAG,OACJpB,UAAYC,SAASC,cAAc,KAAOJ,UAC1C0B,WAAaxB,UAAUI,iBAAiBC,mBAE9CC,QAAQC,IAAIF,kBAAmBmB,YAG/BA,WAAWhB,SAAQiB,OAGfnB,QAAQC,IAAIkB,EAAEL,GAAIC,KAAKK,aAEnBD,EAAEE,QAAS,WAGLC,KAAO5B,UAAUE,cAAc,aAAeuB,EAAEL,GAAK,mBAAqBC,KAAKK,YAAc,MAAMG,YACzGN,WAAWO,KAAKF,MAChB,MAAOb,GACPQ,WAAWO,KAAKL,EAAEL,IAGpBE,WAAWQ,KAAKL,EAAEL,QAIxBC,KAAKC,WAAaA,gBAElBA,WAAa,CAACF,UAGVW,oCAAaR,WAAWS,KAAK,qDAAW,GAG9C1B,QAAQC,IAAIwB,WAAYT,gBAEpBW,QAAU,CACZ,CACEC,kCAAKzB,OAAOC,QAAQyB,mEAAe,eACnCC,wCAAW3B,OAAOC,QAAQ0B,iEAAa,0BAEzC,CACEF,kCAAKzB,OAAOC,QAAQ2B,kEAAc,cAClCD,yCAAW3B,OAAOC,QAAQ0B,mEAAa,yBACvCE,MAAO,CAELjB,KAAMU,aAGV,CACEG,kCAAKzB,OAAOC,QAAQ6B,0EAAsB,gBAC1CH,yCAAW3B,OAAOC,QAAQ0B,mEAAa,2BAK3C9B,QAAQC,IAAI0B,eAENO,uBAAyB,oBAAWP,SAG1C3B,QAAQC,IAAIiC,yCAECC,OAAO,CAACC,KAAMC,uBAAaC,MAAMC,cAAcC,MAAKC,QAE/DA,MAAMC,SAASR,iBAAiB,IAC5BO,MAAME,QAAQT,iBAAiB,IAC/BO,MAAMG,kBAAkBV,iBAAiB,IACzCO,MAAMI,UAAUC,GAAGC,sBAAYC,MAAM,WAGvB,GAANlC,GACFmC,eAAenC,GAAIR,WAAY4C,KAAKC,UAAUpC,MAAOvB,SAAUC,cAG/DuB,WAAWd,SAAQkD,MACjBH,eAAeG,IAAK9C,WAAY4C,KAAKC,UAAUpC,MAAOvB,SAAUC,oBAKxEgD,MAAMY,OACCZ,SACVa,OAAM7C,IAELT,QAAQC,IAAIQ,MA7GN8C,CAAsBpD,OAAQ,EAAS,EAAQ,EAAUX,SAAUC,0KAtCzEM,sBACU,oBADVA,kBAEM,6BA6JHkD,eAAenC,GAAIR,WAAYmB,WAAYjC,SAAUC,4BACvD+D,KAAK,CAAC,CACTlD,WAAY,wCACZmD,KAAM,IACIC,SAAS5C,eACDR,gBACNmB,wBACQhC,cAEpBkE,KAAM,SAAS5C,MAES,GAAhBA,KAAK6C,SAEP5D,QAAQC,IAAI,+CACKc,KAAK8C,QAAS,gDAEd9C,KAAK8C,QAAS,yCAMrCC,KAAM,SAASC,IAEX/D,QAAQC,IAAI,MAAQ8D"}