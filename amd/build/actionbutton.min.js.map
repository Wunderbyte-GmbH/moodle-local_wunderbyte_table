{"version":3,"file":"actionbutton.min.js","sources":["../src/actionbutton.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport {showNotification} from 'local_wunderbyte_table/notifications';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\nimport {get_strings as getStrings,\n        get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTOR = {\n  ACTIONBUTTON: '.wb_action_button',\n  CHECKBOX: 'input.wb-checkbox',\n};\n\n/**\n * Function to add click listener to acton button.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n * @returns {void}\n */\n export function initializeActionButton(selector, idstring, encodedtable) {\n\n      const container = document.querySelector(selector);\n      const actionbuttons = container.querySelectorAll(SELECTOR.ACTIONBUTTON);\n\n      // eslint-disable-next-line no-console\n      console.log('actionbuttons', actionbuttons);\n\n      actionbuttons.forEach(button => {\n          if (button.dataset.initialized) {\n            return;\n          }\n\n          button.dataset.initialized = true;\n\n          if (button.dataset.methodname && button.dataset.methodname.length > 0) {\n            button.addEventListener('click', e => {\n\n              const target = e.target;\n              // eslint-disable-next-line no-console\n              console.log('transmit data', target);\n              if (button.dataset.nomodal && button.dataset.id > 0) {\n\n                transmitAction(button.dataset.id,\n                  button.dataset.methodname,\n                  JSON.stringify(button.dataset), idstring, encodedtable);\n              } else {\n                showConfirmationModal(button, idstring, encodedtable);\n              }\n            });\n          } else if (button.dataset.formname && button.dataset.formname.length > 0) {\n            button.addEventListener('click', e => {\n              const target = e.target;\n              // eslint-disable-next-line no-console\n              console.log('transmit data', target);\n              showEditFormModal(button, 'title', 'body', 'button', idstring, encodedtable);\n            });\n          }\n      });\n}\n\n/**\n * Shows generic confirmation modal.\n * @param {*} button\n * @param {string} idstring\n * @param {string} encodedtable\n */\nasync function showConfirmationModal(button, idstring, encodedtable) {\n\n  const id = button.dataset.id;\n  const methodname = button.dataset.methodname;\n  const data = button.dataset; // Get all the data of the clicked button.\n\n  const result = getIds(id, idstring, data);\n\n  var checkedids = result.checkedids;\n  const labelarray = result.labelarray;\n\n  if (checkedids.length < 1) {\n    const message = await getString('nocheckboxchecked', 'local_wunderbyte_table');\n    showNotification(message, \"danger\");\n    return;\n  }\n\n  const datastring = labelarray.join('<br>') ?? '';\n\n  let strings = [\n    {\n      key: button.dataset.titlestring ?? 'generictitle',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n    },\n    {\n      key: button.dataset.bodystring ?? 'genericbody',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n      param: {\n        // eslint-disable-next-line block-scoped-var\n        data: datastring,\n      }\n    },\n    {\n      key: button.dataset.submitbuttonstring ?? 'genericsubmit',\n      component: button.dataset.component ?? 'local_wunderbyte_table',\n    },\n  ];\n\n  const localizedstrings = await getStrings(strings);\n\n  ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n    modal.setTitle(localizedstrings[0]);\n        modal.setBody(localizedstrings[1]);\n        modal.setSaveButtonText(localizedstrings[2]);\n        modal.getRoot().on(ModalEvents.save, function() {\n\n            // If there is only one id, we transmit one call.\n            if (id != 0) {\n              transmitAction(id, methodname, JSON.stringify(data), idstring, encodedtable);\n            } else { // Zero means we want single line execution.\n              // eslint-disable-next-line block-scoped-var\n              checkedids.forEach(cid => {\n                transmitAction(cid, methodname, JSON.stringify(data), idstring, encodedtable);\n              });\n            }\n        });\n\n        modal.show();\n        return modal;\n  }).catch(e => {\n      // eslint-disable-next-line no-console\n      console.log(e);\n  });\n}\n\n/**\n * Ajax function to handle action buttons.\n * @param {int} id\n * @param {string} methodname\n * @param {string} datastring\n * @param {string} idstring\n * @param {string} encodedtable\n */\nfunction transmitAction(id, methodname, datastring, idstring, encodedtable) {\n  Ajax.call([{\n    methodname: \"local_wunderbyte_table_execute_action\",\n    args: {\n        'id': parseInt(id),\n        'methodname': methodname,\n        'data': datastring,\n        'encodedtable': encodedtable,\n    },\n    done: function(data) {\n\n        if (data.success == 1) {\n\n          showNotification(data.message, \"success\");\n        } else {\n          showNotification(data.message, \"danger\");\n        }\n        reloadAllTables();\n\n\n    },\n    fail: function(ex) {\n        // eslint-disable-next-line no-console\n        console.log(\"ex:\" + ex);\n    },\n}]);\n}\n\n/**\n * Function to collect checked idboxes.\n * @param {*} id\n * @param {*} idstring\n * @param {*} data\n * @returns {object}\n */\nfunction getIds(id, idstring, data) {\n\n  var checkedids = [];\n  const labelarray = [];\n\n  // If the id is 0, we return for all checked checkboxes.\n  // if not, just for the current one.\n  if (id < 1) {\n    const container = document.querySelector('#a' + idstring);\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOX);\n\n    // Create an array of ids of the checked boxes.\n    checkboxes.forEach(x => {\n\n        if (x.checked) {\n\n          try {\n            const name = container.querySelector('[data-id=\"' + x.id + '\"] [data-label=\"' + data.labelcolumn + '\"]').textContent;\n            labelarray.push(name);\n          } catch (e) {\n            labelarray.push(x.id);\n          }\n\n          checkedids.push(x.id);\n      }\n    });\n\n    data.checkedids = checkedids;\n  } else {\n    checkedids = [id];\n  }\n\n  return {\n    'checkedids': checkedids,\n    'labelarray': labelarray,\n  };\n}\n\n/**\n *\n * @param {*} button\n * @param {*} titleText\n * @param {*} bodyText\n * @param {*} saveButtonText\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction showEditFormModal(button, titleText, bodyText, saveButtonText, idstring, encodedtable) {\n\n  // eslint-disable-next-line no-console\n  console.log(button, bodyText, saveButtonText, idstring, encodedtable);\n\n  const formname = button.dataset.formname;\n  let data = button.dataset;\n  data.id = button.dataset.id; // Get all the data of the clicked button.\n\n  // eslint-disable-next-line no-console\n  console.log(data);\n\n  let modalForm = new ModalForm({\n      // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n      formClass: formname,\n      // Add as many arguments as you need, they will be passed to the form:\n      args: data,\n      // Pass any configuration settings to the modal dialogue, for example, the title:\n      modalConfig: {title: titleText},\n      // DOM element that should get the focus after the modal dialogue is closed:\n      returnFocus: button,\n  });\n\n  // Listen to events if you want to execute something on form submit.\n  // Event detail will contain everything the process() function returned:\n  modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n\n    // eslint-disable-next-line no-console\n    console.log(e.detail);\n\n    reloadAllTables();\n  });\n\n  // Show the form.\n  modalForm.show();\n}\n"],"names":["selector","idstring","encodedtable","actionbuttons","document","querySelector","querySelectorAll","SELECTOR","console","log","forEach","button","dataset","initialized","methodname","length","addEventListener","e","target","nomodal","id","transmitAction","JSON","stringify","data","result","checkedids","labelarray","container","x","checked","name","labelcolumn","textContent","push","getIds","message","datastring","join","strings","key","titlestring","component","bodystring","param","submitbuttonstring","localizedstrings","create","type","ModalFactory","types","SAVE_CANCEL","then","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","cid","show","catch","showConfirmationModal","formname","titleText","bodyText","saveButtonText","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","detail","showEditFormModal","call","parseInt","done","success","fail","ex"],"mappings":"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"}