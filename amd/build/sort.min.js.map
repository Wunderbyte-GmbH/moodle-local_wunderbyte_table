{"version":3,"file":"sort.min.js","sources":["../src/sort.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {callLoadData} from 'local_wunderbyte_table/init';\nimport {getFilterObjects} from 'local_wunderbyte_table/filter';\nimport {getSearchInput} from 'local_wunderbyte_table/search';\n\nconst SELECTOR = {\n  SORTCOLUMN: 'select.sortcolumn',\n  CHANGESORTORDER: 'a.changesortorder',\n  TABLECOLUMN: 'th.wb-table-column',\n  WBCONTAINER: \".wunderbyte_table_container_\",\n  CHECKBOXES: 'input.wb-checkbox',\n  TABLEHEADERCHECKBOX: 'input.tableheadercheckbox',\n};\n\nconst SORT_ASC = 4;\nconst SORT_DESC = 3;\n\n/**\n * Function to initialize the search after rendering the searchbox.\n * @param {*} listContainer\n * @param {*} idstring\n * @param {*} encodedtable\n * @returns {void}\n */\n export function initializeSort(listContainer, idstring, encodedtable) {\n\n    const container = document.querySelector(listContainer);\n\n    if (!container) {\n      return;\n    }\n\n    const sortColumnElement = container.querySelector(SELECTOR.SORTCOLUMN);\n\n    const sortOrderElement = container.querySelector(SELECTOR.CHANGESORTORDER);\n\n    initializeSortColumns(listContainer, idstring, encodedtable);\n\n    if (!sortColumnElement || !sortOrderElement) {\n\n        return;\n    }\n\n    if (!sortColumnElement.dataset.initialized || !sortOrderElement.dataset.initialized) {\n\n      sortColumnElement.dataset.initialized = true;\n      sortOrderElement.dataset.initialized = true;\n\n      // We add two listener, one on the select, one on the sortorder button.\n\n      sortColumnElement.addEventListener('change', (e) => {\n        callSortAjax(e, idstring, encodedtable);\n      });\n      sortOrderElement.addEventListener('click', () => {\n        callSortAjax(null, idstring, encodedtable);\n      });\n    }\n}\n\n/**\n * Initialize Sort Columns in list table.\n * @param {*} listContainer\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function initializeSortColumns(listContainer, idstring, encodedtable) {\n\n  const container = document.querySelector(listContainer);\n\n  const sortColumnHeaders = container.querySelectorAll(SELECTOR.TABLECOLUMN);\n\n  // Add the listeners to column headers.\n  sortColumnHeaders.forEach(element => {\n    if (element.dataset.initialized) {\n      return;\n    }\n    element.dataset.initialized = true;\n\n    element.addEventListener('click', e => {\n\n      let columnname = element.dataset.columnname;\n\n      switch (columnname) {\n        // In case we are in the checkboxes column...\n        case 'wbcheckbox':\n          // Checking if checkbox in table header is checked.\n          var checked = container.querySelector(SELECTOR.TABLEHEADERCHECKBOX).checked;\n\n          // Applying state of header checkbox to checkboxes in table.\n          selectAllCheckboxes(idstring, checked);\n          e.target.dataset.checked = checked;\n          break;\n        default:\n          if (element.dataset.sortable) {\n          callSortAjax(columnname, idstring, encodedtable);\n          }\n      }\n    }\n    );\n  });\n}\n\n/**\n * Execture the two possible sort Ajax calls as reaction on the triggered event.\n * @param {*} event\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction callSortAjax(event, idstring, encodedtable) {\n\n  let sortcolumn = null;\n  let sortorder = null;\n  let reset = null;\n\n  const container = document.querySelector(SELECTOR.WBCONTAINER + idstring);\n  const sortColumnElement = container.querySelector(SELECTOR.SORTCOLUMN);\n\n  let sortOrderElement = container.querySelector(\"a.changesortorder i\");\n  let className = null;\n  let columnheaderIsTrigger = false;\n\n  if (typeof event === 'string') {\n    // We are sure that we clicked on a column header.\n    sortOrderElement = container.querySelector(SELECTOR.TABLECOLUMN + '.' + event);\n    columnheaderIsTrigger = true;\n  }\n\n  className = sortOrderElement.className;\n\n  // If we get an event, we are in the sortcolum mode.\n  if (event !== null) {\n\n    if (typeof event === 'string') {\n      // We have gotten the column directly as string.\n      sortcolumn = event;\n    } else {\n      sortcolumn = event.target.value;\n    }\n\n    // We reset only on changed sortcolumn, not on order.\n    reset = 1;\n\n    if (!sortcolumn) {\n      return;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(\"Classname \", className);\n    // Get the sortorder by the icon and apply it.\n    if ((className.includes('desc') && columnheaderIsTrigger == false)\n    || (className.includes('asc') && columnheaderIsTrigger == true)) {\n      sortorder = SORT_DESC;\n    } else {\n      sortorder = SORT_ASC;\n    }\n\n  } else {\n    // Else, we are in the sortorder mode.\n    // Get the sortorder by the icon and change it.\n    if (className.includes('asc')) {\n\n      sortorder = SORT_DESC;\n      sortOrderElement.className = className.replace('asc', 'desc');\n    } else {\n\n      sortorder = SORT_ASC;\n      sortOrderElement.className = className.replace('desc', 'asc');\n    }\n\n    // We also need the sortcolumn name to effectuate the change.\n    sortcolumn = sortColumnElement.selectedOptions[0].value;\n  }\n\n   const filterobjects = getFilterObjects(idstring);\n   const searchstring = getSearchInput(idstring);\n\n   callLoadData(idstring,\n     encodedtable,\n     0, // We set page to 0 because we need to start the container anew.\n     sortcolumn,\n     null,\n     null,\n     sortorder,\n     reset,\n     filterobjects,\n     searchstring);\n}\n\n/**\n * Function to read the searchstring from the input element.\n * @param {*} idstring\n * @returns {null|string}\n */\nexport function getSortSelection(idstring) {\n\n  const inputElement = document.querySelector(SELECTOR.WBCONTAINER + idstring + ' select.sort');\n\n  if (!inputElement) {\n    return null;\n  }\n\n  return '';\n}\n\n/**\n * Selection all checkboxes in tablerows with table id.\n * @param {string} idstring\n * @param {bool} checked\n */\nfunction selectAllCheckboxes(idstring, checked) {\n\n  const container = document.querySelector('#a' + idstring);\n\n  const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOXES);\n\n  checkboxes.forEach(x => {\n    // Applying status of tableheadercheckbox to all checkboxes.\n    if (x.dataset.tableid == idstring) {\n      x.checked = checked;\n    }\n  });\n}"],"names":["idstring","document","querySelector","SELECTOR","listContainer","encodedtable","container","sortColumnElement","sortOrderElement","initializeSortColumns","dataset","initialized","addEventListener","e","callSortAjax","querySelectorAll","forEach","element","columnname","checked","x","tableid","selectAllCheckboxes","target","sortable","event","sortcolumn","sortorder","reset","className","columnheaderIsTrigger","value","console","log","includes","replace","selectedOptions","filterobjects","searchstring"],"mappings":"oRAsNiCA,cAEVC,SAASC,cAAcC,qBAAuBH,SAAW,uBAGrE,WAGF,qCAjLuBI,cAAeJ,SAAUK,oBAE/CC,UAAYL,SAASC,cAAcE,mBAEpCE,uBAICC,kBAAoBD,UAAUJ,cAAcC,qBAE5CK,iBAAmBF,UAAUJ,cAAcC,6BAEjDM,sBAAsBL,cAAeJ,SAAUK,eAE1CE,oBAAsBC,wBAKtBD,kBAAkBG,QAAQC,aAAgBH,iBAAiBE,QAAQC,cAEtEJ,kBAAkBG,QAAQC,aAAc,EACxCH,iBAAiBE,QAAQC,aAAc,EAIvCJ,kBAAkBK,iBAAiB,UAAWC,IAC5CC,aAAaD,EAAGb,SAAUK,iBAE5BG,iBAAiBI,iBAAiB,SAAS,KACzCE,aAAa,KAAMd,SAAUK;;;;;;MAjD/BF,oBACQ,oBADRA,yBAEa,oBAFbA,qBAGS,qBAHTA,qBAIS,+BAJTA,oBAKQ,oBALRA,6BAMiB,qCAsDPM,sBAAsBL,cAAeJ,SAAUK,oBAEvDC,UAAYL,SAASC,cAAcE,eAEfE,UAAUS,iBAAiBZ,sBAGnCa,SAAQC,UACpBA,QAAQP,QAAQC,cAGpBM,QAAQP,QAAQC,aAAc,EAE9BM,QAAQL,iBAAiB,SAASC,QAE5BK,WAAaD,QAAQP,QAAQQ,cAI1B,eAFCA,gBAIAC,QAAUb,UAAUJ,cAAcC,8BAA8BgB,kBA2HjDnB,SAAUmB,eAE/Bb,UAAYL,SAASC,cAAc,KAAOF,UAE7BM,UAAUS,iBAAiBZ,qBAEnCa,SAAQI,IAEbA,EAAEV,QAAQW,SAAWrB,WACvBoB,EAAED,QAAUA,YAjIRG,CAAoBtB,SAAUmB,SAC9BN,EAAEU,OAAOb,QAAQS,QAAUA,aAGvBF,QAAQP,QAAQc,UACpBV,aAAaI,WAAYlB,SAAUK,8BAcpCS,aAAaW,MAAOzB,SAAUK,kBAEjCqB,WAAa,KACbC,UAAY,KACZC,MAAQ,WAENtB,UAAYL,SAASC,cAAcC,qBAAuBH,UAC1DO,kBAAoBD,UAAUJ,cAAcC,yBAE9CK,iBAAmBF,UAAUJ,cAAc,uBAC3C2B,UAAY,KACZC,uBAAwB,KAEP,iBAAVL,QAETjB,iBAAmBF,UAAUJ,cAAcC,qBAAuB,IAAMsB,OACxEK,uBAAwB,GAG1BD,UAAYrB,iBAAiBqB,UAGf,OAAVJ,MAAgB,IAIhBC,WAFmB,iBAAVD,MAEIA,MAEAA,MAAMF,OAAOQ,MAI5BH,MAAQ,GAEHF,kBAKLM,QAAQC,IAAI,aAAcJ,WAIxBF,UAFGE,UAAUK,SAAS,SAAoC,GAAzBJ,uBAC/BD,UAAUK,SAAS,QAAmC,GAAzBJ,sBAvInB,EADD,OAiJTD,UAAUK,SAAS,QAErBP,UAlJY,EAmJZnB,iBAAiBqB,UAAYA,UAAUM,QAAQ,MAAO,UAGtDR,UAvJW,EAwJXnB,iBAAiBqB,UAAYA,UAAUM,QAAQ,OAAQ,QAIzDT,WAAanB,kBAAkB6B,gBAAgB,GAAGL,YAG7CM,eAAgB,4BAAiBrC,UACjCsC,cAAe,0BAAetC,iCAEvBA,SACXK,aACA,EACAqB,WACA,KACA,KACAC,UACAC,MACAS,cACAC"}