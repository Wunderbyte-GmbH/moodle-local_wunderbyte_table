{"version":3,"file":"sort.min.js","sources":["../src/sort.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {callLoadData} from 'local_wunderbyte_table/init';\nimport {getFilterObjects} from 'local_wunderbyte_table/filter';\nimport {getSearchInput} from 'local_wunderbyte_table/search';\n\nconst SELECTOR = {\n    SORTCOLUMN: 'select.sortcolumn',\n    CHANGESORTORDER: 'a.changesortorder',\n    TABLECOLUMN: 'th.wb-table-column',\n    WBCONTAINER: \".wunderbyte_table_container_\",\n    CHECKBOXES: 'input.wb-checkbox',\n    TABLEHEADERCHECKBOX: 'input.tableheadercheckbox',\n};\n\nconst SORT_ASC = 4;\nconst SORT_DESC = 3;\n\n/**\n * Function to initialize the search after rendering the searchbox.\n * @param {*} listContainer\n * @param {*} idstring\n * @param {*} encodedtable\n * @returns {void}\n */\nexport function initializeSort(listContainer, idstring, encodedtable) {\n\n    const container = document.querySelector(listContainer);\n\n    if (!container) {\n        return;\n    }\n\n    const sortColumnElement = container.querySelector(SELECTOR.SORTCOLUMN);\n\n    const sortOrderElement = container.querySelector(SELECTOR.CHANGESORTORDER);\n\n    initializeSortColumns(listContainer, idstring, encodedtable);\n\n    if (!sortColumnElement || !sortOrderElement) {\n\n        return;\n    }\n\n    if (!sortColumnElement.dataset.initialized || !sortOrderElement.dataset.initialized) {\n\n        sortColumnElement.dataset.initialized = true;\n        sortOrderElement.dataset.initialized = true;\n\n        // We add two listener, one on the select, one on the sortorder button.\n\n        sortColumnElement.addEventListener('change', (e) => {\n            callSortAjax(e, idstring, encodedtable);\n        });\n        sortOrderElement.addEventListener('click', () => {\n            callSortAjax(null, idstring, encodedtable);\n        });\n    }\n}\n\n/**\n * Initialize Sort Columns in list table.\n * @param {*} listContainer\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function initializeSortColumns(listContainer, idstring, encodedtable) {\n\n    const container = document.querySelector(listContainer);\n\n    const sortColumnHeaders = container.querySelectorAll(SELECTOR.TABLECOLUMN);\n\n    // Add the listeners to column headers.\n    sortColumnHeaders.forEach(element => {\n        if (element.dataset.initialized) {\n            return;\n        }\n        element.dataset.initialized = true;\n\n        element.addEventListener('click', e => {\n\n            let columnname = element.dataset.columnname;\n\n            switch (columnname) {\n                // In case we are in the checkboxes column...\n                case 'wbcheckbox':\n                    // Checking if checkbox in table header is checked.\n                    var checked = container.querySelector(SELECTOR.TABLEHEADERCHECKBOX).checked;\n\n                    // Applying state of header checkbox to checkboxes in table.\n                    selectAllCheckboxes(idstring, checked);\n                    e.target.dataset.checked = checked;\n                    break;\n                default:\n                    if (element.dataset.sortable) {\n                        callSortAjax(columnname, idstring, encodedtable);\n                    }\n            }\n        }\n        );\n    });\n}\n\n/**\n * Execture the two possible sort Ajax calls as reaction on the triggered event.\n * @param {*} event\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction callSortAjax(event, idstring, encodedtable) {\n\n    let sortcolumn = null;\n    let sortorder = null;\n    let reset = null;\n\n    const container = document.querySelector(SELECTOR.WBCONTAINER + idstring);\n    const sortColumnElement = container.querySelector(SELECTOR.SORTCOLUMN);\n\n    let sortOrderElement = container.querySelector(\"a.changesortorder i\");\n    let className = null;\n    let columnheaderIsTrigger = false;\n\n    if (typeof event === 'string') {\n        // We are sure that we clicked on a column header.\n        sortOrderElement = container.querySelector(SELECTOR.TABLECOLUMN + '.' + event);\n        columnheaderIsTrigger = true;\n    }\n\n    className = sortOrderElement.className;\n\n    // If we get an event, we are in the sortcolum mode.\n    if (event !== null) {\n\n        if (typeof event === 'string') {\n            // We have gotten the column directly as string.\n            sortcolumn = event;\n        } else {\n            sortcolumn = event.target.value;\n        }\n\n        // We reset only on changed sortcolumn, not on order.\n        reset = 1;\n\n        if (!sortcolumn) {\n            return;\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(\"Classname \", className);\n        // Get the sortorder by the icon and apply it.\n        if ((className.includes('desc') && columnheaderIsTrigger == false)\n            || (className.includes('asc') && columnheaderIsTrigger == true)) {\n            sortorder = SORT_DESC;\n        } else {\n            sortorder = SORT_ASC;\n        }\n\n    } else {\n        // Else, we are in the sortorder mode.\n        // Get the sortorder by the icon and change it.\n        if (className.includes('asc')) {\n\n            sortorder = SORT_DESC;\n            sortOrderElement.className = className.replace('asc', 'desc');\n        } else {\n\n            sortorder = SORT_ASC;\n            sortOrderElement.className = className.replace('desc', 'asc');\n        }\n\n        // We also need the sortcolumn name to effectuate the change.\n        sortcolumn = sortColumnElement.selectedOptions[0].value;\n    }\n\n    const filterobjects = getFilterObjects(idstring);\n    const searchstring = getSearchInput(idstring);\n\n    callLoadData(idstring,\n        encodedtable,\n        0, // We set page to 0 because we need to start the container anew.\n        sortcolumn,\n        null,\n        null,\n        sortorder,\n        reset,\n        filterobjects,\n        searchstring);\n}\n\n/**\n * Function to read the searchstring from the input element.\n * @param {*} idstring\n * @returns {null|string}\n */\nexport function getSortSelection(idstring) {\n\n    const inputElement = document.querySelector(SELECTOR.WBCONTAINER + idstring + ' select.sort');\n\n    if (!inputElement) {\n        return null;\n    }\n\n    return '';\n}\n\n/**\n * Selection all checkboxes in tablerows with table id.\n * @param {string} idstring\n * @param {bool} checked\n */\nfunction selectAllCheckboxes(idstring, checked) {\n\n    const container = document.querySelector('#a' + idstring);\n\n    const checkboxes = container.querySelectorAll(SELECTOR.CHECKBOXES);\n\n    checkboxes.forEach(x => {\n        // Applying status of tableheadercheckbox to all checkboxes.\n        if (x.dataset.tableid == idstring) {\n            x.checked = checked;\n        }\n    });\n}"],"names":["idstring","document","querySelector","SELECTOR","WBCONTAINER","listContainer","encodedtable","container","sortColumnElement","SORTCOLUMN","sortOrderElement","CHANGESORTORDER","initializeSortColumns","dataset","initialized","addEventListener","e","callSortAjax","TABLECOLUMN","CHECKBOXES","TABLEHEADERCHECKBOX","SORT_ASC","SORT_DESC","querySelectorAll","forEach","element","columnname","checked","checkboxes","x","tableid","selectAllCheckboxes","target","sortable","event","sortcolumn","sortorder","reset","className","columnheaderIsTrigger","value","console","log","includes","replace","selectedOptions","filterobjects","getFilterObjects","searchstring","getSearchInput","callLoadData"],"mappings":"2QAoNO,SAA0BA,UAI7B,IAFqBC,SAASC,cAAcC,SAASC,YAAcJ,SAAW,gBAG1E,OAAO,KAGX,MAAO,EACX,0BAlLO,SAAwBK,cAAeL,SAAUM,cAEpD,MAAMC,UAAYN,SAASC,cAAcG,eAEzC,IAAKE,UACD,OAGJ,MAAMC,kBAAoBD,UAAUL,cAAcC,SAASM,YAErDC,iBAAmBH,UAAUL,cAAcC,SAASQ,iBAI1D,GAFAC,sBAAsBP,cAAeL,SAAUM,eAE1CE,oBAAsBE,iBAEvB,OAGCF,kBAAkBK,QAAQC,aAAgBJ,iBAAiBG,QAAQC,cAEpEN,kBAAkBK,QAAQC,aAAc,EACxCJ,iBAAiBG,QAAQC,aAAc,EAIvCN,kBAAkBO,iBAAiB,UAAWC,IAC1CC,aAAaD,EAAGhB,SAAUM,aAAa,IAE3CI,iBAAiBK,iBAAiB,SAAS,KACvCE,aAAa,KAAMjB,SAAUM,aAAa,IAGtD;;;;;;AApDA,MAAMH,SAAW,CACbM,WAAY,oBACZE,gBAAiB,oBACjBO,YAAa,qBACbd,YAAa,+BACbe,WAAY,oBACZC,oBAAqB,6BAGnBC,SAAW,EACXC,UAAY,EAkDX,SAASV,sBAAsBP,cAAeL,SAAUM,cAE3D,MAAMC,UAAYN,SAASC,cAAcG,eAEfE,UAAUgB,iBAAiBpB,SAASe,aAG5CM,SAAQC,UAClBA,QAAQZ,QAAQC,cAGpBW,QAAQZ,QAAQC,aAAc,EAE9BW,QAAQV,iBAAiB,SAASC,IAE9B,IAAIU,WAAaD,QAAQZ,QAAQa,WAEjC,GAES,eAFDA,WAEJ,CAEI,IAAIC,QAAUpB,UAAUL,cAAcC,SAASiB,qBAAqBO,SA2HxF,SAA6B3B,SAAU2B,SAEnC,MAAMpB,UAAYN,SAASC,cAAc,KAAOF,UAE1C4B,WAAarB,UAAUgB,iBAAiBpB,SAASgB,YAEvDS,WAAWJ,SAAQK,IAEXA,EAAEhB,QAAQiB,SAAW9B,WACrB6B,EAAEF,QAAUA,QAChB,GAER,CApIoBI,CAAoB/B,SAAU2B,SAC9BX,EAAEgB,OAAOnB,QAAQc,QAAUA,OAC3B,MAEIF,QAAQZ,QAAQoB,UAChBhB,aAAaS,WAAY1B,SAAUM,aAE/C,IAEH,GAET,CAQA,SAASW,aAAaiB,MAAOlC,SAAUM,cAEnC,IAAI6B,WAAa,KACbC,UAAY,KACZC,MAAQ,KAEZ,MAAM9B,UAAYN,SAASC,cAAcC,SAASC,YAAcJ,UAC1DQ,kBAAoBD,UAAUL,cAAcC,SAASM,YAE3D,IAAIC,iBAAmBH,UAAUL,cAAc,uBAC3CoC,UAAY,KACZC,uBAAwB,EAW5B,GATqB,iBAAVL,QAEPxB,iBAAmBH,UAAUL,cAAcC,SAASe,YAAc,IAAMgB,OACxEK,uBAAwB,GAG5BD,UAAY5B,iBAAiB4B,UAGf,OAAVJ,MAAgB,CAYhB,GARIC,WAFiB,iBAAVD,MAEMA,MAEAA,MAAMF,OAAOQ,MAI9BH,MAAQ,GAEHF,WACD,OAIJM,QAAQC,IAAI,aAAcJ,WAItBF,UAFCE,UAAUK,SAAS,SAAoC,GAAzBJ,uBAC3BD,UAAUK,SAAS,QAAmC,GAAzBJ,sBACrBjB,UAEAD,QAGpB,MAGQiB,UAAUK,SAAS,QAEnBP,UAAYd,UACZZ,iBAAiB4B,UAAYA,UAAUM,QAAQ,MAAO,UAGtDR,UAAYf,SACZX,iBAAiB4B,UAAYA,UAAUM,QAAQ,OAAQ,QAI3DT,WAAa3B,kBAAkBqC,gBAAgB,GAAGL,MAGtD,MAAMM,eAAgB,EAAAC,QAAgBA,kBAAC/C,UACjCgD,cAAe,EAAAC,QAAcA,gBAACjD,WAEpC,EAAAkD,MAAAA,cAAalD,SACTM,aACA,EACA6B,WACA,KACA,KACAC,UACAC,MACAS,cACAE,aACR,CAmCC"}