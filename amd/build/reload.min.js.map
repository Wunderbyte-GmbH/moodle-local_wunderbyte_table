{"version":3,"sources":["../src/reload.js"],"names":["selector","idstring","encodedtable","button","document","querySelector","idstringplusa","console","log","addEventListener","wbTableReload","element","parentelement","rowid","classList","contains","dataset","id","parentElement","getAttribute","substring","filterobjects","filterobject","length","JSON","parse","stringify","replacerow","searchstring","sort"],"mappings":"qRAkCQ,SAA0BA,CAA1B,CAAoCC,CAApC,CAA8CC,CAA9C,CAA4D,CAElE,GAAMC,CAAAA,CAAM,CAAGC,QAAQ,CAACC,aAAT,CAAuBL,CAAQ,CAAG,oBAAlC,CAAf,CAEA,GAAI,CAACG,CAAL,CAAa,CACX,MACD,CAED,GAAMG,CAAAA,CAAa,CAAG,IAAML,CAA5B,CAGAM,OAAO,CAACC,GAAR,CAAYL,CAAZ,CAAoBG,CAApB,EAEAH,CAAM,CAACM,gBAAP,CAAwB,OAAxB,CAAiC,UAAM,CAErCF,OAAO,CAACC,GAAR,CAAY,gBAAZ,EACAE,CAAa,CAACJ,CAAD,CAAgBJ,CAAhB,CACd,CAJD,CAKD,C,sCAsDM,SAA0BS,CAA1B,CAAmC,CAGxCJ,OAAO,CAACC,GAAR,CAAYG,CAAZ,EAHwC,GAKpCC,CAAAA,CAAa,CAAGD,CALoB,CAMpCE,CAAK,CAAG,IAN4B,CASxC,MAAO,CAACD,CAAa,CAACE,SAAd,CAAwBC,QAAxB,CAAiC,sBAAjC,CAAR,CAAkE,CAE9D,GAAI,CAACF,CAAD,EAAUD,CAAa,CAACI,OAAd,CAAsBC,EAApC,CAAwC,CACpCJ,CAAK,CAAGD,CAAa,CAACI,OAAd,CAAsBC,EACjC,CACDL,CAAa,CAAGA,CAAa,CAACM,aAA9B,CAEA,GAAI,CAACN,CAAL,CAAoB,CAChB,KACH,CACJ,CAED,GAAIA,CAAJ,CAAmB,IACTX,CAAAA,CAAQ,CAAGW,CAAa,CAACO,YAAd,CAA2B,IAA3B,CADF,CAETjB,CAAY,CAAGU,CAAa,CAACI,OAAd,CAAsBd,YAF5B,CAIfQ,CAAa,CAACT,CAAD,CAAWC,CAAX,CAAyBW,CAAzB,CAChB,CAEF,C,CAzEO,QAASH,CAAAA,CAAT,CAAuBJ,CAAvB,CAAsCJ,CAAtC,CAA+D,IAAXW,CAAAA,CAAW,wDAAH,CAAG,CAGrEN,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAA2BO,CAA3B,CAAkCX,CAAlC,EAHqE,GAM/DD,CAAAA,CAAQ,CAAGK,CAAa,CAACc,SAAd,CAAwB,CAAxB,CANoD,CAQjEC,CAAa,CAAG,sBAAgBpB,CAAhB,CARiD,CAWrE,GAAY,CAAR,CAAAY,CAAJ,CAAe,CAEX,GAAIS,CAAAA,CAAY,CAAG,EAAnB,CAEA,GAA6B,CAAzB,GAAAD,CAAa,CAACE,MAAlB,CAAgC,CAC5BD,CAAY,CAAGE,IAAI,CAACC,KAAL,CAAWJ,CAAX,CAClB,CAEDC,CAAY,CAACL,EAAb,CAAkB,CAACJ,CAAD,CAAlB,CACAQ,CAAa,CAAGG,IAAI,CAACE,SAAL,CAAeJ,CAAf,CACnB,CArBoE,GAuB/DK,CAAAA,CAAU,CAAW,CAAR,CAAAd,CAAK,MAvB6C,CAyB/De,CAAY,CAAG,qBAAe3B,CAAf,CAzBgD,CA0B/D4B,CAAI,CAAG,uBAAiB5B,CAAjB,CA1BwD,CA4BrE,mBAAaA,CAAb,CACIC,CADJ,CAEI,CAFJ,CAGI,IAHJ,CAII2B,CAJJ,CAKI,IALJ,CAMI,IANJ,CAOI,IAPJ,CAQIR,CARJ,CASIO,CATJ,CAUID,CAVJ,CAWD,C","sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {callLoadData} from 'local_wunderbyte_table/init';\nimport {getFilterOjects} from 'local_wunderbyte_table/filter';\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\n/**\n * Function to initialize the search after rendering the searchbox.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n * @returns {void}\n */\n export function initializeReload(selector, idstring, encodedtable) {\n\n  const button = document.querySelector(selector + \" .wb_reload_button\");\n\n  if (!button) {\n    return;\n  }\n\n  const idstringplusa = 'a' + idstring;\n\n  // eslint-disable-next-line no-console\n  console.log(button, idstringplusa);\n\n  button.addEventListener('click', () => {\n    // eslint-disable-next-line no-console\n    console.log('register click');\n    wbTableReload(idstringplusa, encodedtable);\n  });\n}\n\n/**\n * Function to reload a wunderbyte table from js.\n * Here we trim the idstring before we pass it to the calldatafunction.\n * @param {*} idstringplusa\n * @param {*} encodedtable\n * @param {number} rowid\n */\n export function wbTableReload(idstringplusa, encodedtable, rowid = 0) {\n\n  // eslint-disable-next-line no-console\n  console.log(idstringplusa, rowid, encodedtable);\n\n  // We need to trim the first character. We use the a to make sure no number is in first place due to random generation.\n  const idstring = idstringplusa.substring(1);\n\n  let filterobjects = getFilterOjects(idstring);\n\n  // If we have a rowid, we add the rowid to the filter.\n  if (rowid > 0) {\n\n      let filterobject = {};\n\n      if (filterobjects.length !== 0) {\n          filterobject = JSON.parse(filterobjects);\n      }\n\n      filterobject.id = [rowid];\n      filterobjects = JSON.stringify(filterobject);\n  }\n\n  const replacerow = rowid > 0 ? true : false;\n\n  const searchstring = getSearchInput(idstring);\n  const sort = getSortSelection(idstring);\n\n  callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always rest to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      filterobjects,\n      searchstring,\n      replacerow);\n}\n\n/**\n* This function can be called from a button. The button identifies the table and the id and calls reload.\n* @param {HTMLElement} element\n*/\nexport function wbTableRowReload(element) {\n\n  // eslint-disable-next-line no-console\n  console.log(element);\n\n  let parentelement = element;\n  let rowid = null;\n\n  // We run through the parents until we have the table class.\n  while (!parentelement.classList.contains('wunderbyteTableClass')) {\n      // We only want the first id, so we check if we have found an id already.\n      if (!rowid && parentelement.dataset.id) {\n          rowid = parentelement.dataset.id;\n      }\n      parentelement = parentelement.parentElement;\n\n      if (!parentelement) {\n          break;\n      }\n  }\n  // Only if we have found a parent element, we call reload.\n  if (parentelement) {\n      const idstring = parentelement.getAttribute('id');\n      const encodedtable = parentelement.dataset.encodedtable;\n\n      wbTableReload(idstring, encodedtable, rowid);\n  }\n\n}\n"],"file":"reload.min.js"}