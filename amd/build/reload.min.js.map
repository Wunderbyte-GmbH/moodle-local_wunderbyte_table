{"version":3,"file":"reload.min.js","sources":["../src/reload.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {callLoadData, queries} from 'local_wunderbyte_table/init';\nimport {getFilterObjects} from 'local_wunderbyte_table/filter';\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\n/**\n * Function to initialize the search after rendering the searchbox.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n * @returns {void}\n */\n export function initializeReload(selector, idstring, encodedtable) {\n\n  const button = document.querySelector(selector + \" .wb_reload_button\");\n\n  if (!button) {\n    return;\n  }\n\n  const idstringplusa = 'a' + idstring;\n\n  button.addEventListener('click', () => {\n\n    wbTableReload(idstringplusa, encodedtable);\n  });\n}\n\n/**\n * Function to reload a wunderbyte table from js.\n * Here we trim the idstring before we pass it to the calldatafunction.\n * @param {*} idstringplusa\n * @param {*} encodedtable\n * @param {number} rowid\n */\n export function wbTableReload(idstringplusa, encodedtable, rowid = 0) {\n\n  // We need to trim the first character. We use the a to make sure no number is in first place due to random generation.\n  const idstring = idstringplusa.substring(1);\n\n  let filterobjects = getFilterObjects(idstring);\n\n  // If we have a rowid, we add the rowid to the filter.\n  if (rowid > 0) {\n\n      let filterobject = {};\n\n      if (filterobjects.length !== 0) {\n          filterobject = JSON.parse(filterobjects);\n      }\n\n      filterobject.id = [rowid];\n      filterobjects = JSON.stringify(filterobject);\n  }\n\n  const replacerow = rowid > 0 ? true : false;\n\n  const searchstring = getSearchInput(idstring);\n  const sort = getSortSelection(idstring);\n\n  callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always rest to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      filterobjects,\n      searchstring,\n      replacerow);\n}\n\n/**\n * This function can be called from a button. The button identifies the table and the id and calls reload.\n * @param {HTMLElement} element\n */\nexport function wbTableRowReload(element) {\n\n  let parentelement = element;\n  let rowid = null;\n\n  // We run through the parents until we have the table class.\n  while (!parentelement.classList.contains('wunderbyteTableClass')) {\n      // We only want the first id, so we check if we have found an id already.\n      if (!rowid && parentelement.dataset.id) {\n          rowid = parentelement.dataset.id;\n      }\n      parentelement = parentelement.parentElement;\n\n      if (!parentelement) {\n          break;\n      }\n  }\n  // Only if we have found a parent element, we call reload.\n  if (parentelement) {\n      const idstring = parentelement.getAttribute('id');\n      const encodedtable = parentelement.dataset.encodedtable;\n\n      wbTableReload(idstring, encodedtable, rowid);\n  }\n\n}\n\n/**\n * Reload all other tables on the same page.\n */\nexport function reloadAllTables() {\n\n  // eslint-disable-next-line no-unused-vars\n  for (const [key, value] of Object.entries(queries)) {\n\n    callLoadData(\n      value.idstring,\n      value.encodedtable,\n      value.page,\n      value.tsort,\n      value.thide,\n      value.tshow,\n      value.tdir,\n      value.treset,\n      value.filterobjects,\n      value.searchtext,\n      value.replacerow\n  );\n  }\n}"],"names":["wbTableReload","idstringplusa","encodedtable","rowid","arguments","length","undefined","idstring","substring","filterobjects","getFilterObjects","filterobject","JSON","parse","id","stringify","replacerow","searchstring","getSearchInput","sort","getSortSelection","callLoadData","selector","button","document","querySelector","addEventListener","key","value","Object","entries","queries","page","tsort","thide","tshow","tdir","treset","searchtext","element","parentelement","classList","contains","dataset","parentElement","getAttribute"],"mappings":"+NAyDQ,SAASA,cAAcC,cAAeC,cAAyB,IAAXC,MAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAGlE,MAAMG,SAAWN,cAAcO,UAAU,GAEzC,IAAIC,eAAgB,EAAAC,QAAgBA,kBAACH,UAGrC,GAAIJ,MAAQ,EAAG,CAEX,IAAIQ,aAAe,CAAA,EAEU,IAAzBF,cAAcJ,SACdM,aAAeC,KAAKC,MAAMJ,gBAG9BE,aAAaG,GAAK,CAACX,OACnBM,cAAgBG,KAAKG,UAAUJ,aACnC,CAEA,MAAMK,WAAab,MAAQ,EAErBc,cAAe,EAAAC,QAAcA,gBAACX,UAC9BY,MAAO,EAAAC,MAAgBA,kBAACb,WAE9B,EAAAc,MAAAA,cAAad,SACTL,aACA,EACA,KACAiB,KACA,KACA,KACA,KACAV,cACAQ,aACAD,WACN;;;;;;AA3DQ,SAA0BM,SAAUf,SAAUL,cAEpD,MAAMqB,OAASC,SAASC,cAAcH,SAAW,sBAEjD,IAAKC,OACH,OAGF,MAAMtB,cAAgB,IAAMM,SAE5BgB,OAAOG,iBAAiB,SAAS,KAE/B1B,cAAcC,cAAeC,aAAa,GAE9C,2BAiFO,WAGL,IAAK,MAAOyB,IAAKC,SAAUC,OAAOC,QAAQC,MAAAA,UAExC,EAAAV,MAAAA,cACEO,MAAMrB,SACNqB,MAAM1B,aACN0B,MAAMI,KACNJ,MAAMK,MACNL,MAAMM,MACNN,MAAMO,MACNP,MAAMQ,KACNR,MAAMS,OACNT,MAAMnB,cACNmB,MAAMU,WACNV,MAAMZ,WAGZ,iEAjDO,SAA0BuB,SAE/B,IAAIC,cAAgBD,QAChBpC,MAAQ,KAGZ,MAAQqC,cAAcC,UAAUC,SAAS,2BAEhCvC,OAASqC,cAAcG,QAAQ7B,KAChCX,MAAQqC,cAAcG,QAAQ7B,IAElC0B,cAAgBA,cAAcI,cAEzBJ,iBAKT,GAAIA,cAAe,CAIfxC,cAHiBwC,cAAcK,aAAa,MACvBL,cAAcG,QAAQzC,aAELC,MAC1C,CAEF,CAwBC"}