define("local_wunderbyte_table/filter",["exports","local_wunderbyte_table/search","local_wunderbyte_table/sort","local_wunderbyte_table/init","core/templates"],(function(_exports,_search,_sort,_init,_templates){var obj;
/*
   * @package    local_wunderbyte_table
   * @copyright  Wunderbyte GmbH <info@wunderbyte.at>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getChecked=getChecked,_exports.getFilterObjects=getFilterObjects,_exports.initializeCheckboxes=initializeCheckboxes,_exports.renderFilter=void 0,_exports.toggleCheckbox=toggleCheckbox,_exports.updateUrlWithFilterSearchSort=function(filterobjects,searchstring,sort,dir){let url=new URL(window.location.href);url.searchParams.delete("wbtfilter"),url.searchParams.delete("wbtsearch"),url.searchParams.delete("tsort"),url.searchParams.delete("tdir",dir),url.searchParams.append("wbtfilter",filterobjects),url.searchParams.append("wbtsearch",searchstring),url.searchParams.append("tsort",sort),url.searchParams.append("tdir",dir),window.history.pushState(null,null,url.toString())},_templates=(obj=_templates)&&obj.__esModule?obj:{default:obj};var checked={};function initializeCheckboxes(selector,idstring,encodedtable){const filterContainer=document.querySelector(selector+" .wunderbyteTableFilter");if(!filterContainer||filterContainer.dataset.initialized)return;const allCheckboxes=filterContainer.querySelectorAll("input[type=checkbox]");allCheckboxes&&(checked.hasOwnProperty(idstring)||(checked[idstring]={}),allCheckboxes.forEach((el=>{el.dataset.idstring?el.dataset.idstring2=idstring:el.dataset.idstring=idstring,el.addEventListener("change",(e=>toggleCheckbox(e,selector,idstring,encodedtable)))})),filterContainer.dataset.initialized=!0)}function toggleCheckbox(e,selector,idstring,encodedtable){e.stopPropagation(),e.preventDefault(),getChecked(e.target.name,selector,idstring);const filterobjects=getFilterObjects(idstring),searchstring=(0,_search.getSearchInput)(idstring),sort=(0,_sort.getSortSelection)(idstring);(0,_init.callLoadData)(idstring,encodedtable,0,null,sort,null,null,null,filterobjects,searchstring)}function getChecked(name,selector,idstring){const wbTable=document.querySelector(selector);checked[idstring][name]=Array.from(wbTable.querySelectorAll("input[name="+name+"]:checked")).map((function(el){return console.log(el.value),el.value})),console.log(checked[idstring][name])}function getFilterObjects(idstring){return idstring in checked?JSON.stringify(checked[idstring]):""}_exports.renderFilter=(filterjson,idstring,encodedtable)=>{const selector=".wunderbyte_table_container_"+idstring,container=document.querySelector(selector);container.querySelector(".wunderbyteTableFilter")||_templates.default.renderForPromise("local_wunderbyte_table/filter",filterjson).then((_ref=>{let{html:html}=_ref;container.insertAdjacentHTML("afterbegin",html),initializeCheckboxes(selector,idstring,encodedtable)})).catch((e=>{console.log(e)}))}}));

//# sourceMappingURL=filter.min.js.map