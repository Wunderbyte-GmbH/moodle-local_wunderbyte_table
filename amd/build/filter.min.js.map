{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * @module    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n  const selects = filterContainer.querySelectorAll(\"select[id^='filteroperationselect']\");\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n  const hierarchcheckboxes = filterContainer.querySelectorAll('.hierarchycategory-checkbox');\n\n  if (!filterElements) {\n    return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  // We run through all the filter elements and make sure that we store the state we received from php.\n  filterElements.forEach(element => {\n    getChecked(element.name, selector, idstring);\n  });\n\n  applyChangelistener(filterElements, selector, idstring, encodedtable);\n  applyChangelistener(selects, selector, idstring, encodedtable);\n\n  if (hierarchcheckboxes) {\n    handleHierarchyCategoryCheckbox(hierarchcheckboxes, filterElements, selector, idstring, encodedtable);\n  }\n\n  filterContainer.dataset.initialized = true;\n}\n/**\n * Apply change listener to list of nodes.\n * @param {*} nodelist\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction applyChangelistener(nodelist, selector, idstring, encodedtable) {\n  if (nodelist) {\n    nodelist.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      [\"change\", \"keyup\"].forEach(event => {\n        el.addEventListener(event, (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n      });\n    });\n  }\n}\n/**\n * Init for button to reset all filter and searchparams.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function initializeResetFilterButton(selector, idstring, encodedtable) {\n  const container = document.querySelector(selector);\n  if (!container) {\n    return;\n  }\n  let button = container.querySelector(\".reset-filter-button\");\n\n  // eslint-disable-next-line no-console\n  console.log(button);\n\n  if (!button) {\n    return;\n  }\n  button.addEventListener('click', () => {\n\n    if (!container) {\n      return;\n    }\n\n    const componentscontainer = container.querySelector(\".wunderbyte_table_components\");\n\n    if (!componentscontainer) {\n      return;\n    }\n\n    componentscontainer.remove();\n\n    resetCheckedObject(idstring);\n\n    const sort = getSortSelection(idstring);\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      \"\",\n      \"\");\n  });\n}\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  setTimeout(() => {\n    // Check if Checkbox corresponds to datepicker\n    if (e.target.type === 'checkbox') {\n            handleParentCheckbox(e.target);\n    }\n    if (e.target.dataset.dateelement == 'dateelement') {\n      getDates(e, selector, idstring);\n    } else if (e.target.dataset.intrangeelement && e.target.dataset.intrangeelement.includes('intrangeelement')) {\n      getIntRange(e, selector, idstring);\n      // eslint-disable-next-line no-console\n      console.log(\"intrangeelement\");\n    } else {\n      getChecked(e.target.name, selector, idstring);\n    }\n\n    triggerReload(idstring, encodedtable);\n  }, 400);\n}\n\n/**\n * Handles the behavior of parent checkboxes in a hierarchical structure.\n * When a child checkbox is checked/unchecked, this function updates the state\n * of the parent checkbox accordingly. The parent checkbox will be checked if\n * all children are checked, and unchecked if any child is unchecked.\n *\n * @param {HTMLInputElement} checkbox - The checkbox element that triggered the event\n */\nfunction handleParentCheckbox(checkbox) {\n    const wrapper = checkbox.closest('ul.hierarchy');\n    if (!wrapper) {\n      return;\n    }\n    const spanElement = wrapper.querySelector('.d-flex');\n    const parentCheckbox = spanElement.querySelector('.hierarchycategory-checkbox');\n    if (!parentCheckbox) {\n      return;\n    }\n    const siblingCheckboxes = wrapper.querySelectorAll('.hierarchychild-checkbox');\n    const allChecked = Array.from(siblingCheckboxes).every(cb => cb.checked);\n\n    if (allChecked) {\n        parentCheckbox.checked = true;\n    } else if (Array.from(siblingCheckboxes).some(cb => !cb.checked)) {\n        parentCheckbox.checked = false;\n    }\n}\n\n/**\n * Trigger the reload with filter, search, sort.\n *\n * @param {*} idstring\n * @param {*} encodedtable\n *\n */\nfunction triggerReload(idstring, encodedtable) {\n      // Reload the filtered elements via ajax.\n    const filterobjects = getFilterObjects(idstring);\n    const searchstring = getSearchInput(idstring);\n    const sort = getSortSelection(idstring);\n\n    // The filter reloads data from the Server.\n    // Because of pages and infinite scroll we don't have the data to do without.\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      filterobjects,\n      searchstring);\n}\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getDates(e, selector, idstring) {\n\n  let name = e.target.dataset.columnname;\n  let filtercontainer = e.target.closest(\".datepickerform\");\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = filtercontainer.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.dataset.timespan === \"true\") {\n    compareDateValues(e, filtercontainer);\n  }\n  if (filtercheckbox.checked) {\n    // Check if we have a timespan filter or a single one.\n    if (filtercheckbox.dataset.timespan === \"true\") {\n      setTimespanFilter(filtercontainer, filtername, idstring, name);\n    } else {\n      dates[String(filtercheckbox.dataset.operator)] = getDateAndTimePickerDataAsUnix(filtercontainer, \"datefilter\") / 1000;\n      // Check if key is set in array, otherwise set new key.\n      if (name && filtername) {\n        if (!checked[idstring][name]) {\n          checked[idstring][name] = {};\n        }\n        checked[idstring][name][filtername] = dates;\n      }\n      unsetEmptyFieldsInCheckedObject(name, filtername, idstring);\n    }\n  } else { // If checkbox of filter is unchecked: unset values in checked object.\n    resetCheckedObject(idstring, name, filtername);\n    unsetEmptyFieldsInCheckedObject(name, null, idstring);\n    // Vorher noch ein if exists etc.\n    Object.keys(checked[idstring]).forEach(function(key) {\n      Object.keys(checked[idstring][key]).forEach(function(okey) {\n        if (okey == filtername) {\n          resetCheckedObject(idstring, key, filtername);\n          unsetEmptyFieldsInCheckedObject(key, null, idstring);\n        }\n      }\n      );\n    }\n    );\n  }\n  updateFilterCounter(name, selector, idstring);\n}\n\n/**\n * Check if date and time value set in first timepicker is before second timepicker.\n * @param {*} e // The element that triggerd the change.\n * @param {*} filtercontainer\n */\nfunction compareDateValues(e, filtercontainer) {\n  let startdate = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n  let enddate = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n  // We make sure the entered enddate is after 2020, to avoid triggering change while date setting is not finished yet.\n  if ((enddate / 1000 > 1577836800) && (startdate > enddate)) {\n    // Apply change.\n    setDateAndTimePickerDataFromUnix(filtercontainer, 'startdate', enddate);\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id // Id of the date- and timepicker, the value should be applied to.\n * @param {integer} timestamp\n */\nexport function setDateAndTimePickerDataFromUnix(filtercontainer, id = '', timestamp) {\n\n  let dateobject = new Date(timestamp);\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  datepicker.value = dateobject.toISOString().split('T')[0];\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  timepicker.value = dateobject.toLocaleTimeString().slice(0, 5);\n}\n\n/**\n * Applying a timespan filter.\n * @param {*} filtercontainer\n * @param {string} filtername\n * @param {string} idstring\n * @param {string} name\n */\nfunction setTimespanFilter(filtercontainer, filtername, idstring, name) {\n  // Selector defined the operators.\n  let select = filtercontainer.querySelector('select[id^=\"filteroperationselect\"][name=\"' + name + '\"]');\n  let operator = select.value;\n\n  // First Column to apply the filter to\n  let startdatepicker = filtercontainer.querySelector('input[id^=\"startdate\"]');\n  let firstcolumn = startdatepicker.dataset.applytocolumn;\n  let firstoperator = \"\";\n  let additionalFirstColumnValues = {};\n  let valuefirstcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\") / 1000;\n\n  // Second Column to apply the filter to\n  let enddatepicker = filtercontainer.querySelector('input[id^=\"enddate\"]');\n  let secondcolumn = enddatepicker.dataset.applytocolumn;\n  let secondoperator = \"\";\n  let additionalSecondColumnValues = {};\n  let valuesecondcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\") / 1000;\n\n  if (!Number.isInteger(valuefirstcolumn) || !Number.isInteger(valuefirstcolumn)) {\n    return;\n  }\n\n  // Unset the values of the span filter in checked object.\n  resetCheckedObject(idstring, firstcolumn, filtername);\n  resetCheckedObject(idstring, secondcolumn, filtername);\n\n  switch (operator) {\n    case \"within\":\n      firstoperator = \">=\";\n      secondoperator = \"<=\";\n      break;\n    case \"overlapboth\":\n      firstoperator = \"<=\";\n      secondoperator = \">=\";\n      break;\n    case \"overlapstart\":\n      firstoperator = \"<=\";\n      additionalSecondColumnValues[\">=\"] = valuefirstcolumn;\n      secondoperator = \"<=\";\n      break;\n    case \"overlapend\":\n      firstoperator = \">=\";\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\"<=\"] = valuesecondcolumn;\n      break;\n    case \"before\":\n      firstoperator = \"<\";\n      additionalSecondColumnValues[\"<=\"] = valuefirstcolumn;\n      secondoperator = \"<\";\n      break;\n    case \"after\":\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\">=\"] = valuesecondcolumn;\n      firstoperator = \">\";\n      break;\n    case \"flexoverlap\":\n      firstoperator = \"fo\";\n      secondoperator = \"fo\";\n      break;\n    default:\n      break;\n  }\n  if (!secondcolumn) {\n    secondcolumn = firstcolumn;\n  }\n  applySpanfilter(firstcolumn, valuefirstcolumn, filtername, firstoperator, additionalFirstColumnValues, idstring);\n  applySpanfilter(secondcolumn, valuesecondcolumn, filtername, secondoperator, additionalSecondColumnValues, idstring);\n\n  // Unsetting the timespan filter if empty\n  if (firstcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(firstcolumn, filtername, idstring);\n  }\n  if (secondcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(secondcolumn, filtername, idstring);\n  }\n}\n\n/**\n *  Check if filter object already exisits and unset values.\n * @param {string} idstring\n * @param {string} column\n * @param {string} filtername\n */\nfunction resetCheckedObject(idstring, column = '', filtername = '') {\n\n  // If no column is specified, we reset all the filters.\n  if (column.length === 0) {\n\n    Object.keys(checked[idstring]).forEach(col => {\n      checked[idstring][col] = [];\n    });\n  } else {\n    if (checked[idstring].hasOwnProperty(column)) {\n      if (checked[idstring][column].hasOwnProperty(filtername)) {\n        delete checked[idstring][column][filtername];\n      }\n      if (checked[idstring][column].hasOwnProperty(filtername + 'a')) {\n        delete checked[idstring][column][filtername + 'a'];\n      }\n      if (\n        Array.isArray(checked[idstring][column]) &&\n        checked[idstring][column].length === 1 &&\n        checked[idstring][column][0] === 'datecheckbox'\n      ) {\n        delete checked[idstring][column];\n      }\n    }\n  }\n}\n\n/**\n *  Check if object already exisits and set values.\n * @param {string} column\n * @param {*} value\n * @param {string} filtername\n * @param {string} operator\n * @param {*} additionalvaluesObject\n * @param {string} idstring\n */\nfunction applySpanfilter(column, value, filtername, operator, additionalvaluesObject, idstring) {\n  if (operator.length >= 1) {\n    if (column && filtername) {\n      if (!checked[idstring][column]) {\n        checked[idstring][column] = {};\n      }\n      if (!checked[idstring][column][filtername]) {\n        checked[idstring][column][filtername] = {};\n      }\n      checked[idstring][column][filtername][operator] = value;\n      if (Object.keys(additionalvaluesObject).length > 0) {\n        checked[idstring][column][filtername + 'a'] = additionalvaluesObject;\n      }\n    }\n  }\n}\n\n/**\n * Unsetting empty keys in checked object. If a filter param was created and deleted later on we will need this.\n * @param {*} key1\n * @param {*} key2\n * @param {string} idstring\n */\nfunction unsetEmptyFieldsInCheckedObject(key1, key2, idstring) {\n  if (checked[idstring][key1]) {\n    if (checked[idstring][key1][key2]) {\n      if (Object.keys(checked[idstring][key1][key2]).length < 1) {\n        delete checked[idstring][key1][key2];\n      }\n    }\n  }\n\n  if (checked[idstring][key1]) {\n    if (Object.keys(checked[idstring][key1]).length < 1) {\n      delete checked[idstring][key1];\n    }\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(filtercontainer, id = '') {\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  let date = datepicker.value;\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  let time = timepicker.value;\n\n  let unixTimestamp = Date.parse(date + ' ' + time);\n  let tenDigitTimestamp = unixTimestamp;\n\n  return tenDigitTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  window.history.replaceState(null, '', url);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n    searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n    sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} idstring\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateDownloadUrlWithFilterSearchSort(idstring, filterobjects, searchstring, sort, dir) {\n\n  // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n  let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n  if (!container) {\n    return;\n  }\n\n  let url = '';\n  let formelement = null;\n  try {\n    formelement = container.querySelector('form.wb-table-download-buttons');\n    url = new URL(formelement.getAttribute('action'));\n  } catch (e) {\n\n    // eslint-disable-next-line no-console\n    console.log(e);\n    return;\n  }\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n    searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n    sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  formelement.action = url.toString();\n}\n\n/**\n * Gets an array of checkboxes for every table by idstring.\n * @param {*} name\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getChecked(name, selector, idstring) {\n\n  // We might have more than one Table, therefore we first have to get all tables.\n  const wbTable = document.querySelector(selector);\n\n  checked[idstring][name] = Array.from(\n    wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n  ).filter(function(el) {\n    return el.checked;\n  }).map(function(el) {\n    return el.value;\n  });\n\n  // If there are no checked boxes, we unset the key alltogether.\n  if (checked[idstring][name].length < 1) {\n    delete checked[idstring][name];\n  }\n\n  updateFilterCounter(name, selector, idstring);\n}\n\n/**\n * Gets the values of the checked intrange filter.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getIntRange(e, selector, idstring) {\n\n  // We might have more than one Table, therefore we first have to get all tables.\n  let filtercontainer = e.target.closest(\".intrangeform\");\n\n  let from = filtercontainer.querySelector('input[id*=\"intrangefilter_intrange-start\"]');\n  let fromvalue = from.value;\n  let to = filtercontainer.querySelector('input[id*=\"intrangefilter_intrange-end\"]');\n  let tovalue = to.value;\n  let colname = e.target.dataset.columnname;\n\n  // Add the alert if not all entries are ints (or empty).\n  const isInt = (str) => (!isNaN(parseInt(str)) && isFinite(str)) || (str.trim() === '') || (str === null);\n\n  const alertelement = filtercontainer.querySelector('div[id*=\"intrangefilter_alert\"]');\n  if (!isInt(fromvalue)\n    || !isInt(tovalue)) {\n\n    alertelement.removeAttribute('hidden');\n  } else {\n    alertelement.setAttribute('hidden', 'true');\n\n    // Stripping leading zeros.\n    fromvalue = parseInt(fromvalue, 10);\n    fromvalue = fromvalue.toString();\n    tovalue = parseInt(tovalue, 10);\n    tovalue = tovalue.toString();\n  }\n\n  if (fromvalue.length > 0 || tovalue.length > 0) {\n    checked[idstring][colname] = fromvalue + \",\" + tovalue;\n  }\n\n  // If there are no checked boxes, unset the key when the checkbox is unchecked.\n  if (!filtercontainer.querySelector('input[data-intrangeelement=\"intrangeelement-checkbox\"]').checked) {\n    delete checked[idstring][colname];\n  }\n  updateFilterCounter(colname, selector, idstring);\n}\n\n/**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  let hasvalues = false;\n\n  for (const [, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport const renderFilter = (filterjson, idstring, encodedtable) => {\n\n  // We render the filter only once, so if we find it already, we don't render it.\n\n  const selector = SELECTORS.CONTAINER + idstring;\n  const container = document.querySelector(selector);\n  const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n  if (filtercontainer) {\n    return;\n  }\n\n  Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n    container.insertAdjacentHTML('afterbegin', html);\n\n    initializeCheckboxes(selector, idstring, encodedtable);\n\n    return;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n};\n\n/**\n * Update Filter counter.\n *\n * @param {*} name\n * @param {*} selector\n * @param {*} idstring\n *\n *\n */\nfunction updateFilterCounter(name, selector, idstring) {\n\n  const wbTable = document.querySelector(selector);\n\n  let counter = checked[idstring][name] ? checked[idstring][name].length : 0;\n  if ((counter > 0 && (typeof checked[idstring][name] === 'string') ||\n    (typeof checked[idstring][name] === 'object' && !Array.isArray(checked[idstring][name])))) {\n    // Handle different cases of filters here (datepicker, intrange).\n    // TODO: Find a better marker for difference of filters.\n    counter = 1;\n  }\n\n  const labelElement = wbTable.querySelector('[data-ident=' + name + '] span.filtercounter');\n\n  if (labelElement) {\n\n    if (counter > 0) {\n      labelElement.classList.remove('hidden');\n    } else {\n      labelElement.classList.add('hidden');\n    }\n    labelElement.textContent = counter;\n  }\n\n  const totalfiltercounter = checked[idstring] ? Object.keys(checked[idstring]).length : 0;\n  const resetElement = wbTable.querySelector('.reset-filter-button');\n\n  if (resetElement) {\n    if (totalfiltercounter > 0) {\n      resetElement.classList.remove('hidden');\n    } else {\n      resetElement.classList.add('hidden');\n    }\n  }\n}\n\n/**\n * Attach a click listener for these checkboxes to check all boxes in category.\n *\n * @param {*} parentCheckboxes\n * @param {*} filterElements\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n *\n */\nfunction handleHierarchyCategoryCheckbox(parentCheckboxes, filterElements, selector, idstring, encodedtable) {\n    parentCheckboxes.forEach(parentCheckbox => {\n      parentCheckbox.addEventListener('click', function() {\n            // Get the closest parent <ul> element\n            const wrapper = parentCheckbox.closest('ul');\n\n            // Find all child checkboxes inside this <ul>\n            const childCheckboxes = wrapper.querySelectorAll('.form-check-input');\n\n            childCheckboxes.forEach(childCheckbox => {\n                // Only click if current state doesn't match parent\n                if (childCheckbox.checked !== parentCheckbox.checked) {\n                    childCheckbox.checked = parentCheckbox.checked; // Triggers associated JS\n                }\n            });\n            filterElements.forEach(element => {\n              getChecked(element.name, selector, idstring);\n            });\n            triggerReload(idstring, encodedtable);\n        });\n    });\n}"],"names":["selector","idstring","encodedtable","container","document","querySelector","button","console","log","addEventListener","componentscontainer","remove","resetCheckedObject","sort","filterobjects","searchstring","dir","url","formelement","URL","getAttribute","e","params","searchParams","delete","append","action","toString","window","location","href","history","replaceState","pushState","checked","initializeCheckboxes","filterContainer","SELECTORS","FILTER","dataset","initialized","selects","querySelectorAll","filterElements","hierarchcheckboxes","hasOwnProperty","forEach","element","getChecked","name","applyChangelistener","parentCheckboxes","parentCheckbox","closest","childCheckbox","triggerReload","handleHierarchyCategoryCheckbox","nodelist","el","idstring2","event","toggleFilterelement","stopPropagation","preventDefault","setTimeout","target","type","checkbox","wrapper","siblingCheckboxes","Array","from","every","cb","some","handleParentCheckbox","dateelement","getDates","intrangeelement","includes","getIntRange","getFilterObjects","columnname","filtercontainer","filtername","filtercheckbox","dates","timespan","startdate","getDateAndTimePickerDataAsUnix","enddate","setDateAndTimePickerDataFromUnix","compareDateValues","operator","value","firstcolumn","applytocolumn","firstoperator","additionalFirstColumnValues","valuefirstcolumn","secondcolumn","secondoperator","additionalSecondColumnValues","valuesecondcolumn","Number","isInteger","applySpanfilter","unsetEmptyFieldsInCheckedObject","setTimespanFilter","String","Object","keys","key","okey","updateFilterCounter","id","timestamp","dateobject","Date","datepicker","toISOString","split","timepicker","toLocaleTimeString","slice","column","length","col","isArray","additionalvaluesObject","key1","key2","date","time","unixTimestamp","parse","wbTable","filter","map","fromvalue","tovalue","colname","isInt","str","isNaN","parseInt","isFinite","trim","alertelement","setAttribute","removeAttribute","hasvalues","entries","JSON","stringify","counter","labelElement","classList","add","textContent","totalfiltercounter","resetElement","filterjson","CONTAINER","renderForPromise","then","_ref","html","insertAdjacentHTML","catch"],"mappings":"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"}