{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\n export function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n\n  if (!filterElements) {\n      return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  filterElements.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      el.addEventListener(\"change\", (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n  });\n\n  filterContainer.dataset.initialized = true;\n}\n\n\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  // Check if Checkbox corresponds to datepicker\n  if (e.target.dataset.dateelement == 'dateelement') {\n    getDates(e, selector, idstring);\n  } else {\n    getChecked(e.target.name, selector, idstring);\n  }\n\n\n  // Reload the filtered elements via ajax.\n\n  const filterobjects = getFilterObjects(idstring);\n  const searchstring = getSearchInput(idstring);\n  const sort = getSortSelection(idstring);\n\n  // The filter reloads data from the Server.\n  // Because of pages and infinite scroll we don't have the data to do without.\n  callLoadData(idstring,\n    encodedtable,\n    0, // Pagenumber is always rest to 0.\n    null,\n    sort,\n    null,\n    null,\n    null,\n    filterobjects,\n    searchstring);\n}\n\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getDates(e, selector, idstring) {\n\n  // We might have more than one Table, therefore we first have to get all tables.\n  const wbTableFilter = document.querySelector(selector);\n\n  let name = e.target.name;\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = wbTableFilter.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.checked) {\n    dates[e.target.dataset.operator] = getDateAndTimePickerDataAsUnix(name, filtername, selector);\n    // eslint-disable-next-line no-console\n    console.log(getDateAndTimePickerDataAsUnix(filtername));\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(dates);\n\n  // We prepare the array.\n  if (!checked[idstring][name]) {\n    checked[idstring][name] = [];\n  }\n  // Set the date params.\n  checked[idstring][name][filtername] = dates;\n\n  /*\n  // Clean up array if filter params deleted.\n  if (checked[idstring][name][filtername].length < 1) {\n    delete checked[idstring][name][filtername];\n  }\n  if (checked[idstring][name].length < 1) {\n    delete checked[idstring][name];\n  }\n  */\n  // eslint-disable-next-line no-console\n  console.log(checked);\n\n\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {string} name\n * @param {string} filtername\n * @param {string} selector\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(name, filtername, selector) {\n\n  const wbTable = document.querySelector(selector);\n\n  let datepicker = wbTable.querySelector('input[type=\"date\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n  let date = new Date(datepicker.value);\n\n  let timepicker = wbTable.querySelector('input[type=\"time\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n  let time = timepicker.value;\n\n  let dateTimeString = date.toISOString().split('T')[0] + 'T' + time + ':00.000Z';\n  let unixTimestamp = Date.parse(dateTimeString) / 1000;\n  return unixTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  url.search = \"\";\n  history.replaceState(null, '', url);\n\n      // eslint-disable-next-line no-console\n      console.log(\"filter \", filterobjects);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n  /**\n   * Gets an array of checkboxes for every table by idstring.\n   * @param {*} name\n   * @param {*} selector\n   * @param {*} idstring\n   */\n   export function getChecked(name, selector, idstring) {\n\n    // We might have more than one Table, therefore we first have to get all tables.\n\n    const wbTable = document.querySelector(selector);\n\n    checked[idstring][name] = Array.from(\n      wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n    ).filter(function(el) {\n      return el.checked;\n    }).map(function(el) {\n      return el.value;\n    });\n\n    // eslint-disable-next-line no-console\n    console.log(\"checked[idstring][name] \" + checked[idstring][name]);\n\n    // If there are no checked boxes, we unset the key alltogether.\n    if (checked[idstring][name].length < 1) {\n      delete checked[idstring][name];\n    }\n  }\n\n  /**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  let hasvalues = false;\n  // eslint-disable-next-line no-unused-vars\n  for (const [key, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\n    export const renderFilter = (filterjson, idstring, encodedtable) => {\n\n    // We render the filter only once, so if we find it already, we don't render it.\n\n    const selector = SELECTORS.CONTAINER + idstring;\n    const container = document.querySelector(selector);\n    const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n    if (filtercontainer) {\n      return;\n    }\n\n    Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n        container.insertAdjacentHTML('afterbegin', html);\n\n        initializeCheckboxes(selector, idstring, encodedtable);\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n};"],"names":["filterobjects","searchstring","sort","dir","url","URL","window","location","href","search","history","replaceState","console","log","searchParams","append","pushState","toString","checked","initializeCheckboxes","selector","idstring","encodedtable","filterContainer","document","querySelector","SELECTORS","FILTER","dataset","initialized","filterElements","querySelectorAll","hasOwnProperty","forEach","el","idstring2","addEventListener","e","toggleFilterelement","stopPropagation","preventDefault","target","dateelement","getDates","getChecked","name","getFilterObjects","wbTableFilter","filtername","dates","operator","getDateAndTimePickerDataAsUnix","wbTable","datepicker","date","Date","value","time","dateTimeString","toISOString","split","parse","Array","from","filter","map","length","hasvalues","key","Object","entries","keys","JSON","stringify","filterjson","CONTAINER","container","renderForPromise","then","_ref","html","insertAdjacentHTML","catch"],"mappings":"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"}