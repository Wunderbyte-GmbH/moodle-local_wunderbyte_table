{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\n export function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n  const selects = filterContainer.querySelectorAll(\"select[id^='filteroperationselect']\");\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n\n  if (!filterElements) {\n      return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  applyChangelistener(filterElements, selector, idstring, encodedtable);\n  applyChangelistener(selects, selector, idstring, encodedtable);\n\n  filterContainer.dataset.initialized = true;\n}\n/**\n * Apply change listener to list of nodes.\n * @param {*} nodelist\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction applyChangelistener(nodelist, selector, idstring, encodedtable) {\n  if (nodelist) {\n    nodelist.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      el.addEventListener(\"change\", (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n    });\n  }\n}\n\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  // Check if Checkbox corresponds to datepicker\n  if (e.target.dataset.dateelement == 'dateelement') {\n    getDates(e, idstring);\n  } else {\n    getChecked(e.target.name, selector, idstring);\n  }\n\n  // Reload the filtered elements via ajax.\n  const filterobjects = getFilterObjects(idstring);\n  const searchstring = getSearchInput(idstring);\n  const sort = getSortSelection(idstring);\n\n  // The filter reloads data from the Server.\n  // Because of pages and infinite scroll we don't have the data to do without.\n  callLoadData(idstring,\n    encodedtable,\n    0, // Pagenumber is always rest to 0.\n    null,\n    sort,\n    null,\n    null,\n    null,\n    filterobjects,\n    searchstring);\n}\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} idstring\n */\nexport function getDates(e, idstring) {\n\n  let name = e.target.dataset.columnname;\n  let filtercontainer = e.target.closest(\".datepickerform\");\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = filtercontainer.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.dataset.timespan === \"true\") {\n    compareDateValues(e, filtercontainer);\n  }\n  if (filtercheckbox.checked) {\n    // Check if we have a timespan filter or a single one.\n    if (filtercheckbox.dataset.timespan === \"true\") {\n      setTimespanFilter(filtercontainer, filtername, idstring, name);\n    } else {\n      dates[filtercheckbox.operator] = getDateAndTimePickerDataAsUnix(filtercontainer, \"datefilter\");\n      // Check if key is set in array, otherwise set new key.\n      if (name && filtername) {\n        if (!checked[idstring][name]) {\n          checked[idstring][name] = {};\n        }\n        checked[idstring][name][filtername] = dates;\n      }\n      unsetEmptyFieldsInCheckedObject(name, filtername, idstring);\n    }\n  } else { // If checkbox of filter is unchecked: unset values in checked object.\n    resetCheckedObject(idstring, name, filtername);\n    unsetEmptyFieldsInCheckedObject(name, null, idstring);\n    // Vorher noch ein if exists etc.\n    Object.keys(checked[idstring]).forEach(function(key) {\n        Object.keys(checked[idstring][key]).forEach(function(okey) {\n            if (okey == filtername) {\n              resetCheckedObject(idstring, key, filtername);\n              unsetEmptyFieldsInCheckedObject(key, null, idstring);\n            }\n          }\n        );\n      }\n    );\n  }\n}\n\n/**\n * Check if date and time value set in first timepicker is before second timepicker.\n * @param {*} e // The element that triggerd the change.\n * @param {*} filtercontainer\n */\nfunction compareDateValues(e, filtercontainer) {\n  let startdate = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n  let enddate = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n  // We make sure the entered enddate is after 2020, to avoid triggering change while date setting is not finished yet.\n  if ((enddate / 1000 > 1577836800) && (startdate > enddate)) {\n    // eslint-disable-next-line no-console\n    console.error(\"starttime should be before endtime\");\n    // Apply change.\n    setDateAndTimePickerDataFromUnix(filtercontainer, 'startdate', enddate);\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id // Id of the date- and timepicker, the value should be applied to.\n * @param {integer} timestamp\n */\nexport function setDateAndTimePickerDataFromUnix(filtercontainer, id = '', timestamp) {\n\n  let dateobject = new Date(timestamp);\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  datepicker.value = dateobject.toISOString().split('T')[0];\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  timepicker.value = dateobject.toLocaleTimeString().slice(0, 5);\n}\n\n/**\n * Applying a timespan filter.\n * @param {*} filtercontainer\n * @param {string} filtername\n * @param {string} idstring\n * @param {string} name\n */\nfunction setTimespanFilter(filtercontainer, filtername, idstring, name) {\n  // Selector defined the operators.\n  let select = filtercontainer.querySelector('select[id^=\"filteroperationselect\"][name=\"' + name + '\"]');\n  let operator = select.value;\n\n  // First Column to apply the filter to\n  let startdatepicker = filtercontainer.querySelector('input[id^=\"startdate\"]');\n  let firstcolumn = startdatepicker.dataset.applytocolumn;\n  let firstoperator = \"\";\n  let additionalFirstColumnValues = {};\n  let valuefirstcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\") / 1000;\n\n  // Second Column to apply the filter to\n  let enddatepicker = filtercontainer.querySelector('input[id^=\"enddate\"]');\n  let secondcolumn = enddatepicker.dataset.applytocolumn;\n  let secondoperator = \"\";\n  let additionalSecondColumnValues = {};\n  let valuesecondcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\") / 1000;\n\n  if (!Number.isInteger(valuefirstcolumn) || !Number.isInteger(valuefirstcolumn)) {\n    return;\n  }\n\n  // Unset the values of the span filter in checked object.\n  resetCheckedObject(idstring, firstcolumn, filtername);\n  resetCheckedObject(idstring, secondcolumn, filtername);\n\n  switch (operator) {\n    case \"within\":\n      firstoperator = \">=\";\n      secondoperator = \"<=\";\n      break;\n    case \"overlapboth\":\n      firstoperator = \"<=\";\n      secondoperator = \">=\";\n      break;\n    case \"overlapstart\":\n      firstoperator = \"<=\";\n      additionalSecondColumnValues[\">=\"] = valuefirstcolumn;\n      secondoperator = \"<=\";\n      break;\n    case \"overlapend\":\n      firstoperator = \">=\";\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\"<=\"] = valuesecondcolumn;\n      break;\n    case \"before\":\n      firstoperator = \"<\";\n      additionalSecondColumnValues[\"<=\"] = valuefirstcolumn;\n      secondoperator = \"<\";\n      break;\n    case \"after\":\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\">=\"] = valuesecondcolumn;\n      firstoperator = \">\";\n      break;\n    default:\n    // eslint-disable-next-line no-console\n    console.error(\"Value of selection not readable\");\n    break;\n  }\n  applySpanfilter(firstcolumn, valuefirstcolumn, filtername, firstoperator, additionalFirstColumnValues, idstring);\n  applySpanfilter(secondcolumn, valuesecondcolumn, filtername, secondoperator, additionalSecondColumnValues, idstring);\n\n  // Unsetting the timespan filter if empty\n  if (firstcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(firstcolumn, filtername, idstring);\n  }\n  if (secondcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(secondcolumn, filtername, idstring);\n  }\n}\n\n/**\n *  Check if filter object already exisits and unset values.\n * @param {string} idstring\n * @param {string} column\n * @param {string} filtername\n */\nfunction resetCheckedObject(idstring, column, filtername) {\n  if (checked[idstring].hasOwnProperty(column)) {\n    if (checked[idstring][column].hasOwnProperty(filtername)) {\n      delete checked[idstring][column][filtername];\n    }\n    if (checked[idstring][column].hasOwnProperty(filtername + 'a')) {\n      delete checked[idstring][column][filtername + 'a'];\n    }\n  }\n}\n\n/**\n *  Check if object already exisits and set values.\n * @param {string} column\n * @param {*} value\n * @param {string} filtername\n * @param {string} operator\n * @param {*} additionalvaluesObject\n * @param {string} idstring\n */\nfunction applySpanfilter(column, value, filtername, operator, additionalvaluesObject, idstring) {\n  if (operator.length >= 1) {\n    if (column && filtername) {\n      if (!checked[idstring][column]) {\n        checked[idstring][column] = {};\n      }\n      if (!checked[idstring][column][filtername]) {\n        checked[idstring][column][filtername] = {};\n      }\n      checked[idstring][column][filtername][operator] = value;\n      if (Object.keys(additionalvaluesObject).length > 0) {\n        checked[idstring][column][filtername + 'a'] = additionalvaluesObject;\n      }\n    }\n  }\n}\n\n/**\n * Unsetting empty keys in checked object. If a filter param was created and deleted later on we will need this.\n * @param {*} key1\n * @param {*} key2\n * @param {string} idstring\n */\nfunction unsetEmptyFieldsInCheckedObject(key1, key2, idstring) {\n  if (checked[idstring][key1]) {\n    if (checked[idstring][key1][key2]) {\n      if (Object.keys(checked[idstring][key1][key2]).length < 1) {\n        delete checked[idstring][key1][key2];\n      }\n    }\n  }\n\n  if (checked[idstring][key1]) {\n    if (Object.keys(checked[idstring][key1]).length < 1) {\n      delete checked[idstring][key1];\n    }\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(filtercontainer, id = '') {\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  let date = datepicker.value;\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  let time = timepicker.value;\n\n  let unixTimestamp = Date.parse(date + ' ' + time);\n  let tenDigitTimestamp = unixTimestamp;\n\n  return tenDigitTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  window.history.replaceState(null, '', url);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n  /**\n   * Gets an array of checkboxes for every table by idstring.\n   * @param {*} name\n   * @param {*} selector\n   * @param {*} idstring\n   */\n   export function getChecked(name, selector, idstring) {\n\n    // We might have more than one Table, therefore we first have to get all tables.\n\n    const wbTable = document.querySelector(selector);\n\n    checked[idstring][name] = Array.from(\n      wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n    ).filter(function(el) {\n      return el.checked;\n    }).map(function(el) {\n      return el.value;\n    });\n\n    // If there are no checked boxes, we unset the key alltogether.\n    if (checked[idstring][name].length < 1) {\n      delete checked[idstring][name];\n    }\n  }\n\n/**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  let hasvalues = false;\n  // eslint-disable-next-line no-unused-vars\n\n  for (const [, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\n    export const renderFilter = (filterjson, idstring, encodedtable) => {\n\n    // We render the filter only once, so if we find it already, we don't render it.\n\n    const selector = SELECTORS.CONTAINER + idstring;\n    const container = document.querySelector(selector);\n    const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n    if (filtercontainer) {\n      return;\n    }\n\n    Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n        container.insertAdjacentHTML('afterbegin', html);\n\n        initializeCheckboxes(selector, idstring, encodedtable);\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n};"],"names":["filterobjects","searchstring","sort","dir","url","URL","window","location","href","params","searchParams","delete","history","replaceState","append","pushState","toString","checked","initializeCheckboxes","selector","idstring","encodedtable","filterContainer","document","querySelector","SELECTORS","FILTER","dataset","initialized","selects","querySelectorAll","filterElements","hasOwnProperty","applyChangelistener","nodelist","forEach","el","idstring2","addEventListener","e","toggleFilterelement","stopPropagation","preventDefault","target","dateelement","getDates","getChecked","name","getFilterObjects","columnname","filtercontainer","closest","filtername","filtercheckbox","dates","timespan","startdate","getDateAndTimePickerDataAsUnix","enddate","console","error","setDateAndTimePickerDataFromUnix","compareDateValues","operator","value","firstcolumn","applytocolumn","firstoperator","additionalFirstColumnValues","valuefirstcolumn","secondcolumn","secondoperator","additionalSecondColumnValues","valuesecondcolumn","Number","isInteger","resetCheckedObject","applySpanfilter","unsetEmptyFieldsInCheckedObject","setTimespanFilter","Object","keys","key","okey","id","timestamp","dateobject","Date","datepicker","toISOString","split","timepicker","toLocaleTimeString","slice","column","additionalvaluesObject","length","key1","key2","date","time","unixTimestamp","parse","wbTable","Array","from","filter","map","hasvalues","entries","JSON","stringify","filterjson","CONTAINER","container","renderForPromise","then","_ref","html","insertAdjacentHTML","catch","log"],"mappings":"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"}