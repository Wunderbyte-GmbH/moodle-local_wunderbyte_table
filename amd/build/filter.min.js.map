{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\n export function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n  const selects = filterContainer.querySelectorAll(\"select[id^='filteroperationselect']\");\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n\n  if (!filterElements) {\n      return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  filterElements.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      el.addEventListener(\"change\", (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n  });\n  selects.forEach(el => {\n\n    if (!el.dataset.idstring) {\n      el.dataset.idstring = idstring;\n    } else {\n      el.dataset.idstring2 = idstring;\n    }\n    el.addEventListener(\"change\", (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n});\n\n  filterContainer.dataset.initialized = true;\n}\n\n\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  // Check if Checkbox corresponds to datepicker\n  if (e.target.dataset.dateelement == 'dateelement') {\n    // eslint-disable-next-line no-console\n    console.log(\"dateelement\");\n    getDates(e, selector, idstring);\n  } else {\n    getChecked(e.target.name, selector, idstring);\n  }\n\n\n  // Reload the filtered elements via ajax.\n\n  const filterobjects = getFilterObjects(idstring);\n  const searchstring = getSearchInput(idstring);\n  const sort = getSortSelection(idstring);\n\n  // The filter reloads data from the Server.\n  // Because of pages and infinite scroll we don't have the data to do without.\n  callLoadData(idstring,\n    encodedtable,\n    0, // Pagenumber is always rest to 0.\n    null,\n    sort,\n    null,\n    null,\n    null,\n    filterobjects,\n    searchstring);\n}\n\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getDates(e, selector, idstring) {\n\n  let name = e.target.name;\n  let filtercontainer = e.target.closest(\".datepickerform\");\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = filtercontainer.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.checked) {\n    // Check how many date- and timepicker are there\n    if (filtercheckbox.dataset.timespan === \"true\") {\n      // Getting all the values we need for the filter.\n      // Selector defined the operators.\n      let select = filtercontainer.querySelector('select[id^=\"filteroperationselect\"][name=\"' + name + '\"]');\n      let operator = select.value;\n\n      // First Column to apply the filter to\n      let startdatepicker = filtercontainer.querySelector('input[id^=\"startdate\"]');\n      let firstcolumn = startdatepicker.dataset.applytocolumn;\n      let firstoperator = \"\";\n      let firstColumnValues = {};\n\n      // Second Column to apply the filter to\n      let enddatepicker = filtercontainer.querySelector('input[id^=\"enddate\"]');\n      let secondcolumn = enddatepicker.dataset.applytocolumn;\n      let secondoperator = \"\";\n      let secondColumnValues = {};\n\n      switch (operator) {\n        case \"within\":\n          // eslint-disable-next-line no-console\n          console.log(\"within switch operator\");\n          firstoperator = \"<\";\n          secondoperator = \">\";\n        break;\n\n        default: break;\n      }\n      firstColumnValues[firstoperator] = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n      secondColumnValues[secondoperator] = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n      // eslint-disable-next-line no-console\n      console.log(firstColumnValues);\n\n      // Setting values for first columns.\n      // Check if key is set in array, otherwise set new key.\n      if (firstcolumn && filtername) {\n        if (!checked[idstring][firstcolumn]) {\n          checked[idstring][firstcolumn] = {};\n        }\n        checked[idstring][firstcolumn][filtername] = firstColumnValues;\n      }\n      if (Object.keys(checked[idstring][firstcolumn][filtername]).length < 1) {\n        delete checked[idstring][firstcolumn][filtername];\n      }\n      if (Object.keys(checked[idstring][firstcolumn]).length < 1) {\n        delete checked[idstring][firstcolumn];\n      }\n\n      // eslint-disable-next-line max-len\n      // TODO: unsetting firstcolumn funktioniert noch nicht, setzen zweites, alles fälle im switch, schauen ob angewendet, frage ob labes als key überhaupt sinnvoll?\n\n          // eslint-disable-next-line no-console\n          console.log(secondcolumn);\n        //checked[idstring][secondcolumn][filtername] = secondColumnValues;\n\n    } else {\n\n      dates[filtercheckbox.dataset.operator] = getDateAndTimePickerDataAsUnix(filtercontainer, \"datefilter\");\n\n      // Check if key is set in array, otherwise set new key.\n      if (name && filtername) {\n        if (!checked[idstring][name]) {\n          checked[idstring][name] = {};\n        }\n        checked[idstring][name][filtername] = dates;\n      }\n      if (Object.keys(checked[idstring][name][filtername]).length < 1) {\n        delete checked[idstring][name][filtername];\n      }\n      if (Object.keys(checked[idstring][name]).length < 1) {\n        delete checked[idstring][name];\n      }\n    }\n  }\n  // eslint-disable-next-line no-console\n  console.log(checked);\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(filtercontainer, id = '') {\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  let date = new Date(datepicker.value);\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  let time = timepicker.value;\n\n  let dateTimeString = date.toISOString().split('T')[0] + 'T' + time + ':00.000Z';\n  let unixTimestamp = Date.parse(dateTimeString) / 1000;\n\n  return unixTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  url.search = \"\";\n  history.replaceState(null, '', url);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n  /**\n   * Gets an array of checkboxes for every table by idstring.\n   * @param {*} name\n   * @param {*} selector\n   * @param {*} idstring\n   */\n   export function getChecked(name, selector, idstring) {\n\n    // We might have more than one Table, therefore we first have to get all tables.\n\n    const wbTable = document.querySelector(selector);\n\n    checked[idstring][name] = Array.from(\n      wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n    ).filter(function(el) {\n      return el.checked;\n    }).map(function(el) {\n      return el.value;\n    });\n\n    // If there are no checked boxes, we unset the key alltogether.\n    if (checked[idstring][name].length < 1) {\n      delete checked[idstring][name];\n    }\n  }\n\n  /**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  let hasvalues = false;\n  // eslint-disable-next-line no-unused-vars\n\n  for (const [, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\n    export const renderFilter = (filterjson, idstring, encodedtable) => {\n\n    // We render the filter only once, so if we find it already, we don't render it.\n\n    const selector = SELECTORS.CONTAINER + idstring;\n    const container = document.querySelector(selector);\n    const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n    if (filtercontainer) {\n      return;\n    }\n\n    Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n        container.insertAdjacentHTML('afterbegin', html);\n\n        initializeCheckboxes(selector, idstring, encodedtable);\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n};"],"names":["filterobjects","searchstring","sort","dir","url","URL","window","location","href","search","history","replaceState","searchParams","append","pushState","toString","checked","initializeCheckboxes","selector","idstring","encodedtable","filterContainer","document","querySelector","SELECTORS","FILTER","dataset","initialized","selects","querySelectorAll","filterElements","hasOwnProperty","forEach","el","idstring2","addEventListener","e","toggleFilterelement","stopPropagation","preventDefault","target","dateelement","console","log","getDates","getChecked","name","getFilterObjects","filtercontainer","closest","filtername","filtercheckbox","dates","timespan","operator","value","firstcolumn","applytocolumn","firstoperator","firstColumnValues","secondcolumn","secondoperator","secondColumnValues","getDateAndTimePickerDataAsUnix","Object","keys","length","id","datepicker","date","Date","timepicker","time","dateTimeString","toISOString","split","unixTimestamp","parse","wbTable","Array","from","filter","map","hasvalues","entries","JSON","stringify","filterjson","CONTAINER","container","renderForPromise","then","_ref","html","insertAdjacentHTML","catch"],"mappings":"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"}