{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\n export function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n  const selects = filterContainer.querySelectorAll(\"select[id^='filteroperationselect']\");\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n\n  if (!filterElements) {\n      return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  // We run through all the filter elements and make sure that we store the state we received from php.\n  filterElements.forEach(element => {\n    // eslint-disable-next-line no-console\n    console.log(element.name);\n    getChecked(element.name, selector, idstring);\n  });\n\n  applyChangelistener(filterElements, selector, idstring, encodedtable);\n  applyChangelistener(selects, selector, idstring, encodedtable);\n\n  filterContainer.dataset.initialized = true;\n}\n/**\n * Apply change listener to list of nodes.\n * @param {*} nodelist\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction applyChangelistener(nodelist, selector, idstring, encodedtable) {\n  if (nodelist) {\n    nodelist.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      [\"change\", \"keyup\"].forEach(event => {\n        el.addEventListener(event, (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n      });\n    });\n  }\n}\n/**\n * Init for button to reset all filter and searchparams.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function initializeResetFilterButton(selector, idstring, encodedtable) {\n  const container = document.querySelector(selector);\n  if (!container) {\n    return;\n  }\n  let button = container.querySelector(\".reset-filter-button\");\n\n  // eslint-disable-next-line no-console\n  console.log(button);\n\n  if (!button) {\n    return;\n  }\n  button.addEventListener('click', () => {\n\n    if (!container) {\n      return;\n    }\n\n    const componentscontainer = container.querySelector(\".wunderbyte_table_components\");\n\n    if (!componentscontainer) {\n      return;\n    }\n\n    componentscontainer.remove();\n\n    resetCheckedObject(idstring);\n\n    const sort = getSortSelection(idstring);\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      \"\",\n      \"\");\n  });\n}\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  setTimeout(() => {\n    // Check if Checkbox corresponds to datepicker\n    if (e.target.dataset.dateelement == 'dateelement') {\n      getDates(e, selector, idstring);\n    } else if (e.target.dataset.intrangeelement && e.target.dataset.intrangeelement.includes('intrangeelement')) {\n      getIntRange(e, selector, idstring);\n      // eslint-disable-next-line no-console\n      console.log(\"intrangeelement\");\n    } else {\n      getChecked(e.target.name, selector, idstring);\n    }\n\n    // Reload the filtered elements via ajax.\n    const filterobjects = getFilterObjects(idstring);\n          // eslint-disable-next-line no-console\n          console.log(\"filterobjects: \" + filterobjects);\n    const searchstring = getSearchInput(idstring);\n    const sort = getSortSelection(idstring);\n\n    // The filter reloads data from the Server.\n    // Because of pages and infinite scroll we don't have the data to do without.\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      filterobjects,\n      searchstring);\n  }, 400);\n}\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getDates(e, selector, idstring) {\n\n  let name = e.target.dataset.columnname;\n  let filtercontainer = e.target.closest(\".datepickerform\");\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = filtercontainer.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.dataset.timespan === \"true\") {\n    compareDateValues(e, filtercontainer);\n  }\n  if (filtercheckbox.checked) {\n    // Check if we have a timespan filter or a single one.\n    if (filtercheckbox.dataset.timespan === \"true\") {\n      setTimespanFilter(filtercontainer, filtername, idstring, name);\n    } else {\n      dates[String(filtercheckbox.dataset.operator)] = getDateAndTimePickerDataAsUnix(filtercontainer, \"datefilter\") / 1000;\n      // Check if key is set in array, otherwise set new key.\n      if (name && filtername) {\n        if (!checked[idstring][name]) {\n          checked[idstring][name] = {};\n        }\n        checked[idstring][name][filtername] = dates;\n      }\n      unsetEmptyFieldsInCheckedObject(name, filtername, idstring);\n    }\n  } else { // If checkbox of filter is unchecked: unset values in checked object.\n    resetCheckedObject(idstring, name, filtername);\n    unsetEmptyFieldsInCheckedObject(name, null, idstring);\n    // Vorher noch ein if exists etc.\n    Object.keys(checked[idstring]).forEach(function(key) {\n        Object.keys(checked[idstring][key]).forEach(function(okey) {\n            if (okey == filtername) {\n              resetCheckedObject(idstring, key, filtername);\n              unsetEmptyFieldsInCheckedObject(key, null, idstring);\n            }\n          }\n        );\n      }\n    );\n  }\n  updateFilterCounter(name, selector, idstring);\n}\n\n/**\n * Check if date and time value set in first timepicker is before second timepicker.\n * @param {*} e // The element that triggerd the change.\n * @param {*} filtercontainer\n */\nfunction compareDateValues(e, filtercontainer) {\n  let startdate = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n  let enddate = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n  // We make sure the entered enddate is after 2020, to avoid triggering change while date setting is not finished yet.\n  if ((enddate / 1000 > 1577836800) && (startdate > enddate)) {\n    // Apply change.\n    setDateAndTimePickerDataFromUnix(filtercontainer, 'startdate', enddate);\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id // Id of the date- and timepicker, the value should be applied to.\n * @param {integer} timestamp\n */\nexport function setDateAndTimePickerDataFromUnix(filtercontainer, id = '', timestamp) {\n\n  let dateobject = new Date(timestamp);\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  datepicker.value = dateobject.toISOString().split('T')[0];\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  timepicker.value = dateobject.toLocaleTimeString().slice(0, 5);\n}\n\n/**\n * Applying a timespan filter.\n * @param {*} filtercontainer\n * @param {string} filtername\n * @param {string} idstring\n * @param {string} name\n */\nfunction setTimespanFilter(filtercontainer, filtername, idstring, name) {\n  // Selector defined the operators.\n  let select = filtercontainer.querySelector('select[id^=\"filteroperationselect\"][name=\"' + name + '\"]');\n  let operator = select.value;\n\n  // First Column to apply the filter to\n  let startdatepicker = filtercontainer.querySelector('input[id^=\"startdate\"]');\n  let firstcolumn = startdatepicker.dataset.applytocolumn;\n  let firstoperator = \"\";\n  let additionalFirstColumnValues = {};\n  let valuefirstcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\") / 1000;\n\n  // Second Column to apply the filter to\n  let enddatepicker = filtercontainer.querySelector('input[id^=\"enddate\"]');\n  let secondcolumn = enddatepicker.dataset.applytocolumn;\n  let secondoperator = \"\";\n  let additionalSecondColumnValues = {};\n  let valuesecondcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\") / 1000;\n\n  if (!Number.isInteger(valuefirstcolumn) || !Number.isInteger(valuefirstcolumn)) {\n    return;\n  }\n\n  // Unset the values of the span filter in checked object.\n  resetCheckedObject(idstring, firstcolumn, filtername);\n  resetCheckedObject(idstring, secondcolumn, filtername);\n\n  switch (operator) {\n    case \"within\":\n      firstoperator = \">=\";\n      secondoperator = \"<=\";\n      break;\n    case \"overlapboth\":\n      firstoperator = \"<=\";\n      secondoperator = \">=\";\n      break;\n    case \"overlapstart\":\n      firstoperator = \"<=\";\n      additionalSecondColumnValues[\">=\"] = valuefirstcolumn;\n      secondoperator = \"<=\";\n      break;\n    case \"overlapend\":\n      firstoperator = \">=\";\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\"<=\"] = valuesecondcolumn;\n      break;\n    case \"before\":\n      firstoperator = \"<\";\n      additionalSecondColumnValues[\"<=\"] = valuefirstcolumn;\n      secondoperator = \"<\";\n      break;\n    case \"after\":\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\">=\"] = valuesecondcolumn;\n      firstoperator = \">\";\n      break;\n    case \"flexoverlap\":\n      firstoperator = \"fo\";\n      secondoperator = \"fo\";\n      break;\n    default:\n    break;\n  }\n  applySpanfilter(firstcolumn, valuefirstcolumn, filtername, firstoperator, additionalFirstColumnValues, idstring);\n  applySpanfilter(secondcolumn, valuesecondcolumn, filtername, secondoperator, additionalSecondColumnValues, idstring);\n\n  // Unsetting the timespan filter if empty\n  if (firstcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(firstcolumn, filtername, idstring);\n  }\n  if (secondcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(secondcolumn, filtername, idstring);\n  }\n}\n\n/**\n *  Check if filter object already exisits and unset values.\n * @param {string} idstring\n * @param {string} column\n * @param {string} filtername\n */\nfunction resetCheckedObject(idstring, column = '', filtername = '') {\n\n  // If no column is specified, we reset all the filters.\n  if (column.length === 0) {\n\n    Object.keys(checked[idstring]).forEach(col => {\n      checked[idstring][col] = [];\n    });\n  } else {\n    if (checked[idstring].hasOwnProperty(column)) {\n      if (checked[idstring][column].hasOwnProperty(filtername)) {\n        delete checked[idstring][column][filtername];\n      }\n      if (checked[idstring][column].hasOwnProperty(filtername + 'a')) {\n        delete checked[idstring][column][filtername + 'a'];\n      }\n    }\n  }\n}\n\n/**\n *  Check if object already exisits and set values.\n * @param {string} column\n * @param {*} value\n * @param {string} filtername\n * @param {string} operator\n * @param {*} additionalvaluesObject\n * @param {string} idstring\n */\nfunction applySpanfilter(column, value, filtername, operator, additionalvaluesObject, idstring) {\n  if (operator.length >= 1) {\n    if (column && filtername) {\n      if (!checked[idstring][column]) {\n        checked[idstring][column] = {};\n      }\n      if (!checked[idstring][column][filtername]) {\n        checked[idstring][column][filtername] = {};\n      }\n      checked[idstring][column][filtername][operator] = value;\n      if (Object.keys(additionalvaluesObject).length > 0) {\n        checked[idstring][column][filtername + 'a'] = additionalvaluesObject;\n      }\n    }\n  }\n}\n\n/**\n * Unsetting empty keys in checked object. If a filter param was created and deleted later on we will need this.\n * @param {*} key1\n * @param {*} key2\n * @param {string} idstring\n */\nfunction unsetEmptyFieldsInCheckedObject(key1, key2, idstring) {\n  if (checked[idstring][key1]) {\n    if (checked[idstring][key1][key2]) {\n      if (Object.keys(checked[idstring][key1][key2]).length < 1) {\n        delete checked[idstring][key1][key2];\n      }\n    }\n  }\n\n  if (checked[idstring][key1]) {\n    if (Object.keys(checked[idstring][key1]).length < 1) {\n      delete checked[idstring][key1];\n    }\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(filtercontainer, id = '') {\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  let date = datepicker.value;\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  let time = timepicker.value;\n\n  let unixTimestamp = Date.parse(date + ' ' + time);\n  let tenDigitTimestamp = unixTimestamp;\n\n  return tenDigitTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  window.history.replaceState(null, '', url);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} idstring\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateDownloadUrlWithFilterSearchSort(idstring, filterobjects, searchstring, sort, dir) {\n\n  // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n  let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n  if (!container) {\n      return;\n  }\n\n  let url = '';\n  let formelement = null;\n  try {\n    formelement = container.querySelector('form.wb-table-download-buttons');\n    url = new URL(formelement.getAttribute('action'));\n  } catch (e) {\n\n    // eslint-disable-next-line no-console\n    console.log(e);\n    return;\n  }\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  formelement.action = url.toString();\n}\n\n/**\n * Gets an array of checkboxes for every table by idstring.\n * @param {*} name\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getChecked(name, selector, idstring) {\n\n  // We might have more than one Table, therefore we first have to get all tables.\n  const wbTable = document.querySelector(selector);\n\n  checked[idstring][name] = Array.from(\n    wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n  ).filter(function(el) {\n    return el.checked;\n  }).map(function(el) {\n    return el.value;\n  });\n\n  // If there are no checked boxes, we unset the key alltogether.\n  if (checked[idstring][name].length < 1) {\n    delete checked[idstring][name];\n  }\n\n  updateFilterCounter(name, selector, idstring);\n}\n\n/**\n * Gets the values of the checked intrange filter.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getIntRange(e, selector, idstring) {\n\n  // We might have more than one Table, therefore we first have to get all tables.\n  let filtercontainer = e.target.closest(\".intrangeform\");\n\n  let from = filtercontainer.querySelector('input[id*=\"intrangefilter_intrange-start\"]');\n  let fromvalue = from.value;\n  let to = filtercontainer.querySelector('input[id*=\"intrangefilter_intrange-end\"]');\n  let tovalue = to.value;\n  let colname = e.target.dataset.columnname;\n\n\n  // Add the alert if not all entries are ints (or empty).\n  const isInt = (str) => (!isNaN(parseInt(str)) && isFinite(str)) || (str.trim() === '') || (str === null);\n\n  const alertelement = filtercontainer.querySelector('div[id*=\"intrangefilter_alert\"]');\n  if (!isInt(fromvalue)\n      || !isInt(tovalue)) {\n\n      alertelement.removeAttribute('hidden');\n  } else {\n      alertelement.setAttribute('hidden', 'true');\n\n      // Stripping leading zeros.\n      fromvalue = parseInt(fromvalue, 10);\n      fromvalue = fromvalue.toString();\n      tovalue = parseInt(tovalue, 10);\n      tovalue = tovalue.toString();\n  }\n\n  if (fromvalue.length > 0 || tovalue.length > 0) {\n    checked[idstring][colname] = fromvalue + \",\" + tovalue;\n  }\n\n  // If there are no checked boxes, unset the key when the checkbox is unchecked.\n  if (!filtercontainer.querySelector('input[data-intrangeelement=\"intrangeelement-checkbox\"]').checked) {\n    delete checked[idstring][colname];\n  }\n  updateFilterCounter(colname, selector, idstring);\n}\n\n/**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(idstring);\n\n  let hasvalues = false;\n\n  for (const [, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport const renderFilter = (filterjson, idstring, encodedtable) => {\n\n  // We render the filter only once, so if we find it already, we don't render it.\n\n  const selector = SELECTORS.CONTAINER + idstring;\n  const container = document.querySelector(selector);\n  const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n  if (filtercontainer) {\n    return;\n  }\n\n  Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n    container.insertAdjacentHTML('afterbegin', html);\n\n    initializeCheckboxes(selector, idstring, encodedtable);\n\n    return;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n};\n\n/**\n * Update Filter counter.\n *\n * @param {*} name\n * @param {*} selector\n * @param {*} idstring\n *\n *\n */\nfunction updateFilterCounter(name, selector, idstring) {\n\n  const wbTable = document.querySelector(selector);\n\n  let counter = checked[idstring][name] ? checked[idstring][name].length : 0;\n  if ((counter > 0 && (typeof checked[idstring][name] === 'string') ||\n      (typeof checked[idstring][name] === 'object' && !Array.isArray(checked[idstring][name])))) {\n        // Handle different cases of filters here (datepicker, intrange).\n        // TODO: Find a better marker for difference of filters.\n    counter = 1;\n  }\n\n  const labelElement = wbTable.querySelector('[data-ident=' + name + '] span.filtercounter');\n\n  if (labelElement) {\n\n    if (counter > 0) {\n      labelElement.classList.remove('hidden');\n    } else {\n      labelElement.classList.add('hidden');\n    }\n    labelElement.textContent = counter;\n  }\n\n  const totalfiltercounter = checked[idstring] ? Object.keys(checked[idstring]).length : 0;\n  const resetElement = wbTable.querySelector('.reset-filter-button');\n\n  if (resetElement) {\n    if (totalfiltercounter > 0) {\n      resetElement.classList.remove('hidden');\n    } else {\n      resetElement.classList.add('hidden');\n    }\n  }\n}"],"names":["selector","idstring","encodedtable","container","document","querySelector","button","console","log","addEventListener","componentscontainer","remove","resetCheckedObject","sort","filterobjects","searchstring","dir","url","formelement","URL","getAttribute","e","params","searchParams","delete","append","action","toString","window","location","href","history","replaceState","pushState","checked","initializeCheckboxes","filterContainer","SELECTORS","FILTER","dataset","initialized","selects","querySelectorAll","filterElements","hasOwnProperty","forEach","element","name","getChecked","applyChangelistener","nodelist","el","idstring2","event","toggleFilterelement","stopPropagation","preventDefault","setTimeout","target","dateelement","getDates","intrangeelement","includes","getIntRange","getFilterObjects","columnname","filtercontainer","closest","filtername","filtercheckbox","dates","timespan","startdate","getDateAndTimePickerDataAsUnix","enddate","setDateAndTimePickerDataFromUnix","compareDateValues","operator","value","firstcolumn","applytocolumn","firstoperator","additionalFirstColumnValues","valuefirstcolumn","secondcolumn","secondoperator","additionalSecondColumnValues","valuesecondcolumn","Number","isInteger","applySpanfilter","unsetEmptyFieldsInCheckedObject","setTimespanFilter","String","Object","keys","key","okey","updateFilterCounter","id","timestamp","dateobject","Date","datepicker","toISOString","split","timepicker","toLocaleTimeString","slice","column","length","col","additionalvaluesObject","key1","key2","date","time","unixTimestamp","parse","wbTable","Array","from","filter","map","fromvalue","tovalue","colname","isInt","str","isNaN","parseInt","isFinite","trim","alertelement","setAttribute","removeAttribute","hasvalues","entries","JSON","stringify","counter","isArray","labelElement","classList","add","textContent","totalfiltercounter","resetElement","filterjson","CONTAINER","renderForPromise","then","_ref","html","insertAdjacentHTML","catch"],"mappings":"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"}