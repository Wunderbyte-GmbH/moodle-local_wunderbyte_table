{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\n export function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n  const selects = filterContainer.querySelectorAll(\"select[id^='filteroperationselect']\");\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n\n  if (!filterElements) {\n      return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  // We run through all the filter elements and make sure that we store the state we received from php.\n  filterElements.forEach(element => {\n    getChecked(element.name, selector, idstring);\n  });\n\n  applyChangelistener(filterElements, selector, idstring, encodedtable);\n  applyChangelistener(selects, selector, idstring, encodedtable);\n\n  filterContainer.dataset.initialized = true;\n}\n/**\n * Apply change listener to list of nodes.\n * @param {*} nodelist\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction applyChangelistener(nodelist, selector, idstring, encodedtable) {\n  if (nodelist) {\n    nodelist.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      [\"change\", \"keyup\"].forEach(event => {\n        el.addEventListener(event, (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n      });\n    });\n  }\n}\n/**\n * Init for button to reset all filter and searchparams.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function initializeResetFilterButton(selector, idstring, encodedtable) {\n  const container = document.querySelector(selector);\n  if (!container) {\n    return;\n  }\n  let button = container.querySelector(\".reset-filter-button\");\n\n  // eslint-disable-next-line no-console\n  console.log(button);\n\n  if (!button) {\n    return;\n  }\n  button.addEventListener('click', () => {\n\n    if (!container) {\n      return;\n    }\n\n    const componentscontainer = container.querySelector(\".wunderbyte_table_components\");\n\n    if (!componentscontainer) {\n      return;\n    }\n\n    componentscontainer.remove();\n\n    resetCheckedObject(idstring);\n\n    const sort = getSortSelection(idstring);\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      \"\",\n      \"\");\n  });\n}\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  setTimeout(() => {\n    // Check if Checkbox corresponds to datepicker\n    if (e.target.dataset.dateelement == 'dateelement') {\n      getDates(e, selector, idstring);\n    } else if (e.target.dataset.intrangeelement && e.target.dataset.intrangeelement.includes('intrangeelement')) {\n      getIntRange(e, selector, idstring);\n      // eslint-disable-next-line no-console\n      console.log(\"intrangeelement\");\n    } else {\n      getChecked(e.target.name, selector, idstring);\n    }\n\n    // Reload the filtered elements via ajax.\n    const filterobjects = getFilterObjects(idstring);\n          // eslint-disable-next-line no-console\n          console.log(\"filterobjects: \" + filterobjects);\n    const searchstring = getSearchInput(idstring);\n    const sort = getSortSelection(idstring);\n\n    // The filter reloads data from the Server.\n    // Because of pages and infinite scroll we don't have the data to do without.\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      filterobjects,\n      searchstring);\n  }, 400);\n}\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getDates(e, selector, idstring) {\n\n  let name = e.target.dataset.columnname;\n  let filtercontainer = e.target.closest(\".datepickerform\");\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = filtercontainer.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.dataset.timespan === \"true\") {\n    compareDateValues(e, filtercontainer);\n  }\n  if (filtercheckbox.checked) {\n    // Check if we have a timespan filter or a single one.\n    if (filtercheckbox.dataset.timespan === \"true\") {\n      setTimespanFilter(filtercontainer, filtername, idstring, name);\n    } else {\n      dates[String(filtercheckbox.dataset.operator)] = getDateAndTimePickerDataAsUnix(filtercontainer, \"datefilter\") / 1000;\n      // Check if key is set in array, otherwise set new key.\n      if (name && filtername) {\n        if (!checked[idstring][name]) {\n          checked[idstring][name] = {};\n        }\n        checked[idstring][name][filtername] = dates;\n      }\n      unsetEmptyFieldsInCheckedObject(name, filtername, idstring);\n    }\n  } else { // If checkbox of filter is unchecked: unset values in checked object.\n    resetCheckedObject(idstring, name, filtername);\n    unsetEmptyFieldsInCheckedObject(name, null, idstring);\n    // Vorher noch ein if exists etc.\n    Object.keys(checked[idstring]).forEach(function(key) {\n        Object.keys(checked[idstring][key]).forEach(function(okey) {\n            if (okey == filtername) {\n              resetCheckedObject(idstring, key, filtername);\n              unsetEmptyFieldsInCheckedObject(key, null, idstring);\n            }\n          }\n        );\n      }\n    );\n  }\n  updateFilterCounter(name, selector, idstring);\n}\n\n/**\n * Check if date and time value set in first timepicker is before second timepicker.\n * @param {*} e // The element that triggerd the change.\n * @param {*} filtercontainer\n */\nfunction compareDateValues(e, filtercontainer) {\n  let startdate = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n  let enddate = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n  // We make sure the entered enddate is after 2020, to avoid triggering change while date setting is not finished yet.\n  if ((enddate / 1000 > 1577836800) && (startdate > enddate)) {\n    // Apply change.\n    setDateAndTimePickerDataFromUnix(filtercontainer, 'startdate', enddate);\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id // Id of the date- and timepicker, the value should be applied to.\n * @param {integer} timestamp\n */\nexport function setDateAndTimePickerDataFromUnix(filtercontainer, id = '', timestamp) {\n\n  let dateobject = new Date(timestamp);\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  datepicker.value = dateobject.toISOString().split('T')[0];\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  timepicker.value = dateobject.toLocaleTimeString().slice(0, 5);\n}\n\n/**\n * Applying a timespan filter.\n * @param {*} filtercontainer\n * @param {string} filtername\n * @param {string} idstring\n * @param {string} name\n */\nfunction setTimespanFilter(filtercontainer, filtername, idstring, name) {\n  // Selector defined the operators.\n  let select = filtercontainer.querySelector('select[id^=\"filteroperationselect\"][name=\"' + name + '\"]');\n  let operator = select.value;\n\n  // First Column to apply the filter to\n  let startdatepicker = filtercontainer.querySelector('input[id^=\"startdate\"]');\n  let firstcolumn = startdatepicker.dataset.applytocolumn;\n  let firstoperator = \"\";\n  let additionalFirstColumnValues = {};\n  let valuefirstcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\") / 1000;\n\n  // Second Column to apply the filter to\n  let enddatepicker = filtercontainer.querySelector('input[id^=\"enddate\"]');\n  let secondcolumn = enddatepicker.dataset.applytocolumn;\n  let secondoperator = \"\";\n  let additionalSecondColumnValues = {};\n  let valuesecondcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\") / 1000;\n\n  if (!Number.isInteger(valuefirstcolumn) || !Number.isInteger(valuefirstcolumn)) {\n    return;\n  }\n\n  // Unset the values of the span filter in checked object.\n  resetCheckedObject(idstring, firstcolumn, filtername);\n  resetCheckedObject(idstring, secondcolumn, filtername);\n\n  switch (operator) {\n    case \"within\":\n      firstoperator = \">=\";\n      secondoperator = \"<=\";\n      break;\n    case \"overlapboth\":\n      firstoperator = \"<=\";\n      secondoperator = \">=\";\n      break;\n    case \"overlapstart\":\n      firstoperator = \"<=\";\n      additionalSecondColumnValues[\">=\"] = valuefirstcolumn;\n      secondoperator = \"<=\";\n      break;\n    case \"overlapend\":\n      firstoperator = \">=\";\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\"<=\"] = valuesecondcolumn;\n      break;\n    case \"before\":\n      firstoperator = \"<\";\n      additionalSecondColumnValues[\"<=\"] = valuefirstcolumn;\n      secondoperator = \"<\";\n      break;\n    case \"after\":\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\">=\"] = valuesecondcolumn;\n      firstoperator = \">\";\n      break;\n    case \"flexoverlap\":\n      firstoperator = \"fo\";\n      secondoperator = \"fo\";\n      break;\n    default:\n    break;\n  }\n  if (!secondcolumn) {\n    secondcolumn = firstcolumn;\n  }\n  applySpanfilter(firstcolumn, valuefirstcolumn, filtername, firstoperator, additionalFirstColumnValues, idstring);\n  applySpanfilter(secondcolumn, valuesecondcolumn, filtername, secondoperator, additionalSecondColumnValues, idstring);\n\n  // Unsetting the timespan filter if empty\n  if (firstcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(firstcolumn, filtername, idstring);\n  }\n  if (secondcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(secondcolumn, filtername, idstring);\n  }\n}\n\n/**\n *  Check if filter object already exisits and unset values.\n * @param {string} idstring\n * @param {string} column\n * @param {string} filtername\n */\nfunction resetCheckedObject(idstring, column = '', filtername = '') {\n\n  // If no column is specified, we reset all the filters.\n  if (column.length === 0) {\n\n    Object.keys(checked[idstring]).forEach(col => {\n      checked[idstring][col] = [];\n    });\n  } else {\n    if (checked[idstring].hasOwnProperty(column)) {\n      if (checked[idstring][column].hasOwnProperty(filtername)) {\n        delete checked[idstring][column][filtername];\n      }\n      if (checked[idstring][column].hasOwnProperty(filtername + 'a')) {\n        delete checked[idstring][column][filtername + 'a'];\n      }\n      if (\n        Array.isArray(checked[idstring][column]) &&\n        checked[idstring][column].length === 1 &&\n        checked[idstring][column][0] === 'datecheckbox'\n      ) {\n        delete checked[idstring][column];\n      }\n    }\n  }\n}\n\n/**\n *  Check if object already exisits and set values.\n * @param {string} column\n * @param {*} value\n * @param {string} filtername\n * @param {string} operator\n * @param {*} additionalvaluesObject\n * @param {string} idstring\n */\nfunction applySpanfilter(column, value, filtername, operator, additionalvaluesObject, idstring) {\n  if (operator.length >= 1) {\n    if (column && filtername) {\n      if (!checked[idstring][column]) {\n        checked[idstring][column] = {};\n      }\n      if (!checked[idstring][column][filtername]) {\n        checked[idstring][column][filtername] = {};\n      }\n      checked[idstring][column][filtername][operator] = value;\n      if (Object.keys(additionalvaluesObject).length > 0) {\n        checked[idstring][column][filtername + 'a'] = additionalvaluesObject;\n      }\n    }\n  }\n}\n\n/**\n * Unsetting empty keys in checked object. If a filter param was created and deleted later on we will need this.\n * @param {*} key1\n * @param {*} key2\n * @param {string} idstring\n */\nfunction unsetEmptyFieldsInCheckedObject(key1, key2, idstring) {\n  if (checked[idstring][key1]) {\n    if (checked[idstring][key1][key2]) {\n      if (Object.keys(checked[idstring][key1][key2]).length < 1) {\n        delete checked[idstring][key1][key2];\n      }\n    }\n  }\n\n  if (checked[idstring][key1]) {\n    if (Object.keys(checked[idstring][key1]).length < 1) {\n      delete checked[idstring][key1];\n    }\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(filtercontainer, id = '') {\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  let date = datepicker.value;\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  let time = timepicker.value;\n\n  let unixTimestamp = Date.parse(date + ' ' + time);\n  let tenDigitTimestamp = unixTimestamp;\n\n  return tenDigitTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  window.history.replaceState(null, '', url);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} idstring\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateDownloadUrlWithFilterSearchSort(idstring, filterobjects, searchstring, sort, dir) {\n\n  // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n  let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n  if (!container) {\n      return;\n  }\n\n  let url = '';\n  let formelement = null;\n  try {\n    formelement = container.querySelector('form.wb-table-download-buttons');\n    url = new URL(formelement.getAttribute('action'));\n  } catch (e) {\n\n    // eslint-disable-next-line no-console\n    console.log(e);\n    return;\n  }\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  formelement.action = url.toString();\n}\n\n/**\n * Gets an array of checkboxes for every table by idstring.\n * @param {*} name\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getChecked(name, selector, idstring) {\n\n  // We might have more than one Table, therefore we first have to get all tables.\n  const wbTable = document.querySelector(selector);\n\n  checked[idstring][name] = Array.from(\n    wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n  ).filter(function(el) {\n    return el.checked;\n  }).map(function(el) {\n    return el.value;\n  });\n\n  // If there are no checked boxes, we unset the key alltogether.\n  if (checked[idstring][name].length < 1) {\n    delete checked[idstring][name];\n  }\n\n  updateFilterCounter(name, selector, idstring);\n}\n\n/**\n * Gets the values of the checked intrange filter.\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n */\nexport function getIntRange(e, selector, idstring) {\n\n  // We might have more than one Table, therefore we first have to get all tables.\n  let filtercontainer = e.target.closest(\".intrangeform\");\n\n  let from = filtercontainer.querySelector('input[id*=\"intrangefilter_intrange-start\"]');\n  let fromvalue = from.value;\n  let to = filtercontainer.querySelector('input[id*=\"intrangefilter_intrange-end\"]');\n  let tovalue = to.value;\n  let colname = e.target.dataset.columnname;\n\n  // Add the alert if not all entries are ints (or empty).\n  const isInt = (str) => (!isNaN(parseInt(str)) && isFinite(str)) || (str.trim() === '') || (str === null);\n\n  const alertelement = filtercontainer.querySelector('div[id*=\"intrangefilter_alert\"]');\n  if (!isInt(fromvalue)\n      || !isInt(tovalue)) {\n\n      alertelement.removeAttribute('hidden');\n  } else {\n      alertelement.setAttribute('hidden', 'true');\n\n      // Stripping leading zeros.\n      fromvalue = parseInt(fromvalue, 10);\n      fromvalue = fromvalue.toString();\n      tovalue = parseInt(tovalue, 10);\n      tovalue = tovalue.toString();\n  }\n\n  if (fromvalue.length > 0 || tovalue.length > 0) {\n    checked[idstring][colname] = fromvalue + \",\" + tovalue;\n  }\n\n  // If there are no checked boxes, unset the key when the checkbox is unchecked.\n  if (!filtercontainer.querySelector('input[data-intrangeelement=\"intrangeelement-checkbox\"]').checked) {\n    delete checked[idstring][colname];\n  }\n  updateFilterCounter(colname, selector, idstring);\n}\n\n/**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(idstring);\n\n  let hasvalues = false;\n\n  for (const [, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\nexport const renderFilter = (filterjson, idstring, encodedtable) => {\n\n  // We render the filter only once, so if we find it already, we don't render it.\n\n  const selector = SELECTORS.CONTAINER + idstring;\n  const container = document.querySelector(selector);\n  const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n  if (filtercontainer) {\n    return;\n  }\n\n  Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n    container.insertAdjacentHTML('afterbegin', html);\n\n    initializeCheckboxes(selector, idstring, encodedtable);\n\n    return;\n  }).catch(e => {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  });\n};\n\n/**\n * Update Filter counter.\n *\n * @param {*} name\n * @param {*} selector\n * @param {*} idstring\n *\n *\n */\nfunction updateFilterCounter(name, selector, idstring) {\n\n  const wbTable = document.querySelector(selector);\n\n  let counter = checked[idstring][name] ? checked[idstring][name].length : 0;\n  if ((counter > 0 && (typeof checked[idstring][name] === 'string') ||\n      (typeof checked[idstring][name] === 'object' && !Array.isArray(checked[idstring][name])))) {\n        // Handle different cases of filters here (datepicker, intrange).\n        // TODO: Find a better marker for difference of filters.\n    counter = 1;\n  }\n\n  const labelElement = wbTable.querySelector('[data-ident=' + name + '] span.filtercounter');\n\n  if (labelElement) {\n\n    if (counter > 0) {\n      labelElement.classList.remove('hidden');\n    } else {\n      labelElement.classList.add('hidden');\n    }\n    labelElement.textContent = counter;\n  }\n\n  const totalfiltercounter = checked[idstring] ? Object.keys(checked[idstring]).length : 0;\n  const resetElement = wbTable.querySelector('.reset-filter-button');\n\n  if (resetElement) {\n    if (totalfiltercounter > 0) {\n      resetElement.classList.remove('hidden');\n    } else {\n      resetElement.classList.add('hidden');\n    }\n  }\n}"],"names":["e","selector","idstring","encodedtable","container","document","querySelector","button","console","log","addEventListener","componentscontainer","remove","resetCheckedObject","sort","getSortSelection","callLoadData","filterobjects","searchstring","dir","url","formelement","URL","getAttribute","params","searchParams","delete","append","action","toString","window","location","href","history","replaceState","pushState","_templates","__esModule","default","checked","initializeCheckboxes","filterContainer","SELECTORS","FILTER","dataset","initialized","selects","querySelectorAll","filterElements","hasOwnProperty","forEach","element","getChecked","name","applyChangelistener","nodelist","el","idstring2","event","toggleFilterelement","stopPropagation","preventDefault","setTimeout","target","dateelement","getDates","intrangeelement","includes","getIntRange","getFilterObjects","getSearchInput","columnname","filtercontainer","closest","filtername","filtercheckbox","dates","timespan","startdate","getDateAndTimePickerDataAsUnix","enddate","setDateAndTimePickerDataFromUnix","compareDateValues","select","operator","value","startdatepicker","firstcolumn","applytocolumn","firstoperator","additionalFirstColumnValues","valuefirstcolumn","enddatepicker","secondcolumn","secondoperator","additionalSecondColumnValues","valuesecondcolumn","Number","isInteger","applySpanfilter","unsetEmptyFieldsInCheckedObject","setTimespanFilter","String","Object","keys","key","okey","updateFilterCounter","id","arguments","length","undefined","dateobject","Date","toISOString","split","toLocaleTimeString","slice","column","col","Array","isArray","additionalvaluesObject","key1","key2","date","time","parse","wbTable","from","filter","map","fromvalue","tovalue","colname","isInt","str","isNaN","parseInt","isFinite","trim","alertelement","setAttribute","removeAttribute","hasvalues","entries","JSON","stringify","counter","labelElement","classList","add","textContent","totalfiltercounter","resetElement","_exports","renderFilter","filterjson","CONTAINER","Templates","renderForPromise","then","_ref","html","insertAdjacentHTML","catch"],"mappings":"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"}