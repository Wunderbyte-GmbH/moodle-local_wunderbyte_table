{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\n export function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n  const selects = filterContainer.querySelectorAll(\"select[id^='filteroperationselect']\");\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n\n  if (!filterElements) {\n      return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  applyChangelistener(filterElements, selector, idstring, encodedtable);\n  applyChangelistener(selects, selector, idstring, encodedtable);\n\n  filterContainer.dataset.initialized = true;\n}\n/**\n * Apply change listener to list of nodes.\n * @param {*} nodelist\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction applyChangelistener(nodelist, selector, idstring, encodedtable) {\n  if (nodelist) {\n    nodelist.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      el.addEventListener(\"change\", (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n    });\n  }\n}\n\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  // Check if Checkbox corresponds to datepicker\n  if (e.target.dataset.dateelement == 'dateelement') {\n    getDates(e, idstring);\n  } else {\n    getChecked(e.target.name, selector, idstring);\n  }\n\n  // Reload the filtered elements via ajax.\n  const filterobjects = getFilterObjects(idstring);\n  const searchstring = getSearchInput(idstring);\n  const sort = getSortSelection(idstring);\n\n  // The filter reloads data from the Server.\n  // Because of pages and infinite scroll we don't have the data to do without.\n  callLoadData(idstring,\n    encodedtable,\n    0, // Pagenumber is always rest to 0.\n    null,\n    sort,\n    null,\n    null,\n    null,\n    filterobjects,\n    searchstring);\n}\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} idstring\n */\nexport function getDates(e, idstring) {\n\n  let name = e.target.name;\n  let filtercontainer = e.target.closest(\".datepickerform\");\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = filtercontainer.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.dataset.timespan === \"true\") {\n    compareDateValues(e, filtercontainer);\n  }\n  if (filtercheckbox.checked) {\n    // Check if we have a timespan filter or a single one.\n    if (filtercheckbox.dataset.timespan === \"true\") {\n      setTimespanFilter(filtercontainer, filtername, idstring, name);\n    } else {\n      dates[filtercheckbox.dataset.operator] = getDateAndTimePickerDataAsUnix(filtercontainer, \"datefilter\");\n      // Check if key is set in array, otherwise set new key.\n      if (name && filtername) {\n        if (!checked[idstring][name]) {\n          checked[idstring][name] = {};\n        }\n        checked[idstring][name][filtername] = dates;\n      }\n      unsetEmptyFieldsInCheckedObject(name, filtername, idstring);\n    }\n  } else { // If checkbox of filter is unchecked: unset values in checked object.\n    resetCheckedObject(idstring, name, filtername);\n    unsetEmptyFieldsInCheckedObject(name, null, idstring);\n    // Vorher noch ein if exists etc.\n    Object.keys(checked[idstring]).forEach(function(key) {\n        Object.keys(checked[idstring][key]).forEach(function(okey) {\n            if (okey == filtername) {\n              resetCheckedObject(idstring, key, filtername);\n              unsetEmptyFieldsInCheckedObject(key, null, idstring);\n            }\n          }\n        );\n      }\n    );\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(checked);\n}\n\n/**\n * Check if date and time value set in first timepicker is before second timepicker.\n * @param {*} e // The element that triggerd the change.\n * @param {*} filtercontainer\n */\nfunction compareDateValues(e, filtercontainer) {\n  let startdate = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n  let enddate = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n  if (startdate > enddate) {\n    // eslint-disable-next-line no-console\n    console.error(\"starttime should be before endtime\");\n    // Apply change.\n    setDateAndTimePickerDataFromUnix(filtercontainer, 'startdate', enddate);\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id // Id of the date- and timepicker, the value should be applied to.\n * @param {integer} timestamp\n */\nexport function setDateAndTimePickerDataFromUnix(filtercontainer, id = '', timestamp) {\n\n  let dateobject = new Date(timestamp);\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  datepicker.value = dateobject.toISOString().split('T')[0];\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  timepicker.value = dateobject.toLocaleTimeString();\n}\n\n/**\n * Applying a timespan filter.\n * @param {*} filtercontainer\n * @param {string} filtername\n * @param {string} idstring\n * @param {string} name\n */\nfunction setTimespanFilter(filtercontainer, filtername, idstring, name) {\n  // Selector defined the operators.\n  let select = filtercontainer.querySelector('select[id^=\"filteroperationselect\"][name=\"' + name + '\"]');\n  let operator = select.value;\n\n  // First Column to apply the filter to\n  let startdatepicker = filtercontainer.querySelector('input[id^=\"startdate\"]');\n  let firstcolumn = startdatepicker.dataset.applytocolumn;\n  let firstoperator = \"\";\n  let additionalFirstColumnValues = {};\n  let valuefirstcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n\n  // Second Column to apply the filter to\n  let enddatepicker = filtercontainer.querySelector('input[id^=\"enddate\"]');\n  let secondcolumn = enddatepicker.dataset.applytocolumn;\n  let secondoperator = \"\";\n  let additionalSecondColumnValues = {};\n  let valuesecondcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n  // Unset the values of the span filter in checked object.\n  resetCheckedObject(idstring, firstcolumn, filtername);\n  resetCheckedObject(idstring, secondcolumn, filtername);\n\n  switch (operator) {\n    case \"overlapboth\":\n      firstoperator = \">=\";\n      secondoperator = \"<=\";\n      break;\n    case \"within\":\n      firstoperator = \"<=\";\n      secondoperator = \">=\";\n      break;\n    case \"overlapend\":\n      firstoperator = \"<=\";\n      additionalFirstColumnValues[\">=\"] = valuesecondcolumn;\n      secondoperator = \"<=\";\n      break;\n    case \"overlapstart\":\n      firstoperator = \"<=\";\n      secondoperator = \"<=\";\n      additionalSecondColumnValues[\"<=\"] = valuefirstcolumn;\n      break;\n    case \"after\":\n      firstoperator = \"<\";\n      additionalFirstColumnValues[\"<=\"] = valuesecondcolumn;\n      break;\n    case \"before\":\n      secondoperator = \">=\";\n      additionalSecondColumnValues[\">\"] = valuesecondcolumn;\n      break;\n    default:\n    // eslint-disable-next-line no-console\n    console.error(\"Value of selection not readable\");\n    break;\n  }\n  applySpanfilter(firstcolumn, valuefirstcolumn, filtername, firstoperator, additionalFirstColumnValues, idstring);\n  applySpanfilter(secondcolumn, valuesecondcolumn, filtername, secondoperator, additionalSecondColumnValues, idstring);\n\n  // Unsetting the timespan filter if empty\n  if (firstcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(firstcolumn, filtername, idstring);\n  }\n  if (secondcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(secondcolumn, filtername, idstring);\n  }\n}\n\n/**\n *  Check if filter object already exisits and unset values.\n * @param {string} idstring\n * @param {string} column\n * @param {string} filtername\n */\nfunction resetCheckedObject(idstring, column, filtername) {\n  if (checked[idstring].hasOwnProperty(column)) {\n    if (checked[idstring][column].hasOwnProperty(filtername)) {\n      delete checked[idstring][column][filtername];\n    }\n    if (checked[idstring][column].hasOwnProperty(filtername + 'a')) {\n      delete checked[idstring][column][filtername + 'a'];\n    }\n  }\n}\n\n/**\n *  Check if object already exisits and set values.\n * @param {string} column\n * @param {*} value\n * @param {string} filtername\n * @param {string} operator\n * @param {*} additionalvaluesObject\n * @param {string} idstring\n */\nfunction applySpanfilter(column, value, filtername, operator, additionalvaluesObject, idstring) {\n  if (operator.length >= 1) {\n    if (column && filtername) {\n      if (!checked[idstring][column]) {\n        checked[idstring][column] = {};\n      }\n      if (!checked[idstring][column][filtername]) {\n        checked[idstring][column][filtername] = {};\n      }\n      checked[idstring][column][filtername][operator] = value;\n      if (Object.keys(additionalvaluesObject).length > 0) {\n        checked[idstring][column][filtername + 'a'] = additionalvaluesObject;\n      }\n    }\n  }\n}\n\n/**\n * Unsetting empty keys in checked object. If a filter param was created and deleted later on we will need this.\n * @param {*} key1\n * @param {*} key2\n * @param {string} idstring\n */\nfunction unsetEmptyFieldsInCheckedObject(key1, key2, idstring) {\n  if (checked[idstring][key1]) {\n    if (checked[idstring][key1][key2]) {\n      if (Object.keys(checked[idstring][key1][key2]).length < 1) {\n        delete checked[idstring][key1][key2];\n      }\n    }\n  }\n\n  if (checked[idstring][key1]) {\n    if (Object.keys(checked[idstring][key1]).length < 1) {\n      delete checked[idstring][key1];\n    }\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(filtercontainer, id = '') {\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  let date = datepicker.value;\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  let time = timepicker.value;\n\n  let unixTimestamp = Date.parse(date + ' ' + time);\n\n  return unixTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  url.search = \"\";\n  history.replaceState(null, '', url);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n  /**\n   * Gets an array of checkboxes for every table by idstring.\n   * @param {*} name\n   * @param {*} selector\n   * @param {*} idstring\n   */\n   export function getChecked(name, selector, idstring) {\n\n    // We might have more than one Table, therefore we first have to get all tables.\n\n    const wbTable = document.querySelector(selector);\n\n    checked[idstring][name] = Array.from(\n      wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n    ).filter(function(el) {\n      return el.checked;\n    }).map(function(el) {\n      return el.value;\n    });\n\n    // If there are no checked boxes, we unset the key alltogether.\n    if (checked[idstring][name].length < 1) {\n      delete checked[idstring][name];\n    }\n  }\n\n/**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  let hasvalues = false;\n  // eslint-disable-next-line no-unused-vars\n\n  for (const [, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\n    export const renderFilter = (filterjson, idstring, encodedtable) => {\n\n    // We render the filter only once, so if we find it already, we don't render it.\n\n    const selector = SELECTORS.CONTAINER + idstring;\n    const container = document.querySelector(selector);\n    const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n    if (filtercontainer) {\n      return;\n    }\n\n    Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n        container.insertAdjacentHTML('afterbegin', html);\n\n        initializeCheckboxes(selector, idstring, encodedtable);\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n};"],"names":["filterobjects","searchstring","sort","dir","url","URL","window","location","href","search","history","replaceState","searchParams","append","pushState","toString","checked","initializeCheckboxes","selector","idstring","encodedtable","filterContainer","document","querySelector","SELECTORS","FILTER","dataset","initialized","selects","querySelectorAll","filterElements","hasOwnProperty","applyChangelistener","nodelist","forEach","el","idstring2","addEventListener","e","toggleFilterelement","stopPropagation","preventDefault","target","dateelement","getDates","getChecked","name","getFilterObjects","filtercontainer","closest","filtername","filtercheckbox","dates","timespan","startdate","getDateAndTimePickerDataAsUnix","enddate","console","error","setDateAndTimePickerDataFromUnix","compareDateValues","operator","value","firstcolumn","applytocolumn","firstoperator","additionalFirstColumnValues","valuefirstcolumn","secondcolumn","secondoperator","additionalSecondColumnValues","valuesecondcolumn","resetCheckedObject","applySpanfilter","unsetEmptyFieldsInCheckedObject","setTimespanFilter","Object","keys","key","okey","log","id","timestamp","dateobject","Date","datepicker","toISOString","split","timepicker","toLocaleTimeString","column","additionalvaluesObject","length","key1","key2","date","time","unixTimestamp","parse","wbTable","Array","from","filter","map","hasvalues","entries","JSON","stringify","filterjson","CONTAINER","container","renderForPromise","then","_ref","html","insertAdjacentHTML","catch"],"mappings":"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"}