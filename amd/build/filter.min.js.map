{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wunderbyte_table\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getSearchInput} from 'local_wunderbyte_table/search';\nimport {getSortSelection} from 'local_wunderbyte_table/sort';\n\nimport {callLoadData, SELECTORS} from 'local_wunderbyte_table/init';\nimport Templates from 'core/templates';\n\n// These variables are specific to the filter.\nvar checked = {};\n\n/**\n * Initialize Checkboxes.\n * @param {string} selector\n * @param {string} idstring\n * @param {string} encodedtable\n */\n export function initializeCheckboxes(selector, idstring, encodedtable) {\n\n  const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n\n  if (!filterContainer || filterContainer.dataset.initialized) {\n    return;\n  }\n  const selects = filterContainer.querySelectorAll(\"select[id^='filteroperationselect']\");\n  const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n\n  if (!filterElements) {\n      return;\n  }\n\n  // We create the key for the checked items of this table.\n  if (!checked.hasOwnProperty(idstring)) {\n    checked[idstring] = {};\n  }\n\n  applyChangelistener(filterElements, selector, idstring, encodedtable);\n  applyChangelistener(selects, selector, idstring, encodedtable);\n\n  filterContainer.dataset.initialized = true;\n}\n/**\n * Apply change listener to list of nodes.\n * @param {*} nodelist\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nfunction applyChangelistener(nodelist, selector, idstring, encodedtable) {\n  if (nodelist) {\n    nodelist.forEach(el => {\n\n      if (!el.dataset.idstring) {\n        el.dataset.idstring = idstring;\n      } else {\n        el.dataset.idstring2 = idstring;\n      }\n      el.addEventListener(\"change\", (e) => toggleFilterelement(e, selector, idstring, encodedtable));\n    });\n  }\n}\n/**\n * Init for button to reset all filter and searchparams.\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\nexport function initializeResetFilterButton(selector, idstring, encodedtable) {\n  const container = document.querySelector(selector);\n  if (!container) {\n    return;\n  }\n  let button = container.querySelector(\".reset-filter-button\");\n\n  if (!button) {\n    return;\n  }\n  button.addEventListener('click', () => {\n\n    if (!container) {\n      return;\n    }\n\n    const componentscontainer = container.querySelector(\".wunderbyte_table_components\");\n\n    if (!componentscontainer) {\n      return;\n    }\n\n    componentscontainer.remove();\n\n    resetCheckedObject(idstring);\n\n    const sort = getSortSelection(idstring);\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      \"\",\n      \"\");\n  });\n\n}\n\n  /**\n   * Checks or unchecks All.\n   * @param {*} selector\n   * @param {*} idstring\n   * @param {*} colname\n   * @param {*} checkedall\n   */\n  export function checkAll(selector, idstring, colname, checkedall) {\n  const wbTable = document.querySelector(selector);\n  // const filterContainer = document.querySelector(selector + SELECTORS.FILTER);\n  // Get all Names\n  // const filterElements = filterContainer.querySelectorAll(\"input[class^='filterelement']\");\n  const namesArray = [];\n\n  checked[idstring][colname] = Array.from(\n    wbTable.querySelectorAll(\"input[name=\" + colname + \"]\")\n  ).filter(function(el) {\n    if (checkedall === true ) {\n      el.checked = true;\n    } else {\n      el.checked = false;\n    }\n    return el.checked;\n  }).map(function(el) {\n    return el.value;\n  });\n\n// // Loop over each element and get its 'name' attribute.\n// filterElements.forEach(element => {\n//   if (element.hasAttribute('name')) {\n//     namesArray.push(element.getAttribute('name'));\n//   }\n// });\n\nconsole.log(namesArray);\n}\n\n/**\n * Eventhandler\n * @param {*} e\n * @param {*} selector\n * @param {*} idstring\n * @param {*} encodedtable\n */\n export function toggleFilterelement(e, selector, idstring, encodedtable) {\n\n  e.stopPropagation();\n  e.preventDefault();\n\n  setTimeout(() => {\n    // Check if Checkbox corresponds to datepicker\n    if (e.target.dataset.dateelement == 'dateelement') {\n      getDates(e, idstring);\n    } else if(e.target.name && e.target.name.includes('checkAll')) {\n      const name = e.target.name;\n      const prefix = 'checkAll_';\n      const colname = name.substring(name.indexOf(prefix) + prefix.length);\n      checkAll(selector, idstring, colname, e.target.checked);\n    }\n    else {\n      getChecked(e.target.name, selector, idstring);\n    }\n\n    // Reload the filtered elements via ajax.\n    const filterobjects = getFilterObjects(idstring);\n    const searchstring = getSearchInput(idstring);\n    const sort = getSortSelection(idstring);\n\n    // The filter reloads data from the Server.\n    // Because of pages and infinite scroll we don't have the data to do without.\n    callLoadData(idstring,\n      encodedtable,\n      0, // Pagenumber is always set to 0.\n      null,\n      sort,\n      null,\n      null,\n      null,\n      filterobjects,\n      searchstring);\n  }, 400);\n}\n\n/**\n * Check if the checkbox of the filterparam is checked and if so write values from date- and timepicker into checked variable.\n * @param {*} e\n * @param {*} idstring\n */\nexport function getDates(e, idstring) {\n\n  let name = e.target.dataset.columnname;\n  let filtercontainer = e.target.closest(\".datepickerform\");\n  let filtername = e.target.dataset.filtername;\n  let filtercheckbox = filtercontainer.querySelector('input[type=\"checkbox\"][id^=\"' + filtername + '\"][name=\"' + name + '\"]');\n\n  let dates = {};\n  if (filtercheckbox.dataset.timespan === \"true\") {\n    compareDateValues(e, filtercontainer);\n  }\n  if (filtercheckbox.checked) {\n    // Check if we have a timespan filter or a single one.\n    if (filtercheckbox.dataset.timespan === \"true\") {\n      setTimespanFilter(filtercontainer, filtername, idstring, name);\n    } else {\n      dates[String(filtercheckbox.dataset.operator)] = getDateAndTimePickerDataAsUnix(filtercontainer, \"datefilter\") / 1000;\n      // Check if key is set in array, otherwise set new key.\n      if (name && filtername) {\n        if (!checked[idstring][name]) {\n          checked[idstring][name] = {};\n        }\n        checked[idstring][name][filtername] = dates;\n      }\n      unsetEmptyFieldsInCheckedObject(name, filtername, idstring);\n    }\n  } else { // If checkbox of filter is unchecked: unset values in checked object.\n    resetCheckedObject(idstring, name, filtername);\n    unsetEmptyFieldsInCheckedObject(name, null, idstring);\n    // Vorher noch ein if exists etc.\n    Object.keys(checked[idstring]).forEach(function(key) {\n        Object.keys(checked[idstring][key]).forEach(function(okey) {\n            if (okey == filtername) {\n              resetCheckedObject(idstring, key, filtername);\n              unsetEmptyFieldsInCheckedObject(key, null, idstring);\n            }\n          }\n        );\n      }\n    );\n  }\n}\n\n/**\n * Check if date and time value set in first timepicker is before second timepicker.\n * @param {*} e // The element that triggerd the change.\n * @param {*} filtercontainer\n */\nfunction compareDateValues(e, filtercontainer) {\n  let startdate = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\");\n  let enddate = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\");\n\n  // We make sure the entered enddate is after 2020, to avoid triggering change while date setting is not finished yet.\n  if ((enddate / 1000 > 1577836800) && (startdate > enddate)) {\n    // eslint-disable-next-line no-console\n    console.error(\"starttime should be before endtime\");\n    // Apply change.\n    setDateAndTimePickerDataFromUnix(filtercontainer, 'startdate', enddate);\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id // Id of the date- and timepicker, the value should be applied to.\n * @param {integer} timestamp\n */\nexport function setDateAndTimePickerDataFromUnix(filtercontainer, id = '', timestamp) {\n\n  let dateobject = new Date(timestamp);\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  datepicker.value = dateobject.toISOString().split('T')[0];\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  timepicker.value = dateobject.toLocaleTimeString().slice(0, 5);\n}\n\n/**\n * Applying a timespan filter.\n * @param {*} filtercontainer\n * @param {string} filtername\n * @param {string} idstring\n * @param {string} name\n */\nfunction setTimespanFilter(filtercontainer, filtername, idstring, name) {\n  // Selector defined the operators.\n  let select = filtercontainer.querySelector('select[id^=\"filteroperationselect\"][name=\"' + name + '\"]');\n  let operator = select.value;\n\n  // First Column to apply the filter to\n  let startdatepicker = filtercontainer.querySelector('input[id^=\"startdate\"]');\n  let firstcolumn = startdatepicker.dataset.applytocolumn;\n  let firstoperator = \"\";\n  let additionalFirstColumnValues = {};\n  let valuefirstcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"startdate\") / 1000;\n\n  // Second Column to apply the filter to\n  let enddatepicker = filtercontainer.querySelector('input[id^=\"enddate\"]');\n  let secondcolumn = enddatepicker.dataset.applytocolumn;\n  let secondoperator = \"\";\n  let additionalSecondColumnValues = {};\n  let valuesecondcolumn = getDateAndTimePickerDataAsUnix(filtercontainer, \"enddate\") / 1000;\n\n  if (!Number.isInteger(valuefirstcolumn) || !Number.isInteger(valuefirstcolumn)) {\n    return;\n  }\n\n  // Unset the values of the span filter in checked object.\n  resetCheckedObject(idstring, firstcolumn, filtername);\n  resetCheckedObject(idstring, secondcolumn, filtername);\n\n  switch (operator) {\n    case \"within\":\n      firstoperator = \">=\";\n      secondoperator = \"<=\";\n      break;\n    case \"overlapboth\":\n      firstoperator = \"<=\";\n      secondoperator = \">=\";\n      break;\n    case \"overlapstart\":\n      firstoperator = \"<=\";\n      additionalSecondColumnValues[\">=\"] = valuefirstcolumn;\n      secondoperator = \"<=\";\n      break;\n    case \"overlapend\":\n      firstoperator = \">=\";\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\"<=\"] = valuesecondcolumn;\n      break;\n    case \"before\":\n      firstoperator = \"<\";\n      additionalSecondColumnValues[\"<=\"] = valuefirstcolumn;\n      secondoperator = \"<\";\n      break;\n    case \"after\":\n      secondoperator = \">=\";\n      additionalFirstColumnValues[\">=\"] = valuesecondcolumn;\n      firstoperator = \">\";\n      break;\n    case \"flexoverlap\":\n      firstoperator = \"fo\";\n      secondoperator = \"fo\";\n      break;\n    default:\n    // eslint-disable-next-line no-console\n    console.error(\"Value of selection not readable\");\n    break;\n  }\n  applySpanfilter(firstcolumn, valuefirstcolumn, filtername, firstoperator, additionalFirstColumnValues, idstring);\n  applySpanfilter(secondcolumn, valuesecondcolumn, filtername, secondoperator, additionalSecondColumnValues, idstring);\n\n  // Unsetting the timespan filter if empty\n  if (firstcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(firstcolumn, filtername, idstring);\n  }\n  if (secondcolumn && filtername) {\n    unsetEmptyFieldsInCheckedObject(secondcolumn, filtername, idstring);\n  }\n}\n\n/**\n *  Check if filter object already exisits and unset values.\n * @param {string} idstring\n * @param {string} column\n * @param {string} filtername\n */\nfunction resetCheckedObject(idstring, column = '', filtername = '') {\n\n  // If no column is specified, we reset all the filters.\n  if (column.length === 0) {\n\n    Object.keys(checked[idstring]).forEach(col => {\n      checked[idstring][col] = [];\n    });\n  } else {\n    if (checked[idstring].hasOwnProperty(column)) {\n      if (checked[idstring][column].hasOwnProperty(filtername)) {\n        delete checked[idstring][column][filtername];\n      }\n      if (checked[idstring][column].hasOwnProperty(filtername + 'a')) {\n        delete checked[idstring][column][filtername + 'a'];\n      }\n    }\n  }\n}\n\n/**\n *  Check if object already exisits and set values.\n * @param {string} column\n * @param {*} value\n * @param {string} filtername\n * @param {string} operator\n * @param {*} additionalvaluesObject\n * @param {string} idstring\n */\nfunction applySpanfilter(column, value, filtername, operator, additionalvaluesObject, idstring) {\n  if (operator.length >= 1) {\n    if (column && filtername) {\n      if (!checked[idstring][column]) {\n        checked[idstring][column] = {};\n      }\n      if (!checked[idstring][column][filtername]) {\n        checked[idstring][column][filtername] = {};\n      }\n      checked[idstring][column][filtername][operator] = value;\n      if (Object.keys(additionalvaluesObject).length > 0) {\n        checked[idstring][column][filtername + 'a'] = additionalvaluesObject;\n      }\n    }\n  }\n}\n\n/**\n * Unsetting empty keys in checked object. If a filter param was created and deleted later on we will need this.\n * @param {*} key1\n * @param {*} key2\n * @param {string} idstring\n */\nfunction unsetEmptyFieldsInCheckedObject(key1, key2, idstring) {\n  if (checked[idstring][key1]) {\n    if (checked[idstring][key1][key2]) {\n      if (Object.keys(checked[idstring][key1][key2]).length < 1) {\n        delete checked[idstring][key1][key2];\n      }\n    }\n  }\n\n  if (checked[idstring][key1]) {\n    if (Object.keys(checked[idstring][key1]).length < 1) {\n      delete checked[idstring][key1];\n    }\n  }\n}\n\n/**\n * Checking Date and Timepicker for corresponding element and returning Unix Code.\n * @param {*} filtercontainer\n * @param {string} id\n * @returns {string}\n */\nexport function getDateAndTimePickerDataAsUnix(filtercontainer, id = '') {\n\n  let datepicker = filtercontainer.querySelector('input[type=\"date\"][id*=\"' + id + '\"]');\n  let date = datepicker.value;\n\n  let timepicker = filtercontainer.querySelector('input[type=\"time\"][id*=\"' + id + '\"]');\n  let time = timepicker.value;\n\n  let unixTimestamp = Date.parse(date + ' ' + time);\n  let tenDigitTimestamp = unixTimestamp;\n\n  return tenDigitTimestamp;\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateUrlWithFilterSearchSort(filterobjects, searchstring, sort, dir) {\n\n  const url = new URL(window.location.href);\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  window.history.replaceState(null, '', url);\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  window.history.pushState(null, null, url.toString());\n}\n\n/**\n * Generating and displaying filterparams in URL.\n * @param {string} idstring\n * @param {string} filterobjects\n * @param {string} searchstring\n * @param {string} sort\n * @param {*} dir\n */\nexport function updateDownloadUrlWithFilterSearchSort(idstring, filterobjects, searchstring, sort, dir) {\n\n  // The container will hold wunderbyteTableClass, wunderbyteTableFilter, wunderbyteTableSearch classes.\n  let container = document.querySelector(\".wunderbyte_table_container_\" + idstring);\n  if (!container) {\n      return;\n  }\n\n  let url = '';\n  let formelement = null;\n  try {\n    formelement = container.querySelector('form.wb-table-download-buttons');\n    url = new URL(formelement.getAttribute('action'));\n  } catch (e) {\n\n    // eslint-disable-next-line no-console\n    console.log(e);\n    return;\n  }\n\n  let params = url.searchParams;\n\n  // We don't actually want to delete all url params, only those we don't use for searching.\n  params.delete('wbtfilter');\n  params.delete('wbtsearch');\n  params.delete('tsort');\n  params.delete('tdir');\n\n  if (filterobjects) {\n    url.searchParams.append('wbtfilter', filterobjects);\n  }\n  if (searchstring !== \"\" &&\n  searchstring !== null) {\n    url.searchParams.append('wbtsearch', searchstring);\n  }\n  if (sort !== \"\" &&\n  sort !== null) {\n    url.searchParams.append('tsort', sort);\n  }\n  if (dir !== null &&\n    dir > 0) {\n    url.searchParams.append('tdir', dir);\n  }\n\n  formelement.action = url.toString();\n}\n\n  /**\n   * Gets an array of checkboxes for every table by idstring.\n   * @param {*} name\n   * @param {*} selector\n   * @param {*} idstring\n   */\n   export function getChecked(name, selector, idstring) {\n\n    // We might have more than one Table, therefore we first have to get all tables.\n\n    const wbTable = document.querySelector(selector);\n\n    checked[idstring][name] = Array.from(\n      wbTable.querySelectorAll(\"input[name=\" + name + \"]\")\n    ).filter(function(el) {\n      return el.checked;\n    }).map(function(el) {\n      return el.value;\n    });\n\n    // If there are no checked boxes, we unset the key alltogether.\n    if (checked[idstring][name].length < 1) {\n      delete checked[idstring][name];\n    }\n  }\n\n/**\n * Returns json of active filters as json.\n * @param {*} idstring\n * @returns {string}\n */\nexport function getFilterObjects(idstring) {\n\n  if (!(idstring in checked)) {\n    return '';\n  }\n\n  let hasvalues = false;\n\n  for (const [, value] of Object.entries(checked[idstring])) {\n\n    if (value.length > 0 || Object.keys(value).length > 0) {\n      hasvalues = true;\n    }\n  }\n\n  if (!hasvalues) {\n    return '';\n  }\n  return JSON.stringify(checked[idstring]);\n}\n\n/**\n * Render the checkboxes for the filer.\n * @param {string} filterjson\n * @param {string} idstring\n * @param {string} encodedtable\n */\n    export const renderFilter = (filterjson, idstring, encodedtable) => {\n\n    // We render the filter only once, so if we find it already, we don't render it.\n\n    const selector = SELECTORS.CONTAINER + idstring;\n    const container = document.querySelector(selector);\n    const filtercontainer = container.querySelector(SELECTORS.FILTER);\n\n    if (filtercontainer) {\n      return;\n    }\n\n    Templates.renderForPromise('local_wunderbyte_table/filter', filterjson).then(({html}) => {\n\n        container.insertAdjacentHTML('afterbegin', html);\n\n        initializeCheckboxes(selector, idstring, encodedtable);\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n};"],"names":["selector","idstring","encodedtable","container","document","querySelector","button","addEventListener","componentscontainer","remove","resetCheckedObject","sort","filterobjects","searchstring","dir","url","formelement","URL","getAttribute","e","console","log","params","searchParams","delete","append","action","toString","window","location","href","history","replaceState","pushState","checked","initializeCheckboxes","filterContainer","SELECTORS","FILTER","dataset","initialized","selects","querySelectorAll","filterElements","hasOwnProperty","applyChangelistener","nodelist","forEach","el","idstring2","toggleFilterelement","checkAll","colname","checkedall","wbTable","Array","from","filter","map","value","stopPropagation","preventDefault","setTimeout","target","dateelement","getDates","name","includes","prefix","substring","indexOf","length","getChecked","getFilterObjects","columnname","filtercontainer","closest","filtername","filtercheckbox","dates","timespan","startdate","getDateAndTimePickerDataAsUnix","enddate","error","setDateAndTimePickerDataFromUnix","compareDateValues","operator","firstcolumn","applytocolumn","firstoperator","additionalFirstColumnValues","valuefirstcolumn","secondcolumn","secondoperator","additionalSecondColumnValues","valuesecondcolumn","Number","isInteger","applySpanfilter","unsetEmptyFieldsInCheckedObject","setTimespanFilter","String","Object","keys","key","okey","id","timestamp","dateobject","Date","datepicker","toISOString","split","timepicker","toLocaleTimeString","slice","column","col","additionalvaluesObject","key1","key2","date","time","unixTimestamp","parse","hasvalues","entries","JSON","stringify","filterjson","CONTAINER","renderForPromise","then","_ref","html","insertAdjacentHTML","catch"],"mappings":"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"}